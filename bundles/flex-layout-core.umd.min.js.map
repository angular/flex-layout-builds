{"version":3,"file":"flex-layout-core.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/core/browser-provider.ts","../../src/lib/core/match-media/match-media.ts","../../src/lib/utils/object-extend.ts","../../src/lib/core/add-alias.ts","../../src/lib/core/observable-media/observable-media-provider.ts","../../src/lib/core/breakpoints/breakpoint-tools.ts","../../src/lib/core/breakpoints/break-points-provider.ts","../../src/lib/core/match-media/match-media-provider.ts","../../src/lib/utils/auto-prefixer.ts","../../src/lib/core/stylesheet-map/stylesheet-map-provider.ts","../../src/lib/utils/layout-validator.ts","../../src/lib/core/media-monitor/media-monitor-provider.ts","../../src/lib/core/breakpoints/break-points-token.ts","../../src/lib/core/breakpoints/break-point-registry.ts","../../src/lib/core/media-change.ts","../../src/lib/core/media-monitor/media-monitor.ts","../../src/lib/core/observable-media/observable-media.ts","../../src/lib/core/breakpoints/data/break-points.ts","../../src/lib/core/breakpoints/data/orientation-break-points.ts","../../src/lib/core/stylesheet-map/stylesheet-map.ts","../../src/lib/core/server-token.ts","../../src/lib/core/style-utils/style-utils.ts","../../src/lib/core/module.ts","../../src/lib/core/media-queries-module.ts","../../src/lib/core/responsive-activation/responsive-activation.ts","../../src/lib/core/base/base.ts","../../src/lib/core/base/base-adapter.ts","../../src/lib/core/match-media/mock/mock-match-media.ts","../../src/lib/core/match-media/server-match-media.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {APP_BOOTSTRAP_LISTENER, PLATFORM_ID, InjectionToken} from '@angular/core';\nimport {DOCUMENT, isPlatformBrowser} from '@angular/common';\n\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n */\nexport function removeStyles(_document: Document, platformId: Object) {\n  return () => {\n    if (isPlatformBrowser(platformId)) {\n      const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n\n      // RegExp constructor should only be used if passing a variable to the constructor.\n      // When using static regular expression it is more performant to use reg exp literal.\n      // This is also needed to provide Safari 9 compatibility, please see\n      // https://stackoverflow.com/questions/37919802 for more discussion.\n      const classRegex = /\\bflex-layout-.+?\\b/g;\n      elements.forEach(el => {\n        el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ?\n          el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n      });\n    }\n  };\n}\n\n/**\n *  Provider to remove SSR styles on the browser\n */\nexport const BROWSER_PROVIDER = {\n  provide: <InjectionToken<(() => void)[]>>APP_BOOTSTRAP_LISTENER,\n  useFactory: removeStyles,\n  deps: [DOCUMENT, PLATFORM_ID],\n  multi: true\n};\n\nexport const CLASS_NAME = 'flex-layout-';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, NgZone, PLATFORM_ID} from '@angular/core';\nimport {DOCUMENT, isPlatformBrowser} from '@angular/common';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport {filter} from 'rxjs/operators/filter';\n\nimport {MediaChange} from '../media-change';\n\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\n@Injectable()\nexport class MatchMedia {\n  protected _registry: Map<string, MediaQueryList>;\n  protected _source: BehaviorSubject<MediaChange>;\n  protected _observable$: Observable<MediaChange>;\n\n  constructor(protected _zone: NgZone,\n              @Inject(PLATFORM_ID) protected _platformId: Object,\n              @Inject(DOCUMENT) protected _document: any) {\n    this._registry = new Map<string, MediaQueryList>();\n    this._source = new BehaviorSubject<MediaChange>(new MediaChange(true));\n    this._observable$ = this._source.asObservable();\n  }\n\n  /**\n   * For the specified mediaQuery?\n   */\n  isActive(mediaQuery: string): boolean {\n    let mql = this._registry.get(mediaQuery);\n    return !!mql ? mql.matches : false;\n  }\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * Typically used by the MediaQueryAdaptor; optionally available to components\n   * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n   *\n   * NOTE: if a mediaQuery is not specified, then ALL mediaQuery activations will\n   *       be announced.\n   */\n  observe(mediaQuery?: string): Observable<MediaChange> {\n    if (mediaQuery) {\n      this.registerQuery(mediaQuery);\n    }\n\n    return this._observable$.pipe(\n      filter((change: MediaChange) => {\n        return mediaQuery ? (change.mediaQuery === mediaQuery) : true;\n      })\n    );\n  }\n\n  /**\n   * Based on the BreakPointRegistry provider, register internal listeners for each unique\n   * mediaQuery. Each listener emits specific MediaChange data to observers\n   */\n  registerQuery(mediaQuery: string | string[]) {\n    let list = normalizeQuery(mediaQuery);\n\n    if (list.length > 0) {\n      this._prepareQueryCSS(list, this._document);\n\n      list.forEach(query => {\n        let mql = this._registry.get(query);\n        let onMQLEvent = (e: MediaQueryList) => {\n          this._zone.run(() => {\n            let change = new MediaChange(e.matches, query);\n            this._source.next(change);\n          });\n        };\n\n        if (!mql) {\n          mql = this._buildMQL(query);\n          mql.addListener(onMQLEvent);\n          this._registry.set(query, mql);\n        }\n\n        if (mql.matches) {\n          onMQLEvent(mql);  // Announce activate range for initial subscribers\n        }\n      });\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected _buildMQL(query: string): MediaQueryList {\n    let canListen = isPlatformBrowser(this._platformId) &&\n      !!(<any>window).matchMedia('all').addListener;\n\n    return canListen ? (<any>window).matchMedia(query) : <MediaQueryList>{\n      matches: query === 'all' || query === '',\n      media: query,\n      addListener: () => {\n      },\n      removeListener: () => {\n      }\n    };\n  }\n\n  /**\n   * For Webkit engines that only trigger the MediaQueryList Listener\n   * when there is at least one CSS selector for the respective media query.\n   *\n   * @param query string The mediaQuery used to create a faux CSS selector\n   *\n   */\n  protected _prepareQueryCSS(mediaQueries: string[], _document: Document) {\n    let list = mediaQueries.filter(it => !ALL_STYLES[it]);\n    if (list.length > 0) {\n      let query = list.join(', ');\n\n      try {\n        let styleEl = _document.createElement('style');\n\n        styleEl.setAttribute('type', 'text/css');\n        if (!styleEl['styleSheet']) {\n          let cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n` ;\n          styleEl.appendChild(_document.createTextNode(cssText));\n        }\n\n        _document.head.appendChild(styleEl);\n\n        // Store in private global registry\n        list.forEach(mq => ALL_STYLES[mq] = styleEl);\n\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }\n}\n\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES = {};\n\n/**\n * Always convert to unique list of queries; for iteration in ::registerQuery()\n */\nfunction normalizeQuery(mediaQuery: string | string[]): string[] {\n  return (typeof mediaQuery === 'undefined') ? [] :\n      (typeof mediaQuery === 'string') ? [mediaQuery] : unique(mediaQuery as string[]);\n}\n\n/**\n * Filter duplicate mediaQueries in the list\n */\nfunction unique(list: string[]): string[] {\n  let seen = {};\n  return list.filter(item => {\n    return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n  });\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param dest The object which will have properties copied to it.\n * @param sources The source objects from which properties will be copied.\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let source of sources) {\n    if (source != null) {\n      for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {MediaChange} from './media-change';\nimport {BreakPoint} from './breakpoints/break-point';\nimport {extendObject} from '../utils/object-extend';\n\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n */\nexport function mergeAlias(dest: MediaChange, source: BreakPoint | null) {\n  return extendObject(dest, source ? {\n        mqAlias: source.alias,\n        suffix: source.suffix\n      } : {});\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Optional, SkipSelf} from '@angular/core';\n\nimport {BreakPointRegistry} from '../breakpoints/break-point-registry';\nimport {MatchMedia} from '../match-media/match-media';\nimport {ObservableMedia, MediaService} from './observable-media';\n\n/**\n * Ensure a single global ObservableMedia service provider\n */\nexport function OBSERVABLE_MEDIA_PROVIDER_FACTORY(parentService: ObservableMedia,\n                                                  matchMedia: MatchMedia,\n                                                  breakpoints: BreakPointRegistry) {\n  return parentService || new MediaService(breakpoints, matchMedia);\n}\n/**\n *  Provider to return global service for observable service for all MediaQuery activations\n */\nexport const OBSERVABLE_MEDIA_PROVIDER = { // tslint:disable-line:variable-name\n  provide: ObservableMedia,\n  deps: [\n    [ new Optional(), new SkipSelf(), ObservableMedia ],\n    MatchMedia,\n    BreakPointRegistry\n  ],\n  useFactory: OBSERVABLE_MEDIA_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BreakPoint} from './break-point';\nimport {extendObject} from '../../utils/object-extend';\n\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\nfunction firstUpperCase(part: string) {\n  let first = part.length > 0 ? part.charAt(0) : '';\n  let remainder = (part.length > 1) ? part.slice(1) : '';\n  return first.toUpperCase() + remainder;\n}\n\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\nfunction camelCase(name: string): string {\n  return name\n      .replace(ALIAS_DELIMITERS, '|')\n      .split('|')\n      .map(firstUpperCase)\n      .join('');\n}\n\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\nexport function validateSuffixes(list: BreakPoint[]): BreakPoint[] {\n  list.forEach((bp: BreakPoint) => {\n    if (!bp.suffix || bp.suffix === '') {\n      bp.suffix = camelCase(bp.alias);          // create Suffix value based on alias\n      bp.overlapping = bp.overlapping || false; // ensure default value\n    }\n  });\n  return list;\n}\n\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\nexport function mergeByAlias(defaults: BreakPoint[], custom: BreakPoint[] = []): BreakPoint[] {\n  const merged = defaults.map((bp) => extendObject({}, bp));\n  const findByAlias = (alias) => merged.reduce((result, bp) => {\n    return result || (( bp.alias === alias) ? bp : null);\n  }, null);\n\n  // Merge custom breakpoints\n  custom.forEach((bp: BreakPoint) => {\n    let target = findByAlias(bp.alias);\n    if (target) {\n      extendObject(target, bp);\n    } else {\n      merged.push(bp);\n    }\n  });\n\n  return validateSuffixes(merged);\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINTS} from './break-points-token';\nimport {DEFAULT_BREAKPOINTS} from './data/break-points';\nimport {ORIENTATION_BREAKPOINTS} from './data/orientation-break-points';\n\nimport {extendObject} from '../../utils/object-extend';\nimport {mergeByAlias, validateSuffixes} from './breakpoint-tools';\n\n\n/**\n * Options to identify which breakpoint types to include as part of\n * a BreakPoint provider\n */\nexport interface BreakPointProviderOptions {\n  /**\n   * include pre-configured, internal default breakpoints.\n   * @default 'true'\n   */\n  defaults ?: boolean;\n  /**\n   * include pre-configured, internal orientations breakpoints.\n   * @default 'false'\n   */\n  orientations ?: boolean;\n}\n\n/**\n * Add new custom items to the default list or override existing default with custom overrides\n */\nexport function buildMergedBreakPoints(_custom?: BreakPoint[],\n                                       options?: BreakPointProviderOptions) {\n  options = extendObject({}, {\n        defaults: true,       // exclude pre-configured, internal default breakpoints\n        orientation: false      // exclude pre-configured, internal orientations breakpoints\n  }, options || {});\n\n  return () => {\n    // Order so the defaults are loaded last; so ObservableMedia will report these last!\n    let defaults = (options && options.orientations) ?\n      ORIENTATION_BREAKPOINTS.concat(DEFAULT_BREAKPOINTS) : DEFAULT_BREAKPOINTS;\n\n    return (options && options.defaults) ?\n      mergeByAlias(defaults, _custom || []) : mergeByAlias(_custom || []);\n  };\n}\n\n/**\n *  Ensure that only a single global BreakPoint list is instantiated...\n */\nexport function DEFAULT_BREAKPOINTS_PROVIDER_FACTORY() {\n  return validateSuffixes(DEFAULT_BREAKPOINTS);\n}\n/**\n * Default Provider that does not support external customization nor provide\n * the extra extended breakpoints:   \"handset\", \"tablet\", and \"web\"\n *\n *  NOTE: !! breakpoints are considered to have unique 'alias' properties,\n *        custom breakpoints matching existing breakpoints will override the properties\n *        of the existing (and not be added as an extra breakpoint entry).\n *        [xs, gt-xs, sm, gt-sm, md, gt-md, lg, gt-lg, xl]\n */\nexport const DEFAULT_BREAKPOINTS_PROVIDER = { // tslint:disable-line:variable-name\n  provide: BREAKPOINTS,\n  useFactory: DEFAULT_BREAKPOINTS_PROVIDER_FACTORY\n};\n/**\n * Use with FlexLayoutModule.CUSTOM_BREAKPOINTS_PROVIDER_FACTORY!\n */\nexport function CUSTOM_BREAKPOINTS_PROVIDER_FACTORY(_custom?: BreakPoint[],\n                                                    options?: BreakPointProviderOptions) {\n  return {\n    provide: <InjectionToken<BreakPoint[]>>BREAKPOINTS,\n    useFactory: buildMergedBreakPoints(_custom, options)\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken, NgZone, Optional, PLATFORM_ID, SkipSelf} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\nimport {MatchMedia} from '../match-media/match-media';\n\n/**\n * Ensure a single global service provider\n */\nexport function MATCH_MEDIA_PROVIDER_FACTORY(parentMedia: MatchMedia,\n                                             ngZone: NgZone,\n                                             platformId: Object,\n                                             _document: Document) {\n  return parentMedia || new MatchMedia(ngZone, platformId, _document);\n}\n\n\n/**\n * Export provider that uses a global service factory (above)\n */\nexport const MATCH_MEDIA_PROVIDER = {\n  provide: MatchMedia,\n  deps: [\n    [new Optional(), new SkipSelf(), MatchMedia],\n    NgZone,\n    <InjectionToken<Object>>PLATFORM_ID,\n    <InjectionToken<Document>>DOCUMENT,\n  ],\n  useFactory: MATCH_MEDIA_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n */\nexport function applyCssPrefixes(target) {\n  for (let key in target) {\n    let value = target[key] || '';\n\n    switch (key) {\n      case 'display':\n        if (value === 'flex') {\n          target['display'] = [\n            '-webkit-flex',\n            'flex'\n          ];\n        } else if (value === 'inline-flex') {\n          target['display'] = [\n            '-webkit-inline-flex',\n            'inline-flex'\n          ];\n        } else {\n          target['display'] = value;\n        }\n        break;\n\n      case 'align-items':\n      case 'align-self':\n      case 'align-content':\n      case 'flex':\n      case 'flex-basis':\n      case 'flex-flow':\n      case 'flex-grow':\n      case 'flex-shrink':\n      case 'flex-wrap':\n      case 'justify-content':\n        target['-webkit-' + key] = value;\n        break;\n\n      case 'flex-direction':\n        value = value || 'row';\n        target['-webkit-flex-direction'] = value;\n        target['flex-direction'] = value;\n        break;\n\n      case 'order':\n        target['order'] = target['-webkit-' + key] = isNaN(value) ? '0' : value;\n        break;\n    }\n  }\n  return target;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Optional, SkipSelf} from '@angular/core';\n\nimport {StylesheetMap} from './stylesheet-map';\n\n/**\n * Ensure a single global service provider\n */\nexport function STYLESHEET_MAP_PROVIDER_FACTORY(parentSheet: StylesheetMap) {\n  return parentSheet || new StylesheetMap();\n}\n\n\n/**\n * Export provider that uses a global service factory (above)\n */\nexport const STYLESHEET_MAP_PROVIDER = {\n  provide: StylesheetMap,\n  deps: [\n    [new Optional(), new SkipSelf(), StylesheetMap],\n  ],\n  useFactory: STYLESHEET_MAP_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport const INLINE = 'inline';\nexport const LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n */\nexport function buildLayoutCSS(value: string) {\n  let [direction, wrap, isInline] = validateValue(value);\n  return buildCSS(direction, wrap, isInline);\n }\n\n/**\n  * Validate the value to be one of the acceptable value options\n  * Use default fallback of 'row'\n  */\nexport function validateValue(value: string) {\n  value = value ? value.toLowerCase() : '';\n  let [direction, wrap, inline] = value.split(' ');\n\n  // First value must be the `flex-direction`\n  if (!LAYOUT_VALUES.find(x => x === direction)) {\n    direction = LAYOUT_VALUES[0];\n  }\n\n  if (wrap === INLINE) {\n    wrap = (inline !== INLINE) ? inline : '';\n    inline = INLINE;\n  }\n\n  return [direction, validateWrapValue(wrap), !!inline];\n}\n\n/**\n * Determine if the validated, flex-direction value specifies\n * a horizontal/row flow.\n */\nexport function isFlowHorizontal(value: string): boolean {\n  let [flow, ] = validateValue(value);\n  return flow.indexOf('row') > -1;\n}\n\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n */\nexport function validateWrapValue(value) {\n  if (!!value) {\n    switch (value.toLowerCase()) {\n      case 'reverse':\n      case 'wrap-reverse':\n      case 'reverse-wrap':\n        value = 'wrap-reverse';\n        break;\n\n      case 'no':\n      case 'none':\n      case 'nowrap':\n        value = 'nowrap';\n        break;\n\n      // All other values fallback to 'wrap'\n      default:\n        value = 'wrap';\n        break;\n    }\n  }\n  return value;\n}\n\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n */\nfunction buildCSS(direction, wrap = null, inline = false) {\n  return {\n    'display': inline ? 'inline-flex' : 'flex',\n    'box-sizing': 'border-box',\n    'flex-direction': direction,\n    'flex-wrap': !!wrap ? wrap : null\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Optional, SkipSelf} from '@angular/core';\n\nimport {MediaMonitor} from './media-monitor';\nimport {MatchMedia} from '../match-media/match-media';\nimport {BreakPointRegistry} from '../breakpoints/break-point-registry';\n\n/**\n * Ensure a single global service provider\n */\nexport function MEDIA_MONITOR_PROVIDER_FACTORY(parentMonitor: MediaMonitor,\n                                               breakpoints: BreakPointRegistry,\n                                               matchMedia: MatchMedia) {\n  return parentMonitor || new MediaMonitor(breakpoints, matchMedia);\n}\n\n\n/**\n * Export provider that uses a global service factory (above)\n */\nexport const MEDIA_MONITOR_PROVIDER = {\n  provide : MediaMonitor,\n  deps : [\n    [ new Optional(), new SkipSelf(), MediaMonitor ],\n    BreakPointRegistry,\n    MatchMedia,\n  ],\n  useFactory : MEDIA_MONITOR_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {BreakPoint} from './break-point';\n\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n */\nexport const BREAKPOINTS =\n    new InjectionToken<BreakPoint[]>('Token (@angular/flex-layout) Breakpoints');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable, Inject} from '@angular/core';\n\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINTS} from './break-points-token';\n\n\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overriden from custom, application-specific ranges\n *\n */\n@Injectable()\nexport class BreakPointRegistry {\n\n  constructor(@Inject(BREAKPOINTS) private _registry: BreakPoint[]) {\n  }\n\n  /**\n   * Accessor to raw list\n   */\n  get items(): BreakPoint[ ] {\n    return [...this._registry];\n  }\n\n  /**\n   * Accessor to sorted list used for registration with matchMedia API\n   *\n   * NOTE: During breakpoint registration, we want to register the overlaps FIRST\n   *       so the non-overlaps will trigger the MatchMedia:BehaviorSubject last!\n   *       And the largest, non-overlap, matching breakpoint should be the lastReplay value\n   */\n  get sortedItems(): BreakPoint[] {\n    let overlaps = this._registry.filter(it => it.overlapping === true);\n    let nonOverlaps = this._registry.filter(it => it.overlapping !== true);\n\n    return [...overlaps, ...nonOverlaps];\n  }\n\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   */\n  findByAlias(alias: string): BreakPoint | null {\n    return this._registry.find(bp => bp.alias == alias) || null;\n  }\n\n  findByQuery(query: string): BreakPoint | null {\n    return this._registry.find(bp => bp.mediaQuery == query) || null;\n  }\n\n  /**\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n   * e.g. gt-sm overlaps md, lg, and xl\n   */\n  get overlappings(): BreakPoint[] {\n    return this._registry.filter(it => it.overlapping == true);\n  }\n\n  /**\n   * Get list of all registered (non-empty) breakpoint aliases\n   */\n  get aliases(): string[] {\n    return this._registry.map(it => it.alias);\n  }\n\n  /**\n   * Aliases are mapped to properties using suffixes\n   * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n   * for property layoutGtSM.\n   */\n  get suffixes(): string[] {\n    return this._registry.map(it => !!it.suffix ? it.suffix : '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport type MediaQuerySubscriber = (changes: MediaChange) => void;\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nexport class MediaChange {\n  property: string;\n  value: any;\n\n  constructor(public matches = false,       // Is the mq currently activated\n              public mediaQuery = 'all',    // e.g.   (min-width: 600px) and (max-width: 959px)\n              public mqAlias = '',          // e.g.   gt-sm, md, gt-lg\n              public suffix = ''            // e.g.   GtSM, Md, GtLg\n  ) { }\n\n  clone() {\n    return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n  }\n}\n\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {filter} from 'rxjs/operators/filter';\nimport {map} from 'rxjs/operators/map';\n\nimport {BreakPoint} from '../breakpoints/break-point';\nimport {BreakPointRegistry} from '../breakpoints/break-point-registry';\nimport {MatchMedia} from '../match-media/match-media';\nimport {MediaChange} from '../media-change';\nimport {mergeAlias} from '../add-alias';\n\n\n/**\n * MediaMonitor uses the MatchMedia service to observe mediaQuery changes (both activations and\n * deactivations). These changes are are published as MediaChange notifications.\n *\n * Note: all notifications will be performed within the\n * ng Zone to trigger change detections and component updates.\n *\n * It is the MediaMonitor that:\n *  - auto registers all known breakpoints\n *  - injects alias information into each raw MediaChange event\n *  - provides accessor to the currently active BreakPoint\n *  - publish list of overlapping BreakPoint(s); used by ResponsiveActivation\n */\n@Injectable()\nexport class MediaMonitor {\n  constructor(private _breakpoints: BreakPointRegistry, private _matchMedia: MatchMedia) {\n    this._registerBreakpoints();\n  }\n\n  /**\n   * Read-only accessor to the list of breakpoints configured in the BreakPointRegistry provider\n   */\n  get breakpoints(): BreakPoint[] {\n    return [...this._breakpoints.items];\n  }\n\n  get activeOverlaps(): BreakPoint[] {\n    let items: BreakPoint[] = this._breakpoints.overlappings.reverse();\n    return items.filter((bp: BreakPoint) => {\n      return this._matchMedia.isActive(bp.mediaQuery);\n    });\n  }\n\n  get active(): BreakPoint | null {\n    let found: BreakPoint | null = null, items = this.breakpoints.reverse();\n    items.forEach(bp => {\n      if (bp.alias !== '') {\n        if (!found && this._matchMedia.isActive(bp.mediaQuery)) {\n          found = bp;\n        }\n      }\n    });\n\n    let first = this.breakpoints[0];\n    return found || (this._matchMedia.isActive(first.mediaQuery) ? first : null);\n  }\n\n  /**\n   * For the specified mediaQuery alias, is the mediaQuery range active?\n   */\n  isActive(alias: string): boolean {\n    let bp = this._breakpoints.findByAlias(alias) || this._breakpoints.findByQuery(alias);\n    return this._matchMedia.isActive(bp ? bp.mediaQuery : alias);\n  }\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * If specific breakpoint is observed, only return *activated* events\n   * otherwise return all events for BOTH activated + deactivated changes.\n   */\n  observe(alias?: string): Observable<MediaChange> {\n    let bp = this._breakpoints.findByAlias(alias || '') ||\n      this._breakpoints.findByQuery(alias || '');\n    let hasAlias = (change: MediaChange) => (bp ? change.mqAlias !== '' : true);\n    // Note: the raw MediaChange events [from MatchMedia] do not contain important alias information\n\n    let media$ = this._matchMedia.observe(bp ? bp.mediaQuery : alias);\n    return media$.pipe(\n      map(change => mergeAlias(change, bp)),\n      filter(hasAlias)\n    );\n  }\n\n  /**\n   * Immediate calls to matchMedia() to establish listeners\n   * and prepare for immediate subscription notifications\n   */\n  private _registerBreakpoints() {\n    let queries = this._breakpoints.sortedItems.map(bp => bp.mediaQuery);\n    this._matchMedia.registerQuery(queries);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Observable, Subscribable} from 'rxjs/Observable';\nimport {map} from 'rxjs/operators/map';\nimport {filter} from 'rxjs/operators/filter';\n\nimport {BreakPointRegistry} from '../breakpoints/break-point-registry';\nimport {MediaChange} from '../media-change';\nimport {MatchMedia} from '../match-media/match-media';\nimport {mergeAlias} from '../add-alias';\nimport {BreakPoint} from '../breakpoints/break-point';\n\n/**\n * Base class for MediaService and pseudo-token for\n */\nexport abstract class ObservableMedia implements Subscribable<MediaChange> {\n  abstract isActive(query: string): boolean;\n\n  abstract asObservable(): Observable<MediaChange>;\n\n  abstract subscribe(next?: (value: MediaChange) => void,\n                     error?: (error: any) => void,\n                     complete?: () => void): Subscription;\n}\n\n/**\n * Class internalizes a MatchMedia service and exposes an Subscribable and Observable interface.\n\n * This an Observable with that exposes a feature to subscribe to mediaQuery\n * changes and a validator method (`isActive(<alias>)`) to test if a mediaQuery (or alias) is\n * currently active.\n *\n * !! Only mediaChange activations (not de-activations) are announced by the ObservableMedia\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * !! This is not an actual Observable. It is a wrapper of an Observable used to publish additional\n * methods like `isActive(<alias>). To access the Observable and use RxJS operators, use\n * `.asObservable()` with syntax like media.asObservable().map(....).\n *\n *  @usage\n *\n *  // RxJS\n *  import {filter} from 'rxjs/operators/filter';\n *  import { ObservableMedia } from '@angular/flex-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status : string = '';\n *\n *    constructor(  media:ObservableMedia ) {\n *      let onChange = (change:MediaChange) => {\n *        this.status = change ? `'${change.mqAlias}' = (${change.mediaQuery})` : '';\n *      };\n *\n *      // Subscribe directly or access observable to use filter/map operators\n *      // e.g.\n *      //      media.subscribe(onChange);\n *\n *      media.asObservable()\n *        .pipe(\n *          filter((change:MediaChange) => true)   // silly noop filter\n *        ).subscribe(onChange);\n *    }\n *  }\n */\n@Injectable()\nexport class MediaService implements ObservableMedia {\n  /**\n   * Should we announce gt-<xxx> breakpoint activations ?\n   */\n  filterOverlaps = true;\n\n  constructor(private breakpoints: BreakPointRegistry,\n              private mediaWatcher: MatchMedia) {\n    this._registerBreakPoints();\n    this.observable$ = this._buildObservable();\n  }\n\n  /**\n   * Test if specified query/alias is active.\n   */\n  isActive(alias): boolean {\n    let query = this._toMediaQuery(alias);\n    return this.mediaWatcher.isActive(query);\n  }\n\n  /**\n   * Proxy to the Observable subscribe method\n   */\n  subscribe(next?: (value: MediaChange) => void,\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n    return this.observable$.subscribe(next, error, complete);\n  }\n\n  /**\n   * Access to observable for use with operators like\n   * .filter(), .map(), etc.\n   */\n  asObservable(): Observable<MediaChange> {\n    return this.observable$;\n  }\n\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n\n  /**\n   * Register all the mediaQueries registered in the BreakPointRegistry\n   * This is needed so subscribers can be auto-notified of all standard, registered\n   * mediaQuery activations\n   */\n  private _registerBreakPoints() {\n    let queries = this.breakpoints.sortedItems.map(bp => bp.mediaQuery);\n    this.mediaWatcher.registerQuery(queries);\n  }\n\n  /**\n   * Prepare internal observable\n   *\n   * NOTE: the raw MediaChange events [from MatchMedia] do not\n   *       contain important alias information; as such this info\n   *       must be injected into the MediaChange\n   */\n  private _buildObservable() {\n    const self = this;\n    const media$ = this.mediaWatcher.observe();\n    const activationsOnly = (change: MediaChange) => {\n      return change.matches === true;\n    };\n    const addAliasInformation = (change: MediaChange) => {\n      return mergeAlias(change, this._findByQuery(change.mediaQuery));\n    };\n    const excludeOverlaps = (change: MediaChange) => {\n      let bp = this.breakpoints.findByQuery(change.mediaQuery);\n      return !bp ? true : !(self.filterOverlaps && bp.overlapping);\n    };\n\n    /**\n     * Only pass/announce activations (not de-activations)\n     * Inject associated (if any) alias information into the MediaChange event\n     * Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n     */\n    return media$.pipe(\n      filter(activationsOnly),\n      filter(excludeOverlaps),\n      map(addAliasInformation)\n    );\n  }\n\n  /**\n   * Breakpoint locator by alias\n   */\n  private _findByAlias(alias) {\n    return this.breakpoints.findByAlias(alias);\n  }\n\n  /**\n   * Breakpoint locator by mediaQuery\n   */\n  private _findByQuery(query) {\n    return this.breakpoints.findByQuery(query);\n  }\n\n  /**\n   * Find associated breakpoint (if any)\n   */\n  private _toMediaQuery(query) {\n    let bp: BreakPoint | null = this._findByAlias(query) || this._findByQuery(query);\n    return bp ? bp.mediaQuery : query;\n  }\n\n  private observable$: Observable<MediaChange>;\n}\n\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {BreakPoint} from '../break-point';\n\nexport const RESPONSIVE_ALIASES = [\n  'xs', 'gt-xs', 'sm', 'gt-sm', 'md', 'gt-md', 'lg', 'gt-lg', 'xl'\n];\n\nexport const DEFAULT_BREAKPOINTS: BreakPoint[] = [\n  {\n    alias: 'xs',\n    mediaQuery: '(min-width: 0px) and (max-width: 599px)'\n  },\n  {\n    alias: 'gt-xs',\n    overlapping: true,\n    mediaQuery: '(min-width: 600px)'\n  },\n  {\n    alias: 'lt-sm',\n    overlapping: true,\n    mediaQuery: '(max-width: 599px)'\n  },\n  {\n    alias: 'sm',\n    mediaQuery: '(min-width: 600px) and (max-width: 959px)'\n  },\n  {\n    alias: 'gt-sm',\n    overlapping: true,\n    mediaQuery: '(min-width: 960px)'\n  },\n  {\n    alias: 'lt-md',\n    overlapping: true,\n    mediaQuery: '(max-width: 959px)'\n  },\n  {\n    alias: 'md',\n    mediaQuery: '(min-width: 960px) and (max-width: 1279px)'\n  },\n  {\n    alias: 'gt-md',\n    overlapping: true,\n    mediaQuery: '(min-width: 1280px)'\n  },\n  {\n    alias: 'lt-lg',\n    overlapping: true,\n    mediaQuery: '(max-width: 1279px)'\n  },\n  {\n    alias: 'lg',\n    mediaQuery: '(min-width: 1280px) and (max-width: 1919px)'\n  },\n  {\n    alias: 'gt-lg',\n    overlapping: true,\n    mediaQuery: '(min-width: 1920px)'\n  },\n  {\n    alias: 'lt-xl',\n    overlapping: true,\n    mediaQuery: '(max-width: 1920px)'\n  },\n  {\n    alias: 'xl',\n    mediaQuery: '(min-width: 1920px) and (max-width: 5000px)'\n  }\n];\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BreakPoint} from '../break-point';\n\n/* tslint:disable */\nconst HANDSET_PORTRAIT  = '(orientations: portrait) and (max-width: 599px)';\nconst HANDSET_LANDSCAPE = '(orientations: landscape) and (max-width: 959px)';\n\nconst TABLET_LANDSCAPE  = '(orientations: landscape) and (min-width: 960px) and (max-width: 1279px)';\nconst TABLET_PORTRAIT   = '(orientations: portrait) and (min-width: 600px) and (max-width: 839px)';\n\nconst WEB_PORTRAIT      = '(orientations: portrait) and (min-width: 840px)';\nconst WEB_LANDSCAPE     = '(orientations: landscape) and (min-width: 1280px)';\n\nexport const ScreenTypes = {\n  'HANDSET'           : `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n  'TABLET'            : `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n  'WEB'               : `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n\n  'HANDSET_PORTRAIT'  : `${HANDSET_PORTRAIT}`,\n  'TABLET_PORTRAIT'   : `${TABLET_PORTRAIT} `,\n  'WEB_PORTRAIT'      : `${WEB_PORTRAIT}`,\n\n  'HANDSET_LANDSCAPE' : `${HANDSET_LANDSCAPE}]`,\n  'TABLET_LANDSCAPE'  : `${TABLET_LANDSCAPE}`,\n  'WEB_LANDSCAPE'     : `${WEB_LANDSCAPE}`\n};\n\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\nexport const ORIENTATION_BREAKPOINTS : BreakPoint[] = [\n  {'alias': 'handset',            'mediaQuery': ScreenTypes.HANDSET},\n  {'alias': 'handset.landscape',  'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE},\n  {'alias': 'handset.portrait',   'mediaQuery': ScreenTypes.HANDSET_PORTRAIT},\n\n  {'alias': 'tablet',             'mediaQuery': ScreenTypes.TABLET},\n  {'alias': 'tablet.landscape',   'mediaQuery': ScreenTypes.TABLET},\n  {'alias': 'tablet.portrait',    'mediaQuery': ScreenTypes.TABLET_PORTRAIT},\n\n  {'alias': 'web',                'mediaQuery': ScreenTypes.WEB, overlapping : true },\n  {'alias': 'web.landscape',      'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping : true },\n  {'alias': 'web.portrait',       'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping : true }\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\n\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\n@Injectable()\nexport class StylesheetMap {\n\n  readonly stylesheet = new Map<HTMLElement, Map<string, string|number>>();\n\n  /**\n   * Add an individual style to an HTML element\n   */\n  addStyleToElement(element: HTMLElement, style: string, value: string|number) {\n    const stylesheet = this.stylesheet.get(element);\n    if (stylesheet) {\n      stylesheet.set(style, value);\n    } else {\n      this.stylesheet.set(element, new Map([[style, value]]));\n    }\n  }\n\n  /**\n   * Clear the virtual stylesheet\n   */\n  clearStyles() {\n    this.stylesheet.clear();\n  }\n\n  /**\n   * Retrieve a given style for an HTML element\n   */\n  getStyleForElement(el: HTMLElement, styleName: string): string {\n    const styles = this.stylesheet.get(el);\n    let value = '';\n    if (styles) {\n      const style = styles.get(styleName);\n      if (typeof style === 'number' || typeof style === 'string') {\n        value = style + '';\n      }\n    }\n    return value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n */\nexport const SERVER_TOKEN = new InjectionToken<boolean>('FlexLayoutServerLoaded');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, Optional, PLATFORM_ID} from '@angular/core';\nimport {isPlatformBrowser, isPlatformServer} from '@angular/common';\n\nimport {applyCssPrefixes} from '../../utils/auto-prefixer';\nimport {StylesheetMap} from '../stylesheet-map/stylesheet-map';\nimport {SERVER_TOKEN} from '../server-token';\n\n@Injectable()\nexport class StyleUtils {\n\n  constructor(@Optional() private _serverStylesheet: StylesheetMap,\n              @Optional() @Inject(SERVER_TOKEN) private _serverModuleLoaded: boolean,\n              @Inject(PLATFORM_ID) private _platformId) {}\n\n  /**\n   * Applies styles given via string pair or object map to the directive element\n   */\n  applyStyleToElement(element: HTMLElement, style: StyleDefinition, value?: string | number) {\n    let styles = {};\n    if (typeof style === 'string') {\n      styles[style] = value;\n      style = styles;\n    }\n    styles = applyCssPrefixes(style);\n    this._applyMultiValueStyleToElement(styles, element);\n  }\n\n  /**\n   * Applies styles given via string pair or object map to the directive's element\n   */\n  applyStyleToElements(style: StyleDefinition, elements: HTMLElement[] = []) {\n    const styles = applyCssPrefixes(style);\n    elements.forEach(el => {\n      this._applyMultiValueStyleToElement(styles, el);\n    });\n  }\n\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction)\n   *\n   * Check inline style first then check computed (stylesheet) style\n   */\n  getFlowDirection(target: HTMLElement): [string, string] {\n    const query = 'flex-direction';\n    let value = this.lookupStyle(target, query);\n    if (value === FALLBACK_STYLE) {\n      value = '';\n    }\n    const hasInlineValue = this.lookupInlineStyle(target, query) ||\n    (isPlatformServer(this._platformId) && this._serverModuleLoaded) ? value : '';\n\n    return [value || 'row', hasInlineValue];\n  }\n\n  /**\n   * Find the DOM element's raw attribute value (if any)\n   */\n  lookupAttributeValue(element: HTMLElement, attribute: string): string {\n    return element.getAttribute(attribute) || '';\n  }\n\n  /**\n   * Find the DOM element's inline style value (if any)\n   */\n  lookupInlineStyle(element: HTMLElement, styleName: string): string {\n    return element.style[styleName] || element.style.getPropertyValue(styleName) || '';\n  }\n\n  /**\n   * Determine the inline or inherited CSS style\n   * NOTE: platform-server has no implementation for getComputedStyle\n   */\n  lookupStyle(element: HTMLElement, styleName: string, inlineOnly = false): string {\n    let value = '';\n    if (element) {\n      let immediateValue = value = this.lookupInlineStyle(element, styleName);\n      if (!immediateValue) {\n        if (isPlatformBrowser(this._platformId)) {\n          if (!inlineOnly) {\n            value = getComputedStyle(element).getPropertyValue(styleName);\n          }\n        } else {\n          if (this._serverModuleLoaded) {\n            value = this._serverStylesheet.getStyleForElement(element, styleName);\n          }\n        }\n      }\n    }\n\n    // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n    //       in which case getComputedStyle() should determine a valid value.\n    return value ? value.trim() : FALLBACK_STYLE;\n  }\n\n  /**\n   * Applies the styles to the element. The styles object map may contain an array of values\n   * Each value will be added as element style\n   * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n   */\n  private _applyMultiValueStyleToElement(styles: {}, element: HTMLElement) {\n    Object.keys(styles).sort().forEach(key => {\n      const values = Array.isArray(styles[key]) ? styles[key] : [styles[key]];\n      values.sort();\n      for (let value of values) {\n        if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n          element.style.setProperty(key, value);\n        } else {\n          this._serverStylesheet.addStyleToElement(element, key, value);\n        }\n      }\n    });\n  }\n}\n\n/**\n * Definition of a css style. Either a property name (e.g. \"flex-basis\") or an object\n * map of property name and value (e.g. {display: 'none', flex-order: 5})\n */\nexport type StyleDefinition = { [property: string]: string | number | null };\n\nconst FALLBACK_STYLE = 'block';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\nimport {MediaMonitor} from './media-monitor/media-monitor';\nimport {BreakPointRegistry} from './breakpoints/break-point-registry';\n\nimport {OBSERVABLE_MEDIA_PROVIDER} from './observable-media/observable-media-provider';\nimport {DEFAULT_BREAKPOINTS_PROVIDER} from './breakpoints/break-points-provider';\nimport {MATCH_MEDIA_PROVIDER} from './match-media/match-media-provider';\nimport {BROWSER_PROVIDER} from './browser-provider';\nimport {StyleUtils} from './style-utils/style-utils';\nimport {STYLESHEET_MAP_PROVIDER} from './stylesheet-map/stylesheet-map-provider';\n\n/**\n * *****************************************************************\n * Define module for the MediaQuery API\n * *****************************************************************\n */\n\n@NgModule({\n  providers: [\n    DEFAULT_BREAKPOINTS_PROVIDER,  // Supports developer overrides of list of known breakpoints\n    BreakPointRegistry,      // Registry of known/used BreakPoint(s)\n    MATCH_MEDIA_PROVIDER,    // Low-level service to publish observables w/ window.matchMedia()\n    MediaMonitor,            // MediaQuery monitor service observes all known breakpoints\n    OBSERVABLE_MEDIA_PROVIDER,  // easy subscription injectable `media$` matchMedia observable]\n    STYLESHEET_MAP_PROVIDER,\n    StyleUtils,\n    BROWSER_PROVIDER,\n  ]\n})\nexport class CoreModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CoreModule} from './module';\n\n\n/**\n * @deprecated use Core Module instead\n * @deletion-target 5.0.0-beta.15\n * *****************************************************************\n * Define module for the MediaQuery API\n * *****************************************************************\n */\n@NgModule({\n  imports: [CoreModule],\n  exports: [CoreModule],\n})\nexport class MediaQueriesModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Subscription} from 'rxjs/Subscription';\nimport {map} from 'rxjs/operators/map';\n\nimport {MediaChange, MediaQuerySubscriber} from '../media-change';\nimport {BreakPoint} from '../breakpoints/break-point';\nimport {MediaMonitor} from '../media-monitor/media-monitor';\nimport {extendObject} from '../../utils/object-extend';\n\nexport declare type SubscriptionList = Subscription[];\n\nexport interface BreakPointX extends BreakPoint {\n  key: string;\n  baseKey: string;\n}\n\nexport class KeyOptions {\n  constructor(public baseKey: string,\n              public defaultValue: string|number|boolean,\n              public inputKeys: { [key: string]: any }) {\n  }\n}\n\n/**\n * ResponsiveActivation acts as a proxy between the MonitorMedia service (which emits mediaQuery\n * changes) and the fx API directives. The MQA proxies mediaQuery change events and notifies the\n * directive via the specified callback.\n *\n * - The MQA also determines which directive property should be used to determine the\n *   current change 'value'... BEFORE the original `onMediaQueryChanges()` method is called.\n * - The `ngOnDestroy()` method is also head-hooked to enable auto-unsubscribe from the\n *   MediaQueryServices.\n *\n * NOTE: these interceptions enables the logic in the fx API directives to remain terse and clean.\n */\nexport class ResponsiveActivation {\n  private _subscribers: SubscriptionList = [];\n  private _activatedInputKey: string;\n  private _registryMap: BreakPointX[];\n\n  /**\n   * Constructor\n   */\n  constructor(private _options: KeyOptions,\n              private _mediaMonitor: MediaMonitor,\n              private _onMediaChanges: MediaQuerySubscriber) {\n    this._registryMap = this._buildRegistryMap();\n    this._subscribers = this._configureChangeObservers();\n  }\n\n  /**\n   * Get a readonly sorted list of the breakpoints corresponding to the directive properties\n   * defined in the HTML markup: the sorting is done from largest to smallest. The order is\n   * important when several media queries are 'registered' and from which, the browser uses the\n   * first matching media query.\n   */\n  get registryFromLargest(): BreakPointX[] {\n    return [...this._registryMap].reverse();\n  }\n\n  /**\n   * Accessor to the DI'ed directive property\n   * Each directive instance has a reference to the MediaMonitor which is\n   * used HERE to subscribe to mediaQuery change notifications.\n   */\n  get mediaMonitor(): MediaMonitor {\n    return this._mediaMonitor;\n  }\n\n  /**\n   * Determine which directive @Input() property is currently active (for the viewport size):\n   * The key must be defined (in use) or fallback to the 'closest' overlapping property key\n   * that is defined; otherwise the default property key will be used.\n   * e.g.\n   *      if `<div fxHide fxHide.gt-sm=\"false\">` is used but the current activated mediaQuery alias\n   *      key is `.md` then `.gt-sm` should be used instead\n   */\n  get activatedInputKey(): string {\n    return this._activatedInputKey || this._options.baseKey;\n  }\n\n  /**\n   * Get the currently activated @Input value or the fallback default @Input value\n   */\n  get activatedInput(): any {\n    let key = this.activatedInputKey;\n    return this.hasKeyValue(key) ? this._lookupKeyValue(key) : this._options.defaultValue;\n  }\n\n  /**\n   * Fast validator for presence of attribute on the host element\n   */\n  hasKeyValue(key) {\n    let value = this._options.inputKeys[key];\n    return typeof value !== 'undefined';\n  }\n\n  /**\n   * Remove interceptors, restore original functions, and forward the onDestroy() call\n   */\n  destroy() {\n    this._subscribers.forEach((link: Subscription) => {\n      link.unsubscribe();\n    });\n    this._subscribers = [];\n  }\n\n  /**\n   * For each *defined* API property, register a callback to `_onMonitorEvents( )`\n   * Cache 1..n subscriptions for internal auto-unsubscribes when the the directive destructs\n   */\n  private _configureChangeObservers(): SubscriptionList {\n    let subscriptions: Subscription[] = [];\n\n    this._registryMap.forEach((bp: BreakPointX) => {\n      if (this._keyInUse(bp.key)) {\n        // Inject directive default property key name: to let onMediaChange() calls\n        // know which property is being triggered...\n        let buildChanges = (change: MediaChange) => {\n          change = change.clone();\n          change.property = this._options.baseKey;\n          return change;\n        };\n\n        subscriptions.push(\n          this.mediaMonitor\n              .observe(bp.alias)\n              .pipe(map(buildChanges))\n              .subscribe(change => {\n                this._onMonitorEvents(change);\n              })\n        );\n      }\n    });\n\n    return subscriptions;\n  }\n\n  /**\n   * Build mediaQuery key-hashmap; only for the directive properties that are actually defined/used\n   * in the HTML markup\n   */\n  private _buildRegistryMap() {\n    return this.mediaMonitor.breakpoints\n        .map(bp => {\n          return <BreakPointX> extendObject({}, bp, {\n            baseKey: this._options.baseKey,             // e.g. layout, hide, self-align, flex-wrap\n            key: this._options.baseKey + bp.suffix  // e.g.  layoutGtSm, layoutMd, layoutGtLg\n          });\n        })\n        .filter(bp => this._keyInUse(bp.key));\n  }\n\n  /**\n   * Synchronizes change notifications with the current mq-activated @Input and calculates the\n   * mq-activated input value or the default value\n   */\n  protected _onMonitorEvents(change: MediaChange) {\n    if (change.property == this._options.baseKey) {\n      change.value = this._calculateActivatedValue(change);\n\n      this._onMediaChanges(change);\n    }\n  }\n\n  /**\n   * Has the key been specified in the HTML markup and thus is intended\n   * to participate in activation processes.\n   */\n  private _keyInUse(key): boolean {\n    return this._lookupKeyValue(key) !== undefined;\n  }\n\n  /**\n   *  Map input key associated with mediaQuery activation to closest defined input key\n   *  then return the values associated with the targeted input property\n   *\n   *  !! change events may arrive out-of-order (activate before deactivate)\n   *     so make sure the deactivate is used ONLY when the keys match\n   *     (since a different activate may be in use)\n   */\n  private _calculateActivatedValue(current: MediaChange): any {\n    const currentKey = this._options.baseKey + current.suffix;  // e.g. suffix == 'GtSm',\n    let newKey = this._activatedInputKey;                     // e.g. newKey == hideGtSm\n\n    newKey = current.matches ? currentKey : ((newKey == currentKey) ? '' : newKey);\n\n    this._activatedInputKey = this._validateInputKey(newKey);\n    return this.activatedInput;\n  }\n\n  /**\n   * For the specified input property key, validate it is defined (used in the markup)\n   * If not see if a overlapping mediaQuery-related input key fallback has been defined\n   *\n   * NOTE: scans in the order defined by activeOverLaps (largest viewport ranges -> smallest ranges)\n   */\n  private _validateInputKey(inputKey) {\n    let isMissingKey = (key) => !this._keyInUse(key);\n\n    if (isMissingKey(inputKey)) {\n      this.mediaMonitor.activeOverlaps.some(bp => {\n        let key = this._options.baseKey + bp.suffix;\n        if (!isMissingKey(key)) {\n          inputKey = key;\n          return true;  // exit .some()\n        }\n        return false;\n      });\n    }\n    return inputKey;\n  }\n\n  /**\n   * Get the value (if any) for the directive instances @Input property (aka key)\n   */\n  private _lookupKeyValue(key) {\n    return this._options.inputKeys[key];\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  ElementRef,\n  OnDestroy,\n  SimpleChanges,\n  OnChanges,\n  SimpleChange,\n} from '@angular/core';\n\nimport {buildLayoutCSS} from '../../utils/layout-validator';\nimport {\n  StyleDefinition,\n  StyleUtils,\n} from '../style-utils/style-utils';\n\nimport {ResponsiveActivation, KeyOptions} from '../responsive-activation/responsive-activation';\nimport {MediaMonitor} from '../media-monitor/media-monitor';\nimport {MediaQuerySubscriber} from '../media-change';\n\n/** Abstract base class for the Layout API styling directives. */\nexport abstract class BaseFxDirective implements OnDestroy, OnChanges {\n  get hasMediaQueryListener() {\n    return !!this._mqActivation;\n  }\n\n  /**\n   * Imperatively determine the current activated [input] value;\n   * if called before ngOnInit() this will return `undefined`\n   */\n  get activatedValue(): string | number {\n    return this._mqActivation ? this._mqActivation.activatedInput : undefined;\n  }\n\n  /**\n   * Change the currently activated input value and force-update\n   * the injected CSS (by-passing change detection).\n   *\n   * NOTE: Only the currently activated input value will be modified;\n   *       other input values will NOT be affected.\n   */\n  set activatedValue(value: string | number) {\n    let key = 'baseKey', previousVal;\n\n    if (this._mqActivation) {\n      key = this._mqActivation.activatedInputKey;\n      previousVal = this._inputMap[key];\n      this._inputMap[key] = value;\n    }\n    let change = new SimpleChange(previousVal, value, false);\n\n    this.ngOnChanges({[key]: change} as SimpleChanges);\n  }\n\n\n  /**\n   * Constructor\n   */\n  constructor(protected _mediaMonitor: MediaMonitor,\n              protected _elementRef: ElementRef,\n              protected _styler: StyleUtils) {\n  }\n\n  // *********************************************\n  // Accessor Methods\n  // *********************************************\n\n  /**\n   * Access to host element's parent DOM node\n   */\n  protected get parentElement(): any {\n    return this._elementRef.nativeElement.parentNode;\n  }\n\n  protected get nativeElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /**\n   * Access the current value (if any) of the @Input property.\n   */\n  protected _queryInput(key) {\n    return this._inputMap[key];\n  }\n\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * Use post-component-initialization event to perform extra\n   * querying such as computed Display style\n   */\n  ngOnInit() {\n    this._display = this._getDisplayStyle();\n    this._hasInitialized = true;\n  }\n\n  ngOnChanges(change: SimpleChanges) {\n    throw new Error(`BaseFxDirective::ngOnChanges should be overridden in subclass: ${change}`);\n  }\n\n  ngOnDestroy() {\n    if (this._mqActivation) {\n      this._mqActivation.destroy();\n    }\n    delete this._mediaMonitor;\n  }\n\n  // *********************************************\n  // Protected Methods\n  // *********************************************\n\n  /**\n   * Was the directive's default selector used ?\n   * If not, use the fallback value!\n   */\n  protected _getDefaultVal(key: string, fallbackVal: any): string | boolean {\n    let val = this._queryInput(key);\n    let hasDefaultVal = (val !== undefined && val !== null);\n    return (hasDefaultVal && val !== '') ? val : fallbackVal;\n  }\n\n  /**\n   * Quick accessor to the current HTMLElement's `display` style\n   * Note: this allows us to preserve the original style\n   * and optional restore it when the mediaQueries deactivate\n   */\n  protected _getDisplayStyle(source: HTMLElement = this.nativeElement): string {\n    const query = 'display';\n    return this._styler.lookupStyle(source, query);\n  }\n\n  /**\n   * Quick accessor to raw attribute value on the target DOM element\n   */\n  protected _getAttributeValue(attribute: string,\n                               source: HTMLElement = this.nativeElement): string {\n    return this._styler.lookupAttributeValue(source, attribute);\n  }\n\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction).\n   *\n   * Check inline style first then check computed (stylesheet) style.\n   * And optionally add the flow value to element's inline style.\n   */\n  protected _getFlowDirection(target: HTMLElement, addIfMissing = false): string {\n    let value = 'row';\n    let hasInlineValue = '';\n\n    if (target) {\n      [value, hasInlineValue] = this._styler.getFlowDirection(target);\n\n      if (!hasInlineValue && addIfMissing) {\n        const style = buildLayoutCSS(value);\n        const elements = [target];\n        this._styler.applyStyleToElements(style, elements);\n      }\n    }\n\n    return value.trim() || 'row';\n  }\n\n  /**\n   * Applies styles given via string pair or object map to the directive element.\n   */\n  protected _applyStyleToElement(style: StyleDefinition,\n                                 value?: string | number,\n                                 element: HTMLElement = this.nativeElement) {\n    this._styler.applyStyleToElement(element, style, value);\n  }\n\n  /**\n   * Applies styles given via string pair or object map to the directive's element.\n   */\n  protected _applyStyleToElements(style: StyleDefinition, elements: HTMLElement[]) {\n    this._styler.applyStyleToElements(style, elements);\n  }\n\n  /**\n   *  Save the property value; which may be a complex object.\n   *  Complex objects support property chains\n   */\n  protected _cacheInput(key?: string, source?: any) {\n    if (typeof source === 'object') {\n      for (let prop in source) {\n        this._inputMap[prop] = source[prop];\n      }\n    } else {\n      if (!!key) {\n        this._inputMap[key] = source;\n      }\n    }\n  }\n\n  /**\n   *  Build a ResponsiveActivation object used to manage subscriptions to mediaChange notifications\n   *  and intelligent lookup of the directive's property value that corresponds to that mediaQuery\n   *  (or closest match).\n   */\n  protected _listenForMediaQueryChanges(key: string,\n                                        defaultValue: any,\n                                        onMediaQueryChange: MediaQuerySubscriber): ResponsiveActivation { // tslint:disable-line:max-line-length\n    if (!this._mqActivation) {\n      let keyOptions = new KeyOptions(key, defaultValue, this._inputMap);\n      this._mqActivation = new ResponsiveActivation(\n          keyOptions,\n          this._mediaMonitor,\n          (change) => onMediaQueryChange(change)\n      );\n    }\n    return this._mqActivation;\n  }\n\n  /**\n   * Special accessor to query for all child 'element' nodes regardless of type, class, etc.\n   */\n  protected get childrenNodes() {\n    const obj = this.nativeElement.children;\n    const buffer: any[] = [];\n\n    // iterate backwards ensuring that length is an UInt32\n    for (let i = obj.length; i--; ) {\n      buffer[i] = obj[i];\n    }\n    return buffer;\n  }\n\n  /**\n   * Does this directive have 1 or more responsive keys defined\n   * Note: we exclude the 'baseKey' key (which is NOT considered responsive)\n   */\n  hasResponsiveAPI(baseKey: string) {\n    const totalKeys = Object.keys(this._inputMap).length;\n    const baseValue = this._inputMap[baseKey];\n    return (totalKeys - (!!baseValue ? 1 : 0)) > 0;\n  }\n\n\n  /**\n   * Fast validator for presence of attribute on the host element\n   */\n  protected hasKeyValue(key) {\n    return this._mqActivation.hasKeyValue(key);\n  }\n\n  protected get hasInitialized() {\n    return this._hasInitialized;\n  }\n\n  /** Original dom Elements CSS display style */\n  protected _display;\n\n  /**\n   * MediaQuery Activation Tracker\n   */\n  protected _mqActivation: ResponsiveActivation;\n\n  /**\n   *  Dictionary of input keys with associated values\n   */\n  protected _inputMap = {};\n\n  /**\n   * Has the `ngOnInit()` method fired\n   *\n   * Used to allow *ngFor tasks to finish and support queries like\n   * getComputedStyle() during ngOnInit().\n   */\n  protected _hasInitialized = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef} from '@angular/core';\n\nimport {BaseFxDirective} from './base';\nimport {ResponsiveActivation} from '../responsive-activation/responsive-activation';\nimport {MediaQuerySubscriber} from '../media-change';\nimport {MediaMonitor} from '../media-monitor/media-monitor';\nimport {StyleUtils} from '../style-utils/style-utils';\n\n\n/**\n * Adapter to the BaseFxDirective abstract class so it can be used via composition.\n * @see BaseFxDirective\n */\nexport class BaseFxDirectiveAdapter extends BaseFxDirective {\n\n  /**\n   * Accessor to determine which @Input property is \"active\"\n   * e.g. which property value will be used.\n   */\n  get activeKey() {\n    let mqa = this._mqActivation;\n    let key = mqa ? mqa.activatedInputKey : this._baseKey;\n    // Note: ClassDirective::SimpleChanges uses 'klazz' instead of 'class' as a key\n    return (key === 'class') ? 'klazz' : key;\n  }\n\n  /** Hash map of all @Input keys/values defined/used */\n  get inputMap() {\n    return this._inputMap;\n  }\n\n  /**\n   * @see BaseFxDirective._mqActivation\n   */\n  get mqActivation(): ResponsiveActivation {\n    return this._mqActivation;\n  }\n\n  /**\n   * BaseFxDirectiveAdapter constructor\n   */\n  constructor(protected _baseKey: string,   // non-responsive @Input property name\n              protected _mediaMonitor: MediaMonitor,\n              protected _elementRef: ElementRef,\n              protected _styler: StyleUtils) {\n    super(_mediaMonitor, _elementRef, _styler);\n  }\n\n  /**\n    * Does this directive have 1 or more responsive keys defined\n    * Note: we exclude the 'baseKey' key (which is NOT considered responsive)\n    */\n  hasResponsiveAPI() {\n   return super.hasResponsiveAPI(this._baseKey);\n  }\n\n  /**\n   * @see BaseFxDirective._queryInput\n   */\n  queryInput(key) {\n    return key ? this._queryInput(key) : undefined;\n  }\n\n  /**\n   *  Save the property value.\n   */\n  cacheInput(key?: string, source?: any, cacheRaw = false) {\n    if (cacheRaw) {\n      this._cacheInputRaw(key, source);\n    } else if (Array.isArray(source)) {\n      this._cacheInputArray(key, source);\n    } else if (typeof source === 'object') {\n      this._cacheInputObject(key, source);\n    } else if (typeof source === 'string') {\n      this._cacheInputString(key, source);\n    } else {\n      throw new Error(\n        `Invalid class value '${key}' provided. Did you want to cache the raw value?`\n      );\n    }\n  }\n\n  /**\n   * @see BaseFxDirective._listenForMediaQueryChanges\n   */\n  listenForMediaQueryChanges(key: string,\n                             defaultValue: any,\n                             onMediaQueryChange: MediaQuerySubscriber): ResponsiveActivation {\n    return this._listenForMediaQueryChanges(key, defaultValue, onMediaQueryChange);\n  }\n\n  // ************************************************************\n  // Protected Methods\n  // ************************************************************\n\n  /**\n   * No implicit transforms of the source.\n   * Required when caching values expected later for KeyValueDiffers\n   */\n  protected _cacheInputRaw(key?: string, source?: any) {\n    if (key) {\n      this._inputMap[key] = source;\n    }\n  }\n\n  /**\n   *  Save the property value for Array values.\n   */\n  protected _cacheInputArray(key = '', source?: boolean[]) {\n    this._inputMap[key] = source ? source.join(' ') : '';\n  }\n\n  /**\n   *  Save the property value for key/value pair values.\n   */\n  protected _cacheInputObject(key = '', source?: { [key: string]: boolean }) {\n    let classes: string[] = [];\n    if (source) {\n      for (let prop in source) {\n        if (!!source[prop]) {\n          classes.push(prop);\n        }\n      }\n    }\n    this._inputMap[key] = classes.join(' ');\n  }\n\n  /**\n   *  Save the property value for string values.\n   */\n  protected _cacheInputString(key = '', source?: string) {\n    this._inputMap[key] = source;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, NgZone, PLATFORM_ID} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\nimport {MatchMedia} from '../match-media';\nimport {BreakPointRegistry} from '../../breakpoints/break-point-registry';\n\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\n@Injectable()\nexport class MockMatchMedia extends MatchMedia {\n\n  /** Special flag used to test BreakPoint registrations with MatchMedia */\n  autoRegisterQueries = true;\n\n  /**\n   * Allow fallback to overlapping mediaQueries to determine\n   * activatedInput(s).\n   */\n  useOverlaps = false;\n\n  constructor(_zone: NgZone,\n              @Inject(PLATFORM_ID) _platformId: Object,\n              @Inject(DOCUMENT) _document: any,\n              private _breakpoints: BreakPointRegistry) {\n    super(_zone, _platformId, _document);\n    this._actives = [];\n  }\n\n  /** Easy method to clear all listeners for all mediaQueries */\n  clearAll() {\n    this._registry.forEach((mql: MockMediaQueryList, _) => {\n      mql.destroy();\n    });\n    this._registry.clear();\n    this.useOverlaps = false;\n  }\n\n  /** Feature to support manual, simulated activation of a mediaQuery. */\n  activate(mediaQuery: string, useOverlaps = false): boolean {\n    useOverlaps = useOverlaps || this.useOverlaps;\n    mediaQuery = this._validateQuery(mediaQuery);\n\n    if (useOverlaps || !this.isActive(mediaQuery)) {\n      this._deactivateAll();\n\n      this._registerMediaQuery(mediaQuery);\n      this._activateWithOverlaps(mediaQuery, useOverlaps);\n    }\n\n    return this.hasActivated;\n  }\n\n  /** Converts an optional mediaQuery alias to a specific, valid mediaQuery */\n  _validateQuery(queryOrAlias) {\n    let bp = this._breakpoints.findByAlias(queryOrAlias);\n    if (bp) {\n      queryOrAlias = bp.mediaQuery;\n    }\n    return queryOrAlias;\n  }\n\n  /**\n   * Manually activate any overlapping mediaQueries to simulate\n   * similar functionality in the window.matchMedia()\n   */\n  private _activateWithOverlaps(mediaQuery: string, useOverlaps: boolean): boolean {\n    if (useOverlaps) {\n      let bp = this._breakpoints.findByQuery(mediaQuery);\n      let alias = bp ? bp.alias : 'unknown';\n\n      // Simulate activation of overlapping lt-<XXX> ranges\n      switch (alias) {\n        case 'lg'   :\n          this._activateByAlias('lt-xl');\n          break;\n        case 'md'   :\n          this._activateByAlias('lt-xl, lt-lg');\n          break;\n        case 'sm'   :\n          this._activateByAlias('lt-xl, lt-lg, lt-md');\n          break;\n        case 'xs'   :\n          this._activateByAlias('lt-xl, lt-lg, lt-md, lt-sm');\n          break;\n      }\n\n      // Simulate activate of overlapping gt-<xxxx> mediaQuery ranges\n      switch (alias) {\n        case 'xl'   :\n          this._activateByAlias('gt-lg, gt-md, gt-sm, gt-xs');\n          break;\n        case 'lg'   :\n          this._activateByAlias('gt-md, gt-sm, gt-xs');\n          break;\n        case 'md'   :\n          this._activateByAlias('gt-sm, gt-xs');\n          break;\n        case 'sm'   :\n          this._activateByAlias('gt-xs');\n          break;\n      }\n    }\n    // Activate last since the responsiveActivation is watching *this* mediaQuery\n    return this._activateByQuery(mediaQuery);\n  }\n\n  /**\n   *\n   */\n  private _activateByAlias(aliases) {\n    let activate = (alias) => {\n      let bp = this._breakpoints.findByAlias(alias);\n      this._activateByQuery(bp ? bp.mediaQuery : alias);\n    };\n    aliases.split(',').forEach(alias => activate(alias.trim()));\n  }\n\n  /**\n   *\n   */\n  private _activateByQuery(mediaQuery) {\n    let mql = <MockMediaQueryList> this._registry.get(mediaQuery);\n    let alreadyAdded = this._actives.reduce((found, it) => {\n      return found || (mql && (it.media === mql.media));\n    }, false);\n\n    if (mql && !alreadyAdded) {\n      this._actives.push(mql.activate());\n    }\n    return this.hasActivated;\n  }\n\n  /** Deactivate all current Mock MQLs */\n  private _deactivateAll() {\n    if (this._actives.length) {\n      // Deactivate all current MQLs and reset the buffer\n      for (const it of this._actives) {\n        it.deactivate();\n      }\n      this._actives = [];\n    }\n    return this;\n  }\n\n  /** Insure the mediaQuery is registered with MatchMedia */\n  private _registerMediaQuery(mediaQuery) {\n    if (!this._registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this.registerQuery(mediaQuery);\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected _buildMQL(query: string): MediaQueryList {\n    return new MockMediaQueryList(query);\n  }\n\n  protected get hasActivated() {\n    return (this._actives.length > 0);\n  }\n\n  private _actives: MockMediaQueryList[] = [];\n}\n\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nexport class MockMediaQueryList implements MediaQueryList {\n  private _isActive = false;\n  private _listeners: MediaQueryListListener[] = [];\n\n  get matches(): boolean {\n    return this._isActive;\n  }\n\n  get media(): string {\n    return this._mediaQuery;\n  }\n\n  constructor(private _mediaQuery: string) {}\n\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n\n  /** Notify all listeners that 'matches === TRUE' */\n  activate(): MockMediaQueryList {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach((callback) => {\n        callback(this);\n      });\n    }\n    return this;\n  }\n\n  /** Notify all listeners that 'matches === false' */\n  deactivate(): MockMediaQueryList {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach((callback) => {\n        callback(this);\n      });\n    }\n    return this;\n  }\n\n  /** Add a listener to our internal list to activate later */\n  addListener(listener: MediaQueryListListener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      listener(this);\n    }\n  }\n\n  /** Don't need to remove listeners in the testing environment */\n  removeListener(_: MediaQueryListListener) {\n  }\n}\n\n/**\n * Pre-configured provider for MockMatchMedia\n */\nexport const MockMatchMediaProvider = {  // tslint:disable-line:variable-name\n  provide: MatchMedia,\n  useClass: MockMatchMedia\n};\n\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone, PLATFORM_ID} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\n\nimport {BreakPoint} from '../breakpoints/break-point';\nimport {MatchMedia} from './match-media';\nimport {MediaChange} from '../media-change';\n\n/**\n * Special server-only class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nexport class ServerMediaQueryList implements MediaQueryList {\n  private _isActive = false;\n  private _listeners: MediaQueryListListener[] = [];\n\n  get matches(): boolean {\n    return this._isActive;\n  }\n\n  get media(): string {\n    return this._mediaQuery;\n  }\n\n  constructor(private _mediaQuery: string) {}\n\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n\n  /** Notify all listeners that 'matches === TRUE' */\n  activate(): ServerMediaQueryList {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach((callback) => {\n        callback(this);\n      });\n    }\n    return this;\n  }\n\n  /** Notify all listeners that 'matches === false' */\n  deactivate(): ServerMediaQueryList {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach((callback) => {\n        callback(this);\n      });\n    }\n    return this;\n  }\n\n  /** Add a listener to our internal list to activate later */\n  addListener(listener: MediaQueryListListener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      listener(this);\n    }\n  }\n\n  /** Don't need to remove listeners in the server environment */\n  removeListener(_: MediaQueryListListener) {\n  }\n}\n\n/**\n * Special server-only implementation of MatchMedia that uses the above\n * ServerMediaQueryList as its internal representation\n *\n * Also contains methods to activate and deactivate breakpoints\n */\n@Injectable()\nexport class ServerMatchMedia extends MatchMedia {\n  protected _registry: Map<string, ServerMediaQueryList>;\n  protected _source: BehaviorSubject<MediaChange>;\n  protected _observable$: Observable<MediaChange>;\n\n  constructor(protected _zone: NgZone,\n              @Inject(PLATFORM_ID) protected _platformId: Object,\n              @Inject(DOCUMENT) protected _document: any) {\n    super(_zone, _platformId, _document);\n    this._registry = new Map<string, ServerMediaQueryList>();\n    this._source = new BehaviorSubject<MediaChange>(new MediaChange(true));\n    this._observable$ = this._source.asObservable();\n  }\n\n  /** Activate the specified breakpoint if we're on the server, no-op otherwise */\n  activateBreakpoint(bp: BreakPoint) {\n    const lookupBreakpoint = this._registry.get(bp.mediaQuery);\n    if (lookupBreakpoint) {\n      lookupBreakpoint.activate();\n    }\n  }\n\n  /** Deactivate the specified breakpoint if we're on the server, no-op otherwise */\n  deactivateBreakpoint(bp: BreakPoint) {\n    const lookupBreakpoint = this._registry.get(bp.mediaQuery);\n    if (lookupBreakpoint) {\n      lookupBreakpoint.deactivate();\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected _buildMQL(query: string): ServerMediaQueryList {\n    return new ServerMediaQueryList(query);\n  }\n}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","removeStyles","_document","platformId","isPlatformBrowser","classRegex_1","Array","from","querySelectorAll","CLASS_NAME","forEach","el","classList","contains","parentNode","removeChild","className","replace","normalizeQuery","mediaQuery","unique","list","seen","filter","item","hasOwnProperty","extendObject","dest","sources","_i","arguments","length","TypeError","_a","sources_1","source","key","mergeAlias","mqAlias","alias","suffix","OBSERVABLE_MEDIA_PROVIDER_FACTORY","parentService","matchMedia","breakpoints","MediaService","firstUpperCase","part","first","charAt","remainder","slice","toUpperCase","camelCase","name","ALIAS_DELIMITERS","split","map","join","validateSuffixes","bp","overlapping","mergeByAlias","defaults","custom","merged","findByAlias","reduce","result","target","push","buildMergedBreakPoints","_custom","options","orientation","orientations","ORIENTATION_BREAKPOINTS","concat","DEFAULT_BREAKPOINTS","DEFAULT_BREAKPOINTS_PROVIDER_FACTORY","CUSTOM_BREAKPOINTS_PROVIDER_FACTORY","provide","useFactory","MATCH_MEDIA_PROVIDER_FACTORY","parentMedia","ngZone","MatchMedia","applyCssPrefixes","value","isNaN","STYLESHEET_MAP_PROVIDER_FACTORY","parentSheet","StylesheetMap","buildLayoutCSS","validateValue","buildCSS","toLowerCase","direction","wrap","inline","LAYOUT_VALUES","find","x","INLINE","validateWrapValue","display","box-sizing","flex-direction","flex-wrap","MEDIA_MONITOR_PROVIDER_FACTORY","parentMonitor","MediaMonitor","setPrototypeOf","__proto__","p","BROWSER_PROVIDER","APP_BOOTSTRAP_LISTENER","deps","DOCUMENT","PLATFORM_ID","multi","BREAKPOINTS","InjectionToken","BreakPointRegistry","_registry","defineProperty","overlaps","it","nonOverlaps","findByQuery","query","type","Injectable","decorators","Inject","args","MediaChange","matches","clone","_zone","_platformId","Map","_source","BehaviorSubject","_observable$","asObservable","isActive","mql","get","observe","registerQuery","pipe","change","_this","_prepareQueryCSS","onMQLEvent","e","run","next","_buildMQL","addListener","set","media","removeListener","mediaQueries","ALL_STYLES","styleEl_1","createElement","setAttribute","cssText","appendChild","createTextNode","head","mq","console","error","NgZone","undefined","_breakpoints","_matchMedia","_registerBreakpoints","items","overlappings","reverse","found","hasAlias","queries","sortedItems","ObservableMedia","mediaWatcher","filterOverlaps","_registerBreakPoints","observable$","_buildObservable","_toMediaQuery","subscribe","complete","self","media$","activationsOnly","addAliasInformation","_findByQuery","excludeOverlaps","_findByAlias","OBSERVABLE_MEDIA_PROVIDER","Optional","SkipSelf","RESPONSIVE_ALIASES","TABLET_LANDSCAPE","TABLET_PORTRAIT","WEB_PORTRAIT","WEB_LANDSCAPE","ScreenTypes","HANDSET","HANDSET_PORTRAIT","TABLET","WEB","HANDSET_LANDSCAPE","DEFAULT_BREAKPOINTS_PROVIDER","MATCH_MEDIA_PROVIDER","stylesheet","addStyleToElement","element","style","clearStyles","clear","getStyleForElement","styleName","styles","SERVER_TOKEN","StyleUtils","_serverStylesheet","_serverModuleLoaded","applyStyleToElement","_applyMultiValueStyleToElement","applyStyleToElements","elements","getFlowDirection","lookupStyle","FALLBACK_STYLE","hasInlineValue","lookupInlineStyle","isPlatformServer","lookupAttributeValue","attribute","getAttribute","getPropertyValue","inlineOnly","getComputedStyle","trim","keys","sort","values","isArray","values_1","setProperty","STYLESHEET_MAP_PROVIDER","NgModule","providers","CoreModule","imports","exports","MediaQueriesModule","KeyOptions","baseKey","defaultValue","inputKeys","ResponsiveActivation","_options","_mediaMonitor","_onMediaChanges","_subscribers","_registryMap","_buildRegistryMap","_configureChangeObservers","_activatedInputKey","activatedInputKey","hasKeyValue","_lookupKeyValue","destroy","link","unsubscribe","subscriptions","_keyInUse","buildChanges","property","mediaMonitor","_onMonitorEvents","_calculateActivatedValue","current","currentKey","newKey","_validateInputKey","activatedInput","inputKey","isMissingKey","activeOverlaps","some","BaseFxDirective","_elementRef","_styler","_inputMap","_hasInitialized","_mqActivation","previousVal","SimpleChange","ngOnChanges","nativeElement","_queryInput","ngOnInit","_display","_getDisplayStyle","Error","ngOnDestroy","_getDefaultVal","fallbackVal","val","_getAttributeValue","_getFlowDirection","addIfMissing","_applyStyleToElement","_applyStyleToElements","_cacheInput","prop","_listenForMediaQueryChanges","onMediaQueryChange","keyOptions","obj","children","buffer","i","hasResponsiveAPI","BaseFxDirectiveAdapter","_super","_baseKey","call","tslib_1.__extends","mqa","queryInput","cacheInput","cacheRaw","_cacheInputRaw","_cacheInputArray","_cacheInputObject","_cacheInputString","listenForMediaQueryChanges","classes","MockMatchMedia","autoRegisterQueries","useOverlaps","_actives","clearAll","_","activate","_validateQuery","_deactivateAll","_registerMediaQuery","_activateWithOverlaps","hasActivated","queryOrAlias","_activateByAlias","_activateByQuery","aliases","alreadyAdded","deactivate","has","MockMediaQueryList","_mediaQuery","_isActive","_listeners","callback","listener","indexOf","MockMatchMediaProvider","useClass","ServerMediaQueryList","ServerMatchMedia","activateBreakpoint","lookupBreakpoint","deactivateBreakpoint","MEDIA_MONITOR_PROVIDER"],"mappings":"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"}