{"version":3,"file":"flex-layout-core.umd.min.js","sources":["../../src/lib/core/media-marshaller/media-marshaller.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/browser-provider.ts","../../src/lib/core/add-alias.ts","../../src/lib/utils/layout-validator.ts","../../src/lib/utils/object-extend.ts","../../src/lib/core/breakpoints/breakpoint-tools.ts","../../src/lib/core/utils/sort.ts","../../src/lib/core/match-media/match-media.ts","../../src/lib/core/media-marshaller/print-hook.ts","../../src/lib/core/media-observer/media-observer.ts","../../src/lib/utils/auto-prefixer.ts","../../src/lib/core/basis-validator/basis-validator.ts","../../src/lib/core/module.ts","../../src/lib/core/media-change.ts","../../src/lib/core/stylesheet-map/stylesheet-map.ts","../../src/lib/core/tokens/library-config.ts","../../src/lib/core/tokens/server-token.ts","../../src/lib/core/tokens/breakpoint-token.ts","../../src/lib/core/base/base2.ts","../../src/lib/core/breakpoints/data/break-points.ts","../../src/lib/core/breakpoints/data/orientation-break-points.ts","../../src/lib/core/breakpoints/break-points-token.ts","../../src/lib/core/breakpoints/break-point-registry.ts","../../src/lib/core/match-media/mock/mock-match-media.ts","../../src/lib/core/match-media/server-match-media.ts","../../src/lib/core/media-trigger/media-trigger.ts","../../src/lib/core/style-utils/style-utils.ts","../../src/lib/core/style-builder/style-builder.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\n\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {filter, tap} from 'rxjs/operators';\n\nimport {BreakPoint} from '../breakpoints/break-point';\nimport {sortDescendingPriority} from '../utils/sort';\nimport {BreakPointRegistry} from '../breakpoints/break-point-registry';\nimport {MatchMedia} from '../match-media/match-media';\nimport {MediaChange} from '../media-change';\n\nimport {PrintHook, HookTarget} from './print-hook';\nimport {mergeAlias} from '../add-alias';\n\ntype ClearCallback = () => void;\ntype UpdateCallback = (val: any) => void;\ntype Builder = UpdateCallback | ClearCallback;\n\ntype ValueMap = Map<string, string>;\ntype BreakpointMap = Map<string, ValueMap>;\ntype ElementMap = Map<HTMLElement, BreakpointMap>;\ntype ElementKeyMap = WeakMap<HTMLElement, Set<string>>;\ntype SubscriptionMap = Map<string, Subscription>;\ntype WatcherMap = WeakMap<HTMLElement, SubscriptionMap>;\ntype BuilderMap = WeakMap<HTMLElement, Map<string, Builder>>;\n\nexport interface ElementMatcher {\n  element: HTMLElement;\n  key: string;\n  value: any;\n}\n\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\n@Injectable({providedIn: 'root'})\nexport class MediaMarshaller {\n  private activatedBreakpoints: BreakPoint[] = [];\n  private elementMap: ElementMap = new Map();\n  private elementKeyMap: ElementKeyMap = new WeakMap();\n  private watcherMap: WatcherMap = new WeakMap();     // special triggers to update elements\n  private updateMap: BuilderMap = new WeakMap();      // callback functions to update styles\n  private clearMap: BuilderMap = new WeakMap();       // callback functions to clear styles\n\n  private subject: Subject<ElementMatcher> = new Subject();\n\n  get activatedAlias(): string {\n    return this.activatedBreakpoints[0] ? this.activatedBreakpoints[0].alias : '';\n  }\n\n  constructor(protected matchMedia: MatchMedia,\n              protected breakpoints: BreakPointRegistry,\n              protected hook: PrintHook) {\n    this.observeActivations();\n  }\n\n  /**\n   * Update styles on breakpoint activates or deactivates\n   * @param mc\n   */\n  onMediaChange(mc: MediaChange) {\n    const bp: BreakPoint | null = this.findByQuery(mc.mediaQuery);\n    if (bp) {\n      mc = mergeAlias(mc, bp);\n\n      if (mc.matches && this.activatedBreakpoints.indexOf(bp) === -1) {\n        this.activatedBreakpoints.push(bp);\n        this.activatedBreakpoints.sort(sortDescendingPriority);\n\n        this.updateStyles();\n\n      } else if (!mc.matches && this.activatedBreakpoints.indexOf(bp) !== -1) {\n        // Remove the breakpoint when it's deactivated\n        this.activatedBreakpoints.splice(this.activatedBreakpoints.indexOf(bp), 1);\n        this.activatedBreakpoints.sort(sortDescendingPriority);\n\n        this.updateStyles();\n      }\n    }\n  }\n\n  /**\n   * initialize the marshaller with necessary elements for delegation on an element\n   * @param element\n   * @param key\n   * @param updateFn optional callback so that custom bp directives don't have to re-provide this\n   * @param clearFn optional callback so that custom bp directives don't have to re-provide this\n   * @param extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n   */\n  init(element: HTMLElement,\n       key: string,\n       updateFn?: UpdateCallback,\n       clearFn?: ClearCallback,\n       extraTriggers: Observable<any>[] = []): void {\n\n    initBuilderMap(this.updateMap, element, key, updateFn);\n    initBuilderMap(this.clearMap, element, key, clearFn);\n\n    this.buildElementKeyMap(element, key);\n    this.watchExtraTriggers(element, key, extraTriggers);\n  }\n\n  /**\n   * get the value for an element and key and optionally a given breakpoint\n   * @param element\n   * @param key\n   * @param bp\n   */\n  getValue(element: HTMLElement, key: string, bp?: string): any {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n      if (values) {\n        return values.get(key);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * whether the element has values for a given key\n   * @param element\n   * @param key\n   */\n  hasValue(element: HTMLElement, key: string): boolean {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const values = this.getActivatedValues(bpMap, key);\n      if (values) {\n        return values.get(key) !== undefined || false;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set the value for an input on a directive\n   * @param element the element in question\n   * @param key the type of the directive (e.g. flex, layout-gap, etc)\n   * @param bp the breakpoint suffix (empty string = default)\n   * @param val the value for the breakpoint\n   */\n  setValue(element: HTMLElement, key: string, val: any, bp: string): void {\n    let bpMap: BreakpointMap | undefined = this.elementMap.get(element);\n    if (!bpMap) {\n      bpMap = new Map().set(bp, new Map().set(key, val));\n      this.elementMap.set(element, bpMap);\n    } else {\n      const values = (bpMap.get(bp) || new Map()).set(key, val);\n      bpMap.set(bp, values);\n      this.elementMap.set(element, bpMap);\n    }\n    const value = this.getValue(element, key);\n    if (value !== undefined) {\n      this.updateElement(element, key, value);\n    }\n  }\n\n  /** Track element value changes for a specific key */\n  trackValue(element: HTMLElement, key: string): Observable<ElementMatcher> {\n    return this.subject\n        .asObservable()\n        .pipe(filter(v => v.element === element && v.key === key));\n  }\n\n  /** update all styles for all elements on the current breakpoint */\n  updateStyles(): void {\n    this.elementMap.forEach((bpMap, el) => {\n      const keyMap = new Set(this.elementKeyMap.get(el)!);\n      let valueMap = this.getActivatedValues(bpMap);\n\n      if (valueMap) {\n        valueMap.forEach((v, k) => {\n          this.updateElement(el, k, v);\n          keyMap.delete(k);\n        });\n      }\n\n      keyMap.forEach(k => {\n        valueMap = this.getActivatedValues(bpMap, k);\n        if (valueMap) {\n          const value = valueMap.get(k);\n          this.updateElement(el, k, value);\n        } else {\n          this.clearElement(el, k);\n        }\n      });\n\n    });\n  }\n\n  /**\n   * clear the styles for a given element\n   * @param element\n   * @param key\n   */\n  clearElement(element: HTMLElement, key: string): void {\n    const builders = this.clearMap.get(element);\n    if (builders) {\n      const clearFn: ClearCallback = builders.get(key) as ClearCallback;\n      if (!!clearFn) {\n        clearFn();\n        this.subject.next({element, key, value: ''});\n      }\n    }\n  }\n\n  /**\n   * update a given element with the activated values for a given key\n   * @param element\n   * @param key\n   * @param value\n   */\n  updateElement(element: HTMLElement, key: string, value: any): void {\n    const builders = this.updateMap.get(element);\n    if (builders) {\n      const updateFn: UpdateCallback = builders.get(key) as UpdateCallback;\n      if (!!updateFn) {\n        updateFn(value);\n        this.subject.next({element, key, value});\n      }\n    }\n  }\n\n  /**\n   * release all references to a given element\n   * @param element\n   */\n  releaseElement(element: HTMLElement): void {\n    const watcherMap = this.watcherMap.get(element);\n    if (watcherMap) {\n      watcherMap.forEach(s => s.unsubscribe());\n      this.watcherMap.delete(element);\n    }\n    const elementMap = this.elementMap.get(element);\n    if (elementMap) {\n      elementMap.forEach((_, s) => elementMap.delete(s));\n      this.elementMap.delete(element);\n    }\n  }\n\n  /**\n   * trigger an update for a given element and key (e.g. layout)\n   * @param element\n   * @param key\n   */\n  triggerUpdate(element: HTMLElement, key?: string): void {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const valueMap = this.getActivatedValues(bpMap, key);\n      if (valueMap) {\n        if (key) {\n          this.updateElement(element, key, valueMap.get(key));\n        } else {\n          valueMap.forEach((v, k) => this.updateElement(element, k, v));\n        }\n      }\n    }\n  }\n\n  /** Cross-reference for HTMLElement with directive key */\n  private buildElementKeyMap(element: HTMLElement, key: string) {\n    let keyMap = this.elementKeyMap.get(element);\n    if (!keyMap) {\n      keyMap = new Set();\n      this.elementKeyMap.set(element, keyMap);\n    }\n    keyMap.add(key);\n  }\n\n  /**\n   * Other triggers that should force style updates:\n   * - directionality\n   * - layout changes\n   * - mutationobserver updates\n   */\n  private watchExtraTriggers(element: HTMLElement,\n                             key: string,\n                             triggers: Observable<any>[]) {\n    if (triggers && triggers.length) {\n      let watchers = this.watcherMap.get(element);\n      if (!watchers) {\n        watchers = new Map();\n        this.watcherMap.set(element, watchers);\n      }\n      const subscription = watchers.get(key);\n      if (!subscription) {\n        const newSubscription = merge(...triggers).subscribe(() => {\n          const currentValue = this.getValue(element, key);\n          this.updateElement(element, key, currentValue);\n        });\n        watchers.set(key, newSubscription);\n      }\n    }\n  }\n\n  /** Breakpoint locator by mediaQuery */\n  private findByQuery(query: string) {\n    return this.breakpoints.findByQuery(query);\n  }\n\n  /**\n   * get the fallback breakpoint for a given element, starting with the current breakpoint\n   * @param bpMap\n   * @param key\n   */\n  private getActivatedValues(bpMap: BreakpointMap, key?: string): ValueMap | undefined {\n    for (let i = 0; i < this.activatedBreakpoints.length; i++) {\n      const activatedBp = this.activatedBreakpoints[i];\n      const valueMap = bpMap.get(activatedBp.alias);\n      if (valueMap) {\n        if (key === undefined || valueMap.has(key)) {\n          return valueMap;\n        }\n      }\n    }\n    const lastHope = bpMap.get('');\n    return (key === undefined || lastHope && lastHope.has(key)) ? lastHope : undefined;\n  }\n\n  /**\n   * Watch for mediaQuery breakpoint activations\n   */\n  private observeActivations() {\n    const target = this as unknown as HookTarget;\n    const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n\n    this.matchMedia\n        .observe(this.hook.withPrintQuery(queries))\n        .pipe(\n            tap(this.hook.interceptEvents(target)),\n            filter(this.hook.blockPropagation())\n        )\n        .subscribe(this.onMediaChange.bind(this));\n  }\n\n}\n\nfunction initBuilderMap(map: BuilderMap,\n                        element: HTMLElement,\n                        key: string,\n                        input?: UpdateCallback | ClearCallback): void {\n  if (input !== undefined) {\n    let oldMap = map.get(element);\n    if (!oldMap) {\n      oldMap = new Map();\n      map.set(element, oldMap);\n    }\n    oldMap.set(key, input);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {APP_BOOTSTRAP_LISTENER, PLATFORM_ID, InjectionToken} from '@angular/core';\nimport {DOCUMENT, isPlatformBrowser} from '@angular/common';\n\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n */\nexport function removeStyles(_document: Document, platformId: Object) {\n  return () => {\n    if (isPlatformBrowser(platformId)) {\n      const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n\n      // RegExp constructor should only be used if passing a variable to the constructor.\n      // When using static regular expression it is more performant to use reg exp literal.\n      // This is also needed to provide Safari 9 compatibility, please see\n      // https://stackoverflow.com/questions/37919802 for more discussion.\n      const classRegex = /\\bflex-layout-.+?\\b/g;\n      elements.forEach(el => {\n        el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ?\n          el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n      });\n    }\n  };\n}\n\n/**\n *  Provider to remove SSR styles on the browser\n */\nexport const BROWSER_PROVIDER = {\n  provide: <InjectionToken<(() => void)[]>>APP_BOOTSTRAP_LISTENER,\n  useFactory: removeStyles,\n  deps: [DOCUMENT, PLATFORM_ID],\n  multi: true\n};\n\nexport const CLASS_NAME = 'flex-layout-';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {MediaChange} from './media-change';\nimport {BreakPoint} from './breakpoints/break-point';\n\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n */\nexport function mergeAlias(dest: MediaChange, source: BreakPoint | null): MediaChange {\n  dest = dest ? dest.clone() : new MediaChange();\n  if (source) {\n    dest.mqAlias = source.alias;\n    dest.mediaQuery = source.mediaQuery;\n    dest.suffix = source.suffix as string;\n    dest.priority = source.priority as number;\n  }\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport const INLINE = 'inline';\nexport const LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n */\nexport function buildLayoutCSS(value: string) {\n  let [direction, wrap, isInline] = validateValue(value);\n  return buildCSS(direction, wrap, isInline);\n }\n\n/**\n  * Validate the value to be one of the acceptable value options\n  * Use default fallback of 'row'\n  */\nexport function validateValue(value: string): [string, string, boolean] {\n  value = value ? value.toLowerCase() : '';\n  let [direction, wrap, inline] = value.split(' ');\n\n  // First value must be the `flex-direction`\n  if (!LAYOUT_VALUES.find(x => x === direction)) {\n    direction = LAYOUT_VALUES[0];\n  }\n\n  if (wrap === INLINE) {\n    wrap = (inline !== INLINE) ? inline : '';\n    inline = INLINE;\n  }\n\n  return [direction, validateWrapValue(wrap), !!inline];\n}\n\n/**\n * Determine if the validated, flex-direction value specifies\n * a horizontal/row flow.\n */\nexport function isFlowHorizontal(value: string): boolean {\n  let [flow, ] = validateValue(value);\n  return flow.indexOf('row') > -1;\n}\n\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n */\nexport function validateWrapValue(value: string) {\n  if (!!value) {\n    switch (value.toLowerCase()) {\n      case 'reverse':\n      case 'wrap-reverse':\n      case 'reverse-wrap':\n        value = 'wrap-reverse';\n        break;\n\n      case 'no':\n      case 'none':\n      case 'nowrap':\n        value = 'nowrap';\n        break;\n\n      // All other values fallback to 'wrap'\n      default:\n        value = 'wrap';\n        break;\n    }\n  }\n  return value;\n}\n\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n */\nfunction buildCSS(direction: string, wrap: string | null = null, inline = false) {\n  return {\n    'display': inline ? 'inline-flex' : 'flex',\n    'box-sizing': 'border-box',\n    'flex-direction': direction,\n    'flex-wrap': !!wrap ? wrap : null\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param dest The object which will have properties copied to it.\n * @param sources The source objects from which properties will be copied.\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let source of sources) {\n    if (source != null) {\n      for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {BreakPoint} from './break-point';\nimport {extendObject} from '../../utils/object-extend';\n\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\nfunction firstUpperCase(part: string) {\n  let first = part.length > 0 ? part.charAt(0) : '';\n  let remainder = (part.length > 1) ? part.slice(1) : '';\n  return first.toUpperCase() + remainder;\n}\n\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\nfunction camelCase(name: string): string {\n  return name\n      .replace(ALIAS_DELIMITERS, '|')\n      .split('|')\n      .map(firstUpperCase)\n      .join('');\n}\n\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\nexport function validateSuffixes(list: BreakPoint[]): BreakPoint[] {\n  list.forEach((bp: BreakPoint) => {\n    if (!bp.suffix) {\n      bp.suffix = camelCase(bp.alias);   // create Suffix value based on alias\n      bp.overlapping = !!bp.overlapping; // ensure default value\n    }\n  });\n  return list;\n}\n\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\nexport function mergeByAlias(defaults: BreakPoint[], custom: BreakPoint[] = []): BreakPoint[] {\n  const dict: {[key: string]: BreakPoint} = {};\n  defaults.forEach(bp => {\n    dict[bp.alias] = bp;\n  });\n  // Merge custom breakpoints\n  custom.forEach((bp: BreakPoint) => {\n    if (dict[bp.alias]) {\n      extendObject(dict[bp.alias], bp);\n    } else {\n      dict[bp.alias] = bp;\n    }\n  });\n\n  return validateSuffixes(Object.keys(dict).map(k => dict[k]));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface WithPriority {\n  priority?: number;\n}\n\n/** HOF to sort the breakpoints by descending priority */\nexport function sortDescendingPriority<T extends WithPriority>(a: T | null, b: T | null): number {\n  const priorityA = a ? a.priority || 0 : 0;\n  const priorityB = b ? b.priority || 0 : 0;\n  return priorityB - priorityA;\n}\n\n/** HOF to sort the breakpoints by ascending priority */\nexport function sortAscendingPriority<T extends WithPriority>(a: T, b: T): number {\n  const pA = a.priority || 0;\n  const pB = b.priority || 0;\n  return pA - pB;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, NgZone, PLATFORM_ID} from '@angular/core';\nimport {DOCUMENT, isPlatformBrowser} from '@angular/common';\nimport {BehaviorSubject, Observable, merge, Observer} from 'rxjs';\nimport {filter} from 'rxjs/operators';\n\nimport {MediaChange} from '../media-change';\n\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\n@Injectable({providedIn: 'root'})\nexport class MatchMedia {\n  /** Initialize with 'all' so all non-responsive APIs trigger style updates */\n  protected _source = new BehaviorSubject<MediaChange>(new MediaChange(true));\n\n  protected _registry = new Map<string, MediaQueryList>();\n  protected _observable$ = this._source.asObservable();\n\n  constructor(protected _zone: NgZone,\n              @Inject(PLATFORM_ID) protected _platformId: Object,\n              @Inject(DOCUMENT) protected _document: any) {\n  }\n\n  /**\n   * Publish list of all current activations\n   */\n  get activations(): string[] {\n    const results: string[] = [];\n    this._registry.forEach((mql: MediaQueryList, key: string) => {\n      if (mql.matches) {\n        results.push(key);\n      }\n    });\n    return results;\n  }\n\n  /**\n   * For the specified mediaQuery?\n   */\n  isActive(mediaQuery: string): boolean {\n    const mql = this._registry.get(mediaQuery);\n    return !!mql ? mql.matches : false;\n  }\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   *\n   * If a mediaQuery is not specified, then ALL mediaQuery activations will\n   * be announced.\n   */\n  observe(): Observable<MediaChange>;\n  observe(mediaQueries: string[]): Observable<MediaChange>;\n  observe(mediaQueries: string[], filterOthers: boolean): Observable<MediaChange>;\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * Typically used by the MediaQueryAdaptor; optionally available to components\n   * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n   *\n   * Use deferred registration process to register breakpoints only on subscription\n   * This logic also enforces logic to register all mediaQueries BEFORE notify\n   * subscribers of notifications.\n   */\n  observe(mqList?: string[], filterOthers = false): Observable<MediaChange> {\n    if (mqList && mqList.length) {\n      const matchMedia$: Observable<MediaChange> = this._observable$.pipe(\n          filter((change: MediaChange) => {\n            return !filterOthers ? true : (mqList.indexOf(change.mediaQuery) > -1);\n          })\n      );\n      const registration$: Observable<MediaChange> = new Observable((observer: Observer<MediaChange>) => {  // tslint:disable-line:max-line-length\n        const matches: Array<MediaChange> = this.registerQuery(mqList);\n        if (matches.length) {\n          const lastChange = matches.pop()!;\n          matches.forEach((e: MediaChange) => {\n            observer.next(e);\n          });\n          this._source.next(lastChange); // last match is cached\n        }\n        observer.complete();\n      });\n      return merge(registration$, matchMedia$);\n    }\n\n    return this._observable$;\n  }\n\n  /**\n   * Based on the BreakPointRegistry provider, register internal listeners for each unique\n   * mediaQuery. Each listener emits specific MediaChange data to observers\n   */\n  registerQuery(mediaQuery: string | string[]) {\n    const list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n    const matches: MediaChange[] = [];\n\n    buildQueryCss(list, this._document);\n\n    list.forEach((query: string) => {\n      const onMQLEvent = (e: MediaQueryListEvent) => {\n        this._zone.run(() => this._source.next(new MediaChange(e.matches, query)));\n      };\n\n      let mql = this._registry.get(query);\n      if (!mql) {\n        mql = this.buildMQL(query);\n        mql.addListener(onMQLEvent);\n        this._registry.set(query, mql);\n      }\n\n      if (mql.matches) {\n        matches.push(new MediaChange(true, query));\n      }\n    });\n\n    return matches;\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected buildMQL(query: string): MediaQueryList {\n    return constructMql(query, isPlatformBrowser(this._platformId));\n  }\n}\n\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES: { [key: string]: any } = {};\n\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param mediaQueries\n * @param _document\n */\nfunction buildQueryCss(mediaQueries: string[], _document: Document) {\n  const list = mediaQueries.filter(it => !ALL_STYLES[it]);\n  if (list.length > 0) {\n    const query = list.join(', ');\n\n    try {\n      const styleEl = _document.createElement('style');\n\n      styleEl.setAttribute('type', 'text/css');\n      if (!(styleEl as any).styleSheet) {\n        const cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n        styleEl.appendChild(_document.createTextNode(cssText));\n      }\n\n      _document.head!.appendChild(styleEl);\n\n      // Store in private global registry\n      list.forEach(mq => ALL_STYLES[mq] = styleEl);\n\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nfunction constructMql(query: string, isBrowser: boolean): MediaQueryList {\n  const canListen = isBrowser && !!(<Window>window).matchMedia('all').addListener;\n\n  return canListen ? (<Window>window).matchMedia(query) : {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {\n    },\n    removeListener: () => {\n    }\n  } as unknown as MediaQueryList;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable} from '@angular/core';\n\nimport {mergeAlias} from '../add-alias';\nimport {MediaChange} from '../media-change';\nimport {BreakPoint} from '../breakpoints/break-point';\nimport {LAYOUT_CONFIG, LayoutConfigOptions} from '../tokens/library-config';\nimport {BreakPointRegistry, OptionalBreakPoint} from '../breakpoints/break-point-registry';\nimport {sortDescendingPriority} from '../utils/sort';\n\n/**\n * Interface to apply PrintHook to call anonymous `target.updateStyles()`\n */\nexport interface HookTarget {\n  activatedBreakpoints: BreakPoint[];\n  updateStyles(): void;\n}\n\nconst PRINT = 'print';\nexport const BREAKPOINT_PRINT = {\n  alias: PRINT,\n  mediaQuery: PRINT,\n  priority: 1000\n};\n\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\n@Injectable({providedIn: 'root'})\nexport class PrintHook {\n  constructor(\n      protected breakpoints: BreakPointRegistry,\n      @Inject(LAYOUT_CONFIG) protected layoutConfig: LayoutConfigOptions) {\n  }\n\n  /** Add 'print' mediaQuery: to listen for matchMedia activations */\n  withPrintQuery(queries: string[]): string[] {\n    return [...queries, PRINT];\n  }\n\n  /** Is the MediaChange event for any 'print' @media */\n  isPrintEvent(e: MediaChange): Boolean {\n    return e.mediaQuery.startsWith(PRINT);\n  }\n\n  /** What is the desired mqAlias to use while printing? */\n  get printAlias(): string[] {\n    return this.layoutConfig.printWithBreakpoints || [];\n  }\n\n  /** Lookup breakpoints associated with print aliases. */\n  get printBreakPoints(): BreakPoint[] {\n    return this.printAlias\n        .map(alias => this.breakpoints.findByAlias(alias))\n        .filter(bp => bp !== null) as BreakPoint[];\n  }\n\n  /** Lookup breakpoint associated with mediaQuery */\n  getEventBreakpoints({mediaQuery}: MediaChange): BreakPoint[] {\n    const bp = this.breakpoints.findByQuery(mediaQuery);\n    const list = bp ? [...this.printBreakPoints, bp] : this.printBreakPoints;\n\n    return list.sort(sortDescendingPriority);\n  }\n\n  /** Update event with printAlias mediaQuery information */\n  updateEvent(event: MediaChange): MediaChange {\n    let bp: OptionalBreakPoint = this.breakpoints.findByQuery(event.mediaQuery);\n    if (this.isPrintEvent(event)) {\n      // Reset from 'print' to first (highest priority) print breakpoint\n      bp = this.getEventBreakpoints(event)[0];\n      event.mediaQuery = bp ? bp.mediaQuery : '';\n    }\n    return mergeAlias(event, bp);\n  }\n\n  /**\n   * Prepare RxJs filter operator with partial application\n   * @return pipeable filter predicate\n   */\n  interceptEvents(target: HookTarget) {\n    return (event: MediaChange) => {\n      if (this.isPrintEvent(event)) {\n        if (event.matches && !this.isPrinting) {\n          this.startPrinting(target, this.getEventBreakpoints(event));\n          target.updateStyles();\n\n        } else if (!event.matches && this.isPrinting) {\n          this.stopPrinting(target);\n          target.updateStyles();\n        }\n      } else {\n        this.collectActivations(event);\n      }\n    };\n  }\n\n  /** Stop mediaChange event propagation in event streams */\n  blockPropagation() {\n    return (event: MediaChange): boolean => {\n      return !(this.isPrinting || this.isPrintEvent(event));\n    };\n  }\n\n  /**\n   * Save current activateBreakpoints (for later restore)\n   * and substitute only the printAlias breakpoint\n   */\n  protected startPrinting(target: HookTarget, bpList: OptionalBreakPoint[]) {\n    this.isPrinting = true;\n    target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n  }\n\n  /** For any print de-activations, reset the entire print queue */\n  protected stopPrinting(target: HookTarget) {\n    target.activatedBreakpoints = this.deactivations;\n    this.deactivations = [];\n    this.queue.clear();\n    this.isPrinting = false;\n  }\n\n  /**\n   * To restore pre-Print Activations, we must capture the proper\n   * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n   * is not supported; so 'print' mediaQuery activations must be used.\n   *\n   * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n   *\n   * Let's capture all de-activations using the following logic:\n   *\n   *  When not printing:\n   *    - clear cache when activating non-print breakpoint\n   *    - update cache (and sort) when deactivating\n   *\n   *  When printing:\n   *    - sort and save when starting print\n   *    - restore as activatedTargets and clear when stop printing\n   */\n  collectActivations(event: MediaChange) {\n    if (!this.isPrinting) {\n      if (!event.matches) {\n        const bp = this.breakpoints.findByQuery(event.mediaQuery);\n        if (bp) {   // Deactivating a breakpoint\n          this.deactivations.push(bp);\n          this.deactivations.sort(sortDescendingPriority);\n        }\n      } else {\n        this.deactivations = [];\n      }\n    }\n  }\n\n  /** Is this service currently in Print-mode ? */\n  private isPrinting = false;\n  private queue: PrintQueue = new PrintQueue();\n  private deactivations: BreakPoint[] = [];\n\n}\n\n// ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\nclass PrintQueue {\n  /** Sorted queue with prioritized print breakpoints */\n  printBreakpoints: BreakPoint[] = [];\n\n  addPrintBreakpoints(bpList: OptionalBreakPoint[]): BreakPoint[] {\n    bpList.push(BREAKPOINT_PRINT);\n    bpList.sort(sortDescendingPriority);\n    bpList.forEach(bp => this.addBreakpoint(bp));\n\n    return this.printBreakpoints;\n  }\n\n  /** Add Print breakpoint to queue */\n  addBreakpoint(bp: OptionalBreakPoint) {\n    if (!!bp) {\n      const bpInList = this.printBreakpoints.find(it => it.mediaQuery === bp.mediaQuery);\n      if (bpInList === undefined) {\n        // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n        // register as highest priority in the queue\n        this.printBreakpoints = isPrintBreakPoint(bp) ? [bp, ...this.printBreakpoints]\n            : [...this.printBreakpoints, bp];\n      }\n    }\n  }\n\n  /** Restore original activated breakpoints and clear internal caches */\n  clear() {\n    this.printBreakpoints = [];\n  }\n}\n\n// ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n\n/** Only support intercept queueing if the Breakpoint is a print @media query */\nfunction isPrintBreakPoint(bp: OptionalBreakPoint) {\n  return bp ? bp.mediaQuery.startsWith(PRINT) : false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {debounceTime, filter, map, switchMap} from 'rxjs/operators';\n\nimport {mergeAlias} from '../add-alias';\nimport {MediaChange} from '../media-change';\nimport {MatchMedia} from '../match-media/match-media';\nimport {PrintHook} from '../media-marshaller/print-hook';\nimport {BreakPointRegistry, OptionalBreakPoint} from '../breakpoints/break-point-registry';\nimport {sortDescendingPriority} from '../utils/sort';\n\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n *  @usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '@angular/flex-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\n@Injectable({providedIn: 'root'})\nexport class MediaObserver {\n\n  /**\n   * @deprecated Use `asObservable()` instead.\n   * @breaking-change 7.0.0-beta.24\n   * @deletion-target v7.0.0-beta.25\n   */\n  readonly media$: Observable<MediaChange>;\n\n  /** Filter MediaChange notifications for overlapping breakpoints */\n  filterOverlaps = false;\n\n  constructor(protected breakpoints: BreakPointRegistry,\n              protected matchMedia: MatchMedia,\n              protected hook: PrintHook) {\n    this._media$ = this.watchActivations();\n    this.media$ = this._media$.pipe(\n      filter((changes: MediaChange[]) => changes.length > 0),\n      map((changes: MediaChange[]) => changes[0])\n    );\n  }\n\n\n  // ************************************************\n  // Public Methods\n  // ************************************************\n\n  /**\n   * Observe changes to current activation 'list'\n   */\n  asObservable(): Observable<MediaChange[]> {\n    return this._media$;\n  }\n\n  /**\n   * Allow programmatic query to determine if specified query/alias is active.\n   */\n  isActive(alias: string): boolean {\n    const query = toMediaQuery(alias, this.breakpoints);\n    return this.matchMedia.isActive(query);\n  }\n\n  /**\n   * Subscribers to activation list can use this function to easily exclude overlaps\n   */\n\n\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n\n  /**\n   * Register all the mediaQueries registered in the BreakPointRegistry\n   * This is needed so subscribers can be auto-notified of all standard, registered\n   * mediaQuery activations\n   */\n  private watchActivations() {\n    const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n    return this.buildObservable(queries);\n  }\n\n  /**\n   * Only pass/announce activations (not de-activations)\n   *\n   * Since multiple-mediaQueries can be activation in a cycle,\n   * gather all current activations into a single list of changes to observers\n   *\n   * Inject associated (if any) alias information into the MediaChange event\n   * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n   * - Exclude print activations that do not have an associated mediaQuery\n   *\n   * NOTE: the raw MediaChange events [from MatchMedia] do not\n   *       contain important alias information; as such this info\n   *       must be injected into the MediaChange\n   */\n  private buildObservable(mqList: string[]): Observable<MediaChange[]> {\n    const hasChanges = (changes: MediaChange[]) => {\n      const isValidQuery = (change: MediaChange) => (change.mediaQuery.length > 0);\n      return (changes.filter(isValidQuery).length > 0);\n    };\n    const excludeOverlaps = (changes: MediaChange[]) => {\n      return !this.filterOverlaps ? changes : changes.filter(change => {\n        const bp = this.breakpoints.findByQuery(change.mediaQuery);\n        return !bp ? true : !bp.overlapping;\n      });\n    };\n\n    /**\n     */\n    return this.matchMedia\n        .observe(this.hook.withPrintQuery(mqList))\n        .pipe(\n            filter((change: MediaChange) => change.matches),\n            debounceTime(10),\n            switchMap(_ => of(this.findAllActivations())),\n            map(excludeOverlaps),\n            filter(hasChanges)\n        );\n  }\n\n  /**\n   * Find all current activations and prepare single list of activations\n   * sorted by descending priority.\n   */\n  private findAllActivations(): MediaChange[] {\n    const mergeMQAlias = (change: MediaChange) => {\n      let bp: OptionalBreakPoint = this.breakpoints.findByQuery(change.mediaQuery);\n      return mergeAlias(change, bp);\n    };\n    const replaceWithPrintAlias = (change: MediaChange) => {\n      return this.hook.isPrintEvent(change) ? this.hook.updateEvent(change) : change;\n    };\n\n    return this.matchMedia\n        .activations\n        .map(query => new MediaChange(true, query))\n        .map(replaceWithPrintAlias)\n        .map(mergeMQAlias)\n        .sort(sortDescendingPriority);\n  }\n\n  private readonly _media$: Observable<MediaChange[]>;\n}\n\n/**\n * Find associated breakpoint (if any)\n */\nfunction toMediaQuery(query: string, locator: BreakPointRegistry) {\n  const bp = locator.findByAlias(query) || locator.findByQuery(query);\n  return bp ? bp.mediaQuery : query;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n */\nexport function applyCssPrefixes(target: {[key: string]: any | null}) {\n  for (let key in target) {\n    let value = target[key] || '';\n\n    switch (key) {\n      case 'display':\n        if (value === 'flex') {\n          target['display'] = [\n            '-webkit-flex',\n            'flex'\n          ];\n        } else if (value === 'inline-flex') {\n          target['display'] = [\n            '-webkit-inline-flex',\n            'inline-flex'\n          ];\n        } else {\n          target['display'] = value;\n        }\n        break;\n\n      case 'align-items':\n      case 'align-self':\n      case 'align-content':\n      case 'flex':\n      case 'flex-basis':\n      case 'flex-flow':\n      case 'flex-grow':\n      case 'flex-shrink':\n      case 'flex-wrap':\n      case 'justify-content':\n        target['-webkit-' + key] = value;\n        break;\n\n      case 'flex-direction':\n        value = value || 'row';\n        target['-webkit-flex-direction'] = value;\n        target['flex-direction'] = value;\n        break;\n\n      case 'order':\n        target['order'] = target['-webkit-' + key] = isNaN(+value) ? '0' : value;\n        break;\n    }\n  }\n  return target;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n /**\n * The flex API permits 3 or 1 parts of the value:\n *    - `flex-grow flex-shrink flex-basis`, or\n *    - `flex-basis`\n */\nexport function validateBasis(basis: string, grow = '1', shrink = '1'): string[] {\n  let parts = [grow, shrink, basis];\n\n  let j = basis.indexOf('calc');\n  if (j > 0) {\n    parts[2] = _validateCalcValue(basis.substring(j).trim());\n    let matches = basis.substr(0, j).trim().split(' ');\n    if (matches.length == 2) {\n      parts[0] = matches[0];\n      parts[1] = matches[1];\n    }\n  } else if (j == 0) {\n    parts[2] = _validateCalcValue(basis.trim());\n  } else {\n    let matches = basis.split(' ');\n    parts = (matches.length === 3) ? matches : [\n          grow, shrink, basis\n        ];\n  }\n\n  return parts;\n}\n\n\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n */\nfunction _validateCalcValue(calc: string): string {\n  return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\nimport {BROWSER_PROVIDER} from './browser-provider';\n\n/**\n * *****************************************************************\n * Define module for the MediaQuery API\n * *****************************************************************\n */\n\n@NgModule({\n  providers: [BROWSER_PROVIDER]\n})\nexport class CoreModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport type MediaQuerySubscriber = (changes: MediaChange) => void;\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nexport class MediaChange {\n  property: string = '';\n  value: any;\n\n  /**\n   * @param matches whether the mediaQuery is currently activated\n   * @param mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n   * @param mqAlias e.g. gt-sm, md, gt-lg\n   * @param suffix e.g. GtSM, Md, GtLg\n   * @param priority the priority of activation for the given breakpoint\n   */\n  constructor(public matches = false,\n              public mediaQuery = 'all',\n              public mqAlias = '',\n              public suffix = '',\n              public priority = 0) {\n  }\n\n  /** Create an exact copy of the MediaChange */\n  clone(): MediaChange {\n    return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n  }\n}\n\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\n\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\n@Injectable({providedIn: 'root'})\nexport class StylesheetMap {\n\n  readonly stylesheet = new Map<HTMLElement, Map<string, string|number>>();\n\n  /**\n   * Add an individual style to an HTML element\n   */\n  addStyleToElement(element: HTMLElement, style: string, value: string|number) {\n    const stylesheet = this.stylesheet.get(element);\n    if (stylesheet) {\n      stylesheet.set(style, value);\n    } else {\n      this.stylesheet.set(element, new Map([[style, value]]));\n    }\n  }\n\n  /**\n   * Clear the virtual stylesheet\n   */\n  clearStyles() {\n    this.stylesheet.clear();\n  }\n\n  /**\n   * Retrieve a given style for an HTML element\n   */\n  getStyleForElement(el: HTMLElement, styleName: string): string {\n    const styles = this.stylesheet.get(el);\n    let value = '';\n    if (styles) {\n      const style = styles.get(styleName);\n      if (typeof style === 'number' || typeof style === 'string') {\n        value = style + '';\n      }\n    }\n    return value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n/** a set of configuration options for FlexLayoutModule */\nexport interface LayoutConfigOptions {\n  addFlexToParent?: boolean;\n  addOrientationBps?: boolean;\n  disableDefaultBps?: boolean;\n  disableVendorPrefixes?: boolean;\n  serverLoaded?: boolean;\n  useColumnBasisZero?: boolean;\n  printWithBreakpoints?: string[];\n}\n\nexport const DEFAULT_CONFIG: LayoutConfigOptions = {\n  addFlexToParent: true,\n  addOrientationBps: false,\n  disableDefaultBps: false,\n  disableVendorPrefixes: false,\n  serverLoaded: false,\n  useColumnBasisZero: true,\n  printWithBreakpoints: []\n};\n\nexport const LAYOUT_CONFIG = new InjectionToken<LayoutConfigOptions>(\n  'Flex Layout token, config options for the library', {\n    providedIn: 'root',\n    factory: () => DEFAULT_CONFIG\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n */\nexport const SERVER_TOKEN = new InjectionToken<boolean>(\n  'FlexLayoutServerLoaded', {\n    providedIn: 'root',\n    factory: () => false\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {BreakPoint} from '../breakpoints/break-point';\n\nexport const BREAKPOINT = new InjectionToken<BreakPoint|BreakPoint[]|null>(\n  'Flex Layout token, collect all breakpoints into one provider', {\n    providedIn: 'root',\n    factory: () => null\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {StyleDefinition, StyleUtils} from '../style-utils/style-utils';\nimport {StyleBuilder} from '../style-builder/style-builder';\nimport {MediaMarshaller} from '../media-marshaller/media-marshaller';\nimport {buildLayoutCSS} from '../../utils/layout-validator';\n\nexport abstract class BaseDirective2 implements OnChanges, OnDestroy {\n\n  protected DIRECTIVE_KEY = '';\n  protected inputs: string[] = [];\n  /** The most recently used styles for the builder */\n  protected mru: StyleDefinition = {};\n  protected destroySubject: Subject<void> = new Subject();\n\n  /** Access to host element's parent DOM node */\n  protected get parentElement(): HTMLElement | null {\n    return this.elementRef.nativeElement.parentElement;\n  }\n\n  /** Access to the HTMLElement for the directive */\n  protected get nativeElement(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /** Access to the activated value for the directive */\n  get activatedValue(): string {\n    return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n  set activatedValue(value: string) {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value,\n      this.marshal.activatedAlias);\n  }\n\n  /** Cache map for style computation */\n  protected styleCache: Map<string, StyleDefinition> = new Map();\n\n  protected constructor(protected elementRef: ElementRef,\n                        protected styleBuilder: StyleBuilder,\n                        protected styler: StyleUtils,\n                        protected marshal: MediaMarshaller) {\n  }\n\n  /** For @Input changes */\n  ngOnChanges(changes: SimpleChanges) {\n    Object.keys(changes).forEach(key => {\n      if (this.inputs.indexOf(key) !== -1) {\n        const bp = key.split('.').slice(1).join('.');\n        const val = changes[key].currentValue;\n        this.setValue(val, bp);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroySubject.next();\n    this.destroySubject.complete();\n    this.marshal.releaseElement(this.nativeElement);\n  }\n\n  /** Register with central marshaller service */\n  protected init(extraTriggers: Observable<any>[] = []): void {\n    this.marshal.init(\n      this.elementRef.nativeElement,\n      this.DIRECTIVE_KEY,\n      this.updateWithValue.bind(this),\n      this.clearStyles.bind(this),\n      extraTriggers\n    );\n  }\n\n  /** Add styles to the element using predefined style builder */\n  protected addStyles(input: string, parent?: Object) {\n    const builder = this.styleBuilder;\n    const useCache = builder.shouldCache;\n\n    let genStyles: StyleDefinition | undefined = this.styleCache.get(input);\n\n    if (!genStyles || !useCache) {\n      genStyles = builder.buildStyles(input, parent);\n      if (useCache) {\n        this.styleCache.set(input, genStyles);\n      }\n    }\n\n    this.mru = {...genStyles};\n    this.applyStyleToElement(genStyles);\n    builder.sideEffect(input, genStyles, parent);\n  }\n\n  /** Remove generated styles from an element using predefined style builder */\n  protected clearStyles() {\n    Object.keys(this.mru).forEach(k => {\n      this.mru[k] = '';\n    });\n    this.applyStyleToElement(this.mru);\n    this.mru = {};\n  }\n\n  /** Force trigger style updates on DOM element */\n  protected triggerUpdate() {\n    this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction).\n   *\n   * Check inline style first then check computed (stylesheet) style.\n   * And optionally add the flow value to element's inline style.\n   */\n  protected getFlexFlowDirection(target: HTMLElement, addIfMissing = false): string {\n    if (target) {\n      const [value, hasInlineValue] = this.styler.getFlowDirection(target);\n\n      if (!hasInlineValue && addIfMissing) {\n        const style = buildLayoutCSS(value);\n        const elements = [target];\n        this.styler.applyStyleToElements(style, elements);\n      }\n\n      return value.trim();\n    }\n\n    return 'row';\n  }\n\n  /** Applies styles given via string pair or object map to the directive element */\n  protected applyStyleToElement(style: StyleDefinition,\n                                value?: string | number,\n                                element: HTMLElement = this.nativeElement) {\n    this.styler.applyStyleToElement(element, style, value);\n  }\n\n  protected setValue(val: any, bp: string): void {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n  }\n\n  protected updateWithValue(input: string) {\n    this.addStyles(input);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {BreakPoint} from '../break-point';\n\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n */\nexport const DEFAULT_BREAKPOINTS: BreakPoint[] = [\n  {\n    alias: 'xs',\n    mediaQuery: 'screen and (min-width: 0px) and (max-width: 599px)',\n    priority: 1000,\n  },\n  {\n    alias: 'sm',\n    mediaQuery: 'screen and (min-width: 600px) and (max-width: 959px)',\n    priority: 900,\n  },\n  {\n    alias: 'md',\n    mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279px)',\n    priority: 800,\n  },\n  {\n    alias: 'lg',\n    mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919px)',\n    priority: 700,\n  },\n  {\n    alias: 'xl',\n    mediaQuery: 'screen and (min-width: 1920px) and (max-width: 5000px)',\n    priority: 600,\n  },\n  {\n    alias: 'lt-sm',\n    overlapping: true,\n    mediaQuery: 'screen and (max-width: 599px)',\n    priority: 950,\n  },\n  {\n    alias: 'lt-md',\n    overlapping: true,\n    mediaQuery: 'screen and (max-width: 959px)',\n    priority: 850,\n  },\n  {\n    alias: 'lt-lg',\n    overlapping: true,\n    mediaQuery: 'screen and (max-width: 1279px)',\n    priority: 750,\n  },\n  {\n    alias: 'lt-xl',\n    overlapping: true,\n    priority: 650,\n    mediaQuery: 'screen and (max-width: 1919px)',\n  },\n  {\n    alias: 'gt-xs',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 600px)',\n    priority: -950,\n  },\n  {\n    alias: 'gt-sm',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 960px)',\n    priority: -850,\n  }, {\n    alias: 'gt-md',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 1280px)',\n    priority: -750,\n  },\n  {\n    alias: 'gt-lg',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 1920px)',\n    priority: -650,\n  }\n];\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BreakPoint} from '../break-point';\n\n/* tslint:disable */\nconst HANDSET_PORTRAIT  = '(orientation: portrait) and (max-width: 599px)';\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959px)';\n\nconst TABLET_LANDSCAPE  = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279px)';\nconst TABLET_PORTRAIT   = '(orientation: portrait) and (min-width: 600px) and (max-width: 839px)';\n\nconst WEB_PORTRAIT      = '(orientation: portrait) and (min-width: 840px)';\nconst WEB_LANDSCAPE     = '(orientation: landscape) and (min-width: 1280px)';\n\nexport const ScreenTypes = {\n  'HANDSET'           : `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n  'TABLET'            : `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n  'WEB'               : `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n\n  'HANDSET_PORTRAIT'  : `${HANDSET_PORTRAIT}`,\n  'TABLET_PORTRAIT'   : `${TABLET_PORTRAIT} `,\n  'WEB_PORTRAIT'      : `${WEB_PORTRAIT}`,\n\n  'HANDSET_LANDSCAPE' : `${HANDSET_LANDSCAPE}]`,\n  'TABLET_LANDSCAPE'  : `${TABLET_LANDSCAPE}`,\n  'WEB_LANDSCAPE'     : `${WEB_LANDSCAPE}`\n};\n\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\nexport const ORIENTATION_BREAKPOINTS : BreakPoint[] = [\n  {'alias': 'handset',            priority: 2000, 'mediaQuery': ScreenTypes.HANDSET},\n  {'alias': 'handset.landscape',  priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE},\n  {'alias': 'handset.portrait',   priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_PORTRAIT},\n\n  {'alias': 'tablet',             priority: 2100, 'mediaQuery': ScreenTypes.TABLET},\n  {'alias': 'tablet.landscape',   priority: 2100, 'mediaQuery': ScreenTypes.TABLET},\n  {'alias': 'tablet.portrait',    priority: 2100, 'mediaQuery': ScreenTypes.TABLET_PORTRAIT},\n\n  {'alias': 'web',                priority: 2200, 'mediaQuery': ScreenTypes.WEB, overlapping : true },\n  {'alias': 'web.landscape',      priority: 2200, 'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping : true },\n  {'alias': 'web.portrait',       priority: 2200, 'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping : true }\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken} from '@angular/core';\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINT} from '../tokens/breakpoint-token';\nimport {DEFAULT_BREAKPOINTS} from '../breakpoints/data/break-points';\nimport {ORIENTATION_BREAKPOINTS} from '../breakpoints/data/orientation-break-points';\nimport {mergeByAlias} from '../breakpoints/breakpoint-tools';\nimport {LAYOUT_CONFIG} from '../tokens/library-config';\n\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n */\nexport const BREAKPOINTS =\n  new InjectionToken<BreakPoint[]>('Token (@angular/flex-layout) Breakpoints', {\n    providedIn: 'root',\n    factory: () => {\n      const breakpoints: any = inject(BREAKPOINT);\n      const layoutConfig = inject(LAYOUT_CONFIG);\n      const bpFlattenArray: BreakPoint[] = [].concat.apply([], (breakpoints || [])\n        .map((v: BreakPoint | BreakPoint[]) => Array.isArray(v) ? v : [v]));\n      const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS)\n        .concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n\n      return mergeByAlias(builtIns, bpFlattenArray);\n    }\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable, Inject} from '@angular/core';\n\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINTS} from './break-points-token';\nimport {sortAscendingPriority} from '../utils/sort';\n\nexport type OptionalBreakPoint = BreakPoint | null;\n\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\n@Injectable({providedIn: 'root'})\nexport class BreakPointRegistry {\n  readonly items: BreakPoint[];\n\n  constructor(@Inject(BREAKPOINTS) list: BreakPoint[]) {\n    this.items = [...list].sort(sortAscendingPriority);\n  }\n\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   */\n  findByAlias(alias: string): OptionalBreakPoint {\n    return !alias ? null : this.findWithPredicate(alias, (bp) => bp.alias == alias);\n  }\n\n  findByQuery(query: string): OptionalBreakPoint {\n    return this.findWithPredicate(query, (bp) => bp.mediaQuery == query);\n  }\n\n  /**\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n   * e.g. gt-sm overlaps md, lg, and xl\n   */\n  get overlappings(): BreakPoint[] {\n    return this.items.filter(it => it.overlapping == true);\n  }\n\n  /**\n   * Get list of all registered (non-empty) breakpoint aliases\n   */\n  get aliases(): string[] {\n    return this.items.map(it => it.alias);\n  }\n\n  /**\n   * Aliases are mapped to properties using suffixes\n   * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n   * for property layoutGtSM.\n   */\n  get suffixes(): string[] {\n    return this.items.map(it => !!it.suffix ? it.suffix : '');\n  }\n\n  /**\n   * Memoized lookup using custom predicate function\n   */\n  private findWithPredicate(key: string,\n      searchFn: (bp: BreakPoint) => boolean): OptionalBreakPoint {\n    let response = this.findByMap.get(key);\n    if (!response) {\n      response = this.items.find(searchFn) || null;\n      this.findByMap.set(key, response);\n    }\n    return response || null;\n\n  }\n\n  /**\n   * Memoized BreakPoint Lookups\n   */\n  private readonly findByMap = new Map<String, OptionalBreakPoint>();\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, NgZone, PLATFORM_ID} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\nimport {MatchMedia} from '../match-media';\nimport {BreakPointRegistry} from '../../breakpoints/break-point-registry';\n\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\n@Injectable()\nexport class MockMatchMedia extends MatchMedia {\n\n  /** Special flag used to test BreakPoint registrations with MatchMedia */\n  autoRegisterQueries = true;\n\n  /**\n   * Allow fallback to overlapping mediaQueries to determine\n   * activatedInput(s).\n   */\n  useOverlaps = false;\n\n  protected _registry: Map<string, MockMediaQueryList> = new Map();\n\n  constructor(_zone: NgZone,\n              @Inject(PLATFORM_ID) _platformId: Object,\n              @Inject(DOCUMENT) _document: any,\n              private _breakpoints: BreakPointRegistry) {\n    super(_zone, _platformId, _document);\n  }\n\n  /** Easy method to clear all listeners for all mediaQueries */\n  clearAll() {\n    this._registry.forEach((mql: MockMediaQueryList) => {\n      mql.destroy();\n    });\n    this._registry.clear();\n    this.useOverlaps = false;\n  }\n\n  /** Feature to support manual, simulated activation of a mediaQuery. */\n  activate(mediaQuery: string, useOverlaps = false): boolean {\n    useOverlaps = useOverlaps || this.useOverlaps;\n    mediaQuery = this._validateQuery(mediaQuery);\n\n    if (useOverlaps || !this.isActive(mediaQuery)) {\n      this._deactivateAll();\n\n      this._registerMediaQuery(mediaQuery);\n      this._activateWithOverlaps(mediaQuery, useOverlaps);\n    }\n\n    return this.hasActivated;\n  }\n\n  /** Converts an optional mediaQuery alias to a specific, valid mediaQuery */\n  _validateQuery(queryOrAlias: string) {\n    const bp = this._breakpoints.findByAlias(queryOrAlias);\n    return (bp && bp.mediaQuery) || queryOrAlias;\n  }\n\n  /**\n   * Manually onMediaChange any overlapping mediaQueries to simulate\n   * similar functionality in the window.matchMedia()\n   */\n  private _activateWithOverlaps(mediaQuery: string, useOverlaps: boolean): boolean {\n    if (useOverlaps) {\n      const bp = this._breakpoints.findByQuery(mediaQuery);\n      const alias = bp ? bp.alias : 'unknown';\n\n      // Simulate activation of overlapping lt-<XXX> ranges\n      switch (alias) {\n        case 'lg'   :\n          this._activateByAlias('lt-xl');\n          break;\n        case 'md'   :\n          this._activateByAlias('lt-xl, lt-lg');\n          break;\n        case 'sm'   :\n          this._activateByAlias('lt-xl, lt-lg, lt-md');\n          break;\n        case 'xs'   :\n          this._activateByAlias('lt-xl, lt-lg, lt-md, lt-sm');\n          break;\n      }\n\n      // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n      switch (alias) {\n        case 'xl'   :\n          this._activateByAlias('gt-lg, gt-md, gt-sm, gt-xs');\n          break;\n        case 'lg'   :\n          this._activateByAlias('gt-md, gt-sm, gt-xs');\n          break;\n        case 'md'   :\n          this._activateByAlias('gt-sm, gt-xs');\n          break;\n        case 'sm'   :\n          this._activateByAlias('gt-xs');\n          break;\n      }\n    }\n    // Activate last since the responsiveActivation is watching *this* mediaQuery\n    return this._activateByQuery(mediaQuery);\n  }\n\n  /**\n   *\n   */\n  private _activateByAlias(aliases: string) {\n    const activate = (alias: string) => {\n      const bp = this._breakpoints.findByAlias(alias);\n      this._activateByQuery(bp ? bp.mediaQuery : alias);\n    };\n    aliases.split(',').forEach(alias => activate(alias.trim()));\n  }\n\n  /**\n   *\n   */\n  private _activateByQuery(mediaQuery: string) {\n    const mql = this._registry.get(mediaQuery);\n    const alreadyAdded = this._actives\n        .reduce((found, it) => (found || (mql ? (it.media === mql.media) : false)), false);\n\n    if (mql && !alreadyAdded) {\n      this._actives.push(mql.activate());\n    }\n    return this.hasActivated;\n  }\n\n  /** Deactivate all current MQLs and reset the buffer */\n  private _deactivateAll() {\n    this._actives.forEach(it => it.deactivate());\n    this._actives = [];\n    return this;\n  }\n\n  /** Insure the mediaQuery is registered with MatchMedia */\n  private _registerMediaQuery(mediaQuery: string) {\n    if (!this._registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this.registerQuery(mediaQuery);\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected buildMQL(query: string): MediaQueryList {\n    return new MockMediaQueryList(query);\n  }\n\n  protected get hasActivated() {\n    return this._actives.length > 0;\n  }\n\n  private _actives: MockMediaQueryList[] = [];\n}\n\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nexport class MockMediaQueryList implements MediaQueryList {\n  private _isActive = false;\n  private _listeners: MediaQueryListListener[] = [];\n\n  get matches(): boolean {\n    return this._isActive;\n  }\n\n  get media(): string {\n    return this._mediaQuery;\n  }\n\n  constructor(private _mediaQuery: string) {\n  }\n\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n\n  /** Notify all listeners that 'matches === TRUE' */\n  activate(): MockMediaQueryList {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(null, this);\n      });\n    }\n    return this;\n  }\n\n  /** Notify all listeners that 'matches === false' */\n  deactivate(): MockMediaQueryList {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(null, this);\n      });\n    }\n    return this;\n  }\n\n  /** Add a listener to our internal list to activate later */\n  addListener(listener: MediaQueryListListener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = listener!;\n      cb.call(null, this);\n    }\n  }\n\n  /** Don't need to remove listeners in the testing environment */\n  removeListener(_: MediaQueryListListener | null) {\n  }\n\n  addEventListener<K extends keyof MediaQueryListEventMap>(\n      _: K,\n      __: (this: MediaQueryList,\n      ev: MediaQueryListEventMap[K]) => any,\n      ___?: boolean | AddEventListenerOptions): void;\n\n  addEventListener(\n      _: string,\n      __: EventListenerOrEventListenerObject,\n      ___?: boolean | AddEventListenerOptions) {\n  }\n\n  removeEventListener<K extends keyof MediaQueryListEventMap>(\n      _: K,\n      __: (this: MediaQueryList,\n      ev: MediaQueryListEventMap[K]) => any,\n      ___?: boolean | EventListenerOptions): void;\n\n  removeEventListener(\n      _: string,\n      __: EventListenerOrEventListenerObject,\n      ___?: boolean | EventListenerOptions) {\n  }\n\n  dispatchEvent(_: Event): boolean {\n    return false;\n  }\n\n  onchange: MediaQueryListListener = null;\n}\n\n/**\n * Pre-configured provider for MockMatchMedia\n */\nexport const MockMatchMediaProvider = {  // tslint:disable-line:variable-name\n  provide: MatchMedia,\n  useClass: MockMatchMedia\n};\n\ntype MediaQueryListListener = ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone, PLATFORM_ID} from '@angular/core';\n\nimport {BreakPoint} from '../breakpoints/break-point';\nimport {MatchMedia} from './match-media';\n\n/**\n * Special server-only class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nexport class ServerMediaQueryList implements MediaQueryList {\n  private _isActive = false;\n  private _listeners: MediaQueryListListener[] = [];\n\n  get matches(): boolean {\n    return this._isActive;\n  }\n\n  get media(): string {\n    return this._mediaQuery;\n  }\n\n  constructor(private _mediaQuery: string) {}\n\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n\n  /** Notify all listeners that 'matches === TRUE' */\n  activate(): ServerMediaQueryList {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(null, this);\n      });\n    }\n    return this;\n  }\n\n  /** Notify all listeners that 'matches === false' */\n  deactivate(): ServerMediaQueryList {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(null, this);\n      });\n    }\n    return this;\n  }\n\n  /** Add a listener to our internal list to activate later */\n  addListener(listener: MediaQueryListListener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = listener!;\n      cb.call(null, this);\n    }\n  }\n\n  /** Don't need to remove listeners in the server environment */\n  removeListener(_: MediaQueryListListener | null) {\n  }\n\n  addEventListener<K extends keyof\n    MediaQueryListEventMap>(_: K,\n                            __: (this: MediaQueryList,\n                                 ev: MediaQueryListEventMap[K]) => any,\n                            ___?: boolean | AddEventListenerOptions): void;\n  addEventListener(_: string,\n                   __: EventListenerOrEventListenerObject,\n                   ___?: boolean | AddEventListenerOptions) {\n  }\n\n  removeEventListener<K extends keyof\n    MediaQueryListEventMap>(_: K,\n                            __: (this: MediaQueryList,\n                                 ev: MediaQueryListEventMap[K]) => any,\n                            ___?: boolean | EventListenerOptions): void;\n  removeEventListener(_: string,\n                      __: EventListenerOrEventListenerObject,\n                      ___?: boolean | EventListenerOptions) {\n  }\n\n  dispatchEvent(_: Event): boolean {\n    return false;\n  }\n\n  onchange: MediaQueryListListener = null;\n}\n\n/**\n * Special server-only implementation of MatchMedia that uses the above\n * ServerMediaQueryList as its internal representation\n *\n * Also contains methods to activate and deactivate breakpoints\n */\n@Injectable()\nexport class ServerMatchMedia extends MatchMedia {\n  protected _registry: Map<string, ServerMediaQueryList> = new Map();\n\n  constructor(protected _zone: NgZone,\n              @Inject(PLATFORM_ID) protected _platformId: Object,\n              @Inject(DOCUMENT) protected _document: any) {\n    super(_zone, _platformId, _document);\n  }\n\n  /** Activate the specified breakpoint if we're on the server, no-op otherwise */\n  activateBreakpoint(bp: BreakPoint) {\n    const lookupBreakpoint = this._registry.get(bp.mediaQuery);\n    if (lookupBreakpoint) {\n      lookupBreakpoint.activate();\n    }\n  }\n\n  /** Deactivate the specified breakpoint if we're on the server, no-op otherwise */\n  deactivateBreakpoint(bp: BreakPoint) {\n    const lookupBreakpoint = this._registry.get(bp.mediaQuery);\n    if (lookupBreakpoint) {\n      lookupBreakpoint.deactivate();\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected buildMQL(query: string): ServerMediaQueryList {\n    return new ServerMediaQueryList(query);\n  }\n}\n\ntype MediaQueryListListener = ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {DOCUMENT, isPlatformBrowser} from '@angular/common';\n\nimport {BehaviorSubject, fromEvent, Subscription} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\nimport {mergeAlias} from '../add-alias';\nimport {MediaChange} from '../media-change';\nimport {MatchMedia} from '../match-media/match-media';\nimport {BreakPointRegistry, OptionalBreakPoint} from '../breakpoints/break-point-registry';\nimport {sortDescendingPriority} from '../utils/sort';\n\n/**\n * Class\n */\n@Injectable({providedIn: 'root'})\nexport class MediaTrigger {\n\n  constructor(\n      protected breakpoints: BreakPointRegistry,\n      protected matchMedia: MatchMedia,\n      @Inject(PLATFORM_ID) protected _platformId: Object,\n      @Inject(DOCUMENT) protected _document: any) {\n  }\n\n  /**\n   * Manually activate range of breakpoints\n   * @param list array of mediaQuery or alias strings\n   */\n  activate(list: string[]) {\n    list = list.map(it => it.trim()); // trim queries\n\n    this.saveActivations();\n    this.deactivateAll();\n    this.setActivations(list);\n\n    this.prepareAutoRestore();\n  }\n\n  /**\n   * Restore original, 'real' breakpoints and emit events\n   * to trigger stream notification\n   */\n  restore() {\n    if (this.hasCachedOriginals) {\n      const extractQuery = (change: MediaChange) => change.mediaQuery;\n      const list = this.originalActivations.map(extractQuery);\n\n      try {\n        this.deactivateAll();\n        this.restoreRegistryMatches();\n        this.setActivations(list);\n\n      } finally {\n        this.hasCachedOriginals = false;\n        this.originalRegistry = null;\n        this.originalActivations = [];\n        if (this.resizeSubscription) {\n          this.resizeSubscription.unsubscribe();\n        }\n      }\n    }\n  }\n\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n\n  /**\n   * Whenever window resizes, immediately auto-restore original\n   * activations (if we are simulating activations)\n   */\n  private prepareAutoRestore() {\n    if (isPlatformBrowser(this._platformId) && this._document) {\n      const resize$ = fromEvent(window, 'resize').pipe(take(1));\n      this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n    }\n  }\n\n  /**\n   * Notify all matchMedia subscribers of de-activations\n   *\n   * Note: we must force 'matches' updates for\n   *       future matchMedia::activation lookups\n   */\n  private deactivateAll() {\n    const list = this.currentActivations;\n\n    this.forceRegistryMatches(list, false);\n    this.simulateMediaChanges(list, false);\n  }\n\n  /**\n   * Cache current activations as sorted, prioritized list of MediaChanges\n   */\n  private saveActivations() {\n    if (!this.hasCachedOriginals) {\n      const toMediaChange = (query: string) => new MediaChange(true, query);\n      const mergeMQAlias = (change: MediaChange) => {\n        let bp: OptionalBreakPoint = this.breakpoints.findByQuery(change.mediaQuery);\n        return mergeAlias(change, bp);\n      };\n\n      this.originalRegistry = this.matchMedia['_registry'] as Map<string, MediaQueryList>;\n      this.originalActivations = this.currentActivations\n          .map(toMediaChange)\n          .map(mergeMQAlias)\n          .sort(sortDescendingPriority);\n\n      this.hasCachedOriginals = true;\n    }\n  }\n\n  /**\n   * Force set manual activations for specified mediaQuery list\n   */\n  private setActivations(list: string[]) {\n    if (!!this.originalRegistry) {\n      this.forceRegistryMatches(list, true);\n    }\n    this.simulateMediaChanges(list);\n  }\n\n  /**\n   * For specified mediaQuery list manually simulate activations or deactivations\n   */\n  private simulateMediaChanges(queries: string[], matches = true) {\n    const toMediaQuery = (query: string) => {\n      const locator = this.breakpoints;\n      const bp = locator.findByAlias(query) || locator.findByQuery(query);\n      return bp ? bp.mediaQuery : query;\n    };\n    const emitChangeEvent = (query: string) => this.emitChangeEvent(matches, query);\n\n    queries.map(toMediaQuery).forEach(emitChangeEvent);\n  }\n\n  // ****************************************************************\n  // 'Pierce-the-veil' to get access to special, read-only artifacts\n  // ****************************************************************\n\n  /**\n   * Replace current registry with simulated registry...\n   * Note: this is required since MediaQueryList::matches is 'readOnly'\n   */\n  forceRegistryMatches(queries: string[], match: boolean) {\n    const registry = new Map<string, MediaQueryList>();\n    queries.forEach(query => {\n      registry.set(query, {matches: match} as MediaQueryList);\n    });\n\n    this.matchMedia['_registry'] = registry;\n  }\n\n  /**\n   * Restore original, 'true' registry\n   */\n  restoreRegistryMatches() {\n    this.matchMedia['_registry'] = this.originalRegistry as Map<string, MediaQueryList>;\n    this.originalRegistry = null;\n  }\n\n  /**\n   * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n   */\n  emitChangeEvent(matches: boolean, query: string) {\n    const source = this.matchMedia['_source'] as BehaviorSubject<MediaChange>;\n    source.next(new MediaChange(matches, query));\n  }\n\n  private get currentActivations() {\n    return this.matchMedia.activations;\n  }\n\n  private hasCachedOriginals = false;\n  private originalActivations: MediaChange[] = [];\n  private originalRegistry: Map<string, MediaQueryList> | null = null;\n\n  private resizeSubscription!: Subscription;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, Optional, PLATFORM_ID} from '@angular/core';\nimport {isPlatformBrowser, isPlatformServer} from '@angular/common';\n\nimport {applyCssPrefixes} from '../../utils/auto-prefixer';\nimport {StylesheetMap} from '../stylesheet-map/stylesheet-map';\nimport {SERVER_TOKEN} from '../tokens/server-token';\nimport {LAYOUT_CONFIG, LayoutConfigOptions} from '../tokens/library-config';\n\n@Injectable({providedIn: 'root'})\nexport class StyleUtils {\n\n  constructor(@Optional() private _serverStylesheet: StylesheetMap,\n              @Optional() @Inject(SERVER_TOKEN) private _serverModuleLoaded: boolean,\n              @Inject(PLATFORM_ID) private _platformId: Object,\n              @Inject(LAYOUT_CONFIG) private layoutConfig: LayoutConfigOptions) {}\n\n  /**\n   * Applies styles given via string pair or object map to the directive element\n   */\n  applyStyleToElement(element: HTMLElement,\n                      style: StyleDefinition | string,\n                      value: string | number | null = null) {\n    let styles: StyleDefinition = {};\n    if (typeof style === 'string') {\n      styles[style] = value;\n      style = styles;\n    }\n    styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    this._applyMultiValueStyleToElement(styles, element);\n  }\n\n  /**\n   * Applies styles given via string pair or object map to the directive's element\n   */\n  applyStyleToElements(style: StyleDefinition, elements: HTMLElement[] = []) {\n    const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    elements.forEach(el => {\n      this._applyMultiValueStyleToElement(styles, el);\n    });\n  }\n\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction)\n   *\n   * Check inline style first then check computed (stylesheet) style\n   */\n  getFlowDirection(target: HTMLElement): [string, string] {\n    const query = 'flex-direction';\n    let value = this.lookupStyle(target, query);\n    const hasInlineValue = this.lookupInlineStyle(target, query) ||\n    (isPlatformServer(this._platformId) && this._serverModuleLoaded) ? value : '';\n\n    return [value || 'row', hasInlineValue];\n  }\n\n  /**\n   * Find the DOM element's raw attribute value (if any)\n   */\n  lookupAttributeValue(element: HTMLElement, attribute: string): string {\n    return element.getAttribute(attribute) || '';\n  }\n\n  /**\n   * Find the DOM element's inline style value (if any)\n   */\n  lookupInlineStyle(element: HTMLElement, styleName: string): string {\n    return isPlatformBrowser(this._platformId) ?\n      element.style.getPropertyValue(styleName) : this._getServerStyle(element, styleName);\n  }\n\n  /**\n   * Determine the inline or inherited CSS style\n   * NOTE: platform-server has no implementation for getComputedStyle\n   */\n  lookupStyle(element: HTMLElement, styleName: string, inlineOnly = false): string {\n    let value = '';\n    if (element) {\n      let immediateValue = value = this.lookupInlineStyle(element, styleName);\n      if (!immediateValue) {\n        if (isPlatformBrowser(this._platformId)) {\n          if (!inlineOnly) {\n            value = getComputedStyle(element).getPropertyValue(styleName);\n          }\n        } else {\n          if (this._serverModuleLoaded) {\n            value = this._serverStylesheet.getStyleForElement(element, styleName);\n          }\n        }\n      }\n    }\n\n    // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n    //       in which case getComputedStyle() should determine a valid value.\n    return value.trim();\n  }\n\n  /**\n   * Applies the styles to the element. The styles object map may contain an array of values\n   * Each value will be added as element style\n   * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n   */\n  private _applyMultiValueStyleToElement(styles: StyleDefinition,\n                                         element: HTMLElement) {\n    Object.keys(styles).sort().forEach(key => {\n      const el = styles[key];\n      const values: (string | number | null)[] = Array.isArray(el) ? el : [el];\n      values.sort();\n      for (let value of values) {\n        value = value ? value + '' : '';\n        if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n          isPlatformBrowser(this._platformId) ?\n            element.style.setProperty(key, value) : this._setServerStyle(element, key, value);\n        } else {\n          this._serverStylesheet.addStyleToElement(element, key, value);\n        }\n      }\n    });\n  }\n\n  private _setServerStyle(element: any, styleName: string, styleValue?: string|null) {\n    styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    const styleMap = this._readStyleAttribute(element);\n    styleMap[styleName] = styleValue || '';\n    this._writeStyleAttribute(element, styleMap);\n  }\n\n  private _getServerStyle(element: any, styleName: string): string {\n    const styleMap = this._readStyleAttribute(element);\n    return styleMap[styleName] || '';\n  }\n\n  private _readStyleAttribute(element: any): {[name: string]: string} {\n    const styleMap: {[name: string]: string} = {};\n    const styleAttribute = element.getAttribute('style');\n    if (styleAttribute) {\n      const styleList = styleAttribute.split(/;+/g);\n      for (let i = 0; i < styleList.length; i++) {\n        const style = styleList[i].trim();\n        if (style.length > 0) {\n          const colonIndex = style.indexOf(':');\n          if (colonIndex === -1) {\n            throw new Error(`Invalid CSS style: ${style}`);\n          }\n          const name = style.substr(0, colonIndex).trim();\n          styleMap[name] = style.substr(colonIndex + 1).trim();\n        }\n      }\n    }\n    return styleMap;\n  }\n\n  private _writeStyleAttribute(element: any, styleMap: {[name: string]: string}) {\n    let styleAttrValue = '';\n    for (const key in styleMap) {\n      const newValue = styleMap[key];\n      if (newValue) {\n        styleAttrValue += key + ':' + styleMap[key] + ';';\n      }\n    }\n    element.setAttribute('style', styleAttrValue);\n  }\n}\n\n/**\n * Definition of a css style. Either a property name (e.g. \"flex-basis\") or an object\n * map of property name and value (e.g. {display: 'none', flex-order: 5})\n */\nexport type StyleDefinition = { [property: string]: string | number | null };\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {StyleDefinition} from '../style-utils/style-utils';\n\n/** A class that encapsulates CSS style generation for common directives */\nexport abstract class StyleBuilder {\n\n  /** Whether to cache the generated output styles */\n  shouldCache = true;\n\n  /** Build the styles given an input string and configuration object from a host */\n  abstract buildStyles(input: string, parent?: Object): StyleDefinition;\n\n  /**\n   * Run a side effect computation given the input string and the computed styles\n   * from the build task and the host configuration object\n   * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n   */\n  sideEffect(_input: string, _styles: StyleDefinition, _parent?: Object) {\n  }\n}\n"],"names":["watchers","Map","this","watcherMap","set","element","get","key","newSubscription","merge","apply","triggers","subscribe","currentValue","_this","getValue","updateElement","MediaMarshaller","prototype","findByQuery","query","breakpoints","getActivatedValues","bpMap","i","activatedBreakpoints","length","activatedBp","valueMap","alias","undefined","has","lastHope","observeActivations","target","queries","items","map","bp","mediaQuery","matchMedia","observe","hook","withPrintQuery","pipe","tap","interceptEvents","filter","blockPropagation","onMediaChange","bind","type","Injectable","args","providedIn","MatchMedia","BreakPointRegistry","PrintHook","__extends","d","b","__","constructor","extendStatics","Object","create","removeStyles","_document","platformId","isPlatformBrowser","classRegex_1","Array","from","querySelectorAll","CLASS_NAME","forEach","el","classList","contains","parentNode","removeChild","className","replace","mergeAlias","dest","source","clone","MediaChange","mqAlias","suffix","priority","buildLayoutCSS","value","_a","validateValue","buildCSS","toLowerCase","split","direction","wrap","inline","LAYOUT_VALUES","find","x","INLINE","validateWrapValue","display","box-sizing","flex-direction","flex-wrap","extendObject","sources","_i","arguments","TypeError","sources_1","hasOwnProperty","firstUpperCase","part","first","charAt","remainder","slice","toUpperCase","camelCase","name","ALIAS_DELIMITERS","join","validateSuffixes","list","overlapping","mergeByAlias","defaults","custom","dict","keys","k","sortDescendingPriority","a","priorityA","sortAscendingPriority","buildQueryCss","mediaQueries","it","ALL_STYLES","styleEl_1","createElement","setAttribute","styleSheet","cssText","appendChild","createTextNode","mq","e","console","error","constructMql","isBrowser","addListener","matches","media","removeListener","isPrintBreakPoint","startsWith","PRINT","toMediaQuery","locator","findByAlias","applyCssPrefixes","isNaN","validateBasis","basis","grow","shrink","parts","j","indexOf","_validateCalcValue","substring","trim","substr","calc","initBuilderMap","input","oldMap","setPrototypeOf","__proto__","p","__assign","assign","t","s","n","call","BROWSER_PROVIDER","provide","APP_BOOTSTRAP_LISTENER","useFactory","deps","DOCUMENT","PLATFORM_ID","multi","NgModule","providers","CoreModule","property","stylesheet","StylesheetMap","addStyleToElement","style","clearStyles","clear","getStyleForElement","styleName","styles","DEFAULT_CONFIG","addFlexToParent","addOrientationBps","disableDefaultBps","disableVendorPrefixes","serverLoaded","useColumnBasisZero","printWithBreakpoints","LAYOUT_CONFIG","InjectionToken","factory","SERVER_TOKEN","BREAKPOINT","BaseDirective2","elementRef","styleBuilder","styler","marshal","DIRECTIVE_KEY","inputs","mru","destroySubject","Subject","styleCache","defineProperty","nativeElement","parentElement","setValue","activatedAlias","ngOnChanges","changes","val","ngOnDestroy","next","complete","releaseElement","init","extraTriggers","updateWithValue","addStyles","parent","builder","useCache","shouldCache","genStyles","buildStyles","tslib_1.__assign","applyStyleToElement","sideEffect","triggerUpdate","getFlexFlowDirection","addIfMissing","getFlowDirection","elements","applyStyleToElements","DEFAULT_BREAKPOINTS","TABLET_LANDSCAPE","TABLET_PORTRAIT","WEB_PORTRAIT","WEB_LANDSCAPE","ScreenTypes","HANDSET","HANDSET_PORTRAIT","TABLET","WEB","HANDSET_LANDSCAPE","ORIENTATION_BREAKPOINTS","BREAKPOINTS","inject","layoutConfig","bpFlattenArray","concat","v","isArray","findByMap","sort","findWithPredicate","searchFn","response","decorators","Inject","_zone","_platformId","_source","BehaviorSubject","_registry","_observable$","asObservable","results","mql","push","isActive","mqList","filterOthers","matchMedia$","change","registration$","Observable","observer","registerQuery","lastChange","pop","onMQLEvent","run","buildMQL","NgZone","MockMatchMedia","_breakpoints","_super","autoRegisterQueries","useOverlaps","_actives","tslib_1.__extends","clearAll","destroy","activate","_validateQuery","_deactivateAll","_registerMediaQuery","_activateWithOverlaps","hasActivated","queryOrAlias","_activateByAlias","_activateByQuery","aliases","alreadyAdded","reduce","found","deactivate","MockMediaQueryList","_mediaQuery","_isActive","_listeners","onchange","callback","listener","_","addEventListener","___","removeEventListener","dispatchEvent","MockMatchMediaProvider","useClass","ServerMediaQueryList","ServerMatchMedia","activateBreakpoint","lookupBreakpoint","deactivateBreakpoint","BREAKPOINT_PRINT","isPrinting","queue","PrintQueue","deactivations","isPrintEvent","printAlias","getEventBreakpoints","printBreakPoints","updateEvent","event","startPrinting","updateStyles","stopPrinting","collectActivations","bpList","addPrintBreakpoints","printBreakpoints","addBreakpoint","MediaObserver","filterOverlaps","_media$","watchActivations","media$","buildObservable","hasChanges","isValidQuery","excludeOverlaps","debounceTime","switchMap","of","findAllActivations","mergeMQAlias","replaceWithPrintAlias","activations","MediaTrigger","hasCachedOriginals","originalActivations","originalRegistry","saveActivations","deactivateAll","setActivations","prepareAutoRestore","restore","extractQuery","restoreRegistryMatches","resizeSubscription","unsubscribe","resize$","fromEvent","window","take","currentActivations","forceRegistryMatches","simulateMediaChanges","toMediaChange","emitChangeEvent","match","registry","StyleUtils","_serverStylesheet","_serverModuleLoaded","_applyMultiValueStyleToElement","lookupStyle","hasInlineValue","lookupInlineStyle","isPlatformServer","lookupAttributeValue","attribute","getAttribute","getPropertyValue","_getServerStyle","inlineOnly","getComputedStyle","values","values_1","setProperty","_setServerStyle","styleValue","styleMap","_readStyleAttribute","_writeStyleAttribute","styleAttribute","styleList","colonIndex","Error","name_1","styleAttrValue","Optional","Boolean","StyleBuilder","_input","_styles","_parent","elementMap","elementKeyMap","WeakMap","updateMap","clearMap","subject","mc","splice","updateFn","clearFn","buildElementKeyMap","watchExtraTriggers","hasValue","trackValue","keyMap","Set","delete","clearElement","builders","add"],"mappings":"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"}