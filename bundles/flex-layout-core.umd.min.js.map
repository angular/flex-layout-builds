{"version":3,"file":"flex-layout-core.umd.min.js","sources":["../../src/lib/core/media-marshaller/media-marshaller.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/browser-provider.ts","../../src/lib/core/add-alias.ts","../../src/lib/utils/layout-validator.ts","../../src/lib/utils/object-extend.ts","../../src/lib/core/breakpoints/breakpoint-tools.ts","../../src/lib/core/utils/sort.ts","../../src/lib/core/match-media/match-media.ts","../../src/lib/core/media-marshaller/print-hook.ts","../../src/lib/core/utils/array.ts","../../src/lib/core/media-observer/media-observer.ts","../../src/lib/utils/auto-prefixer.ts","../../src/lib/core/basis-validator/basis-validator.ts","../../src/lib/core/module.ts","../../src/lib/core/media-change.ts","../../src/lib/core/stylesheet-map/stylesheet-map.ts","../../src/lib/core/tokens/library-config.ts","../../src/lib/core/tokens/server-token.ts","../../src/lib/core/tokens/breakpoint-token.ts","../../src/lib/core/base/base2.ts","../../src/lib/core/breakpoints/data/break-points.ts","../../src/lib/core/breakpoints/data/orientation-break-points.ts","../../src/lib/core/breakpoints/break-points-token.ts","../../src/lib/core/breakpoints/break-point-registry.ts","../../src/lib/core/match-media/mock/mock-match-media.ts","../../src/lib/core/media-trigger/media-trigger.ts","../../src/lib/core/style-utils/style-utils.ts","../../src/lib/core/style-builder/style-builder.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\n\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {filter, tap} from 'rxjs/operators';\n\nimport {BreakPoint} from '../breakpoints/break-point';\nimport {sortDescendingPriority} from '../utils/sort';\nimport {BreakPointRegistry} from '../breakpoints/break-point-registry';\nimport {MatchMedia} from '../match-media/match-media';\nimport {MediaChange} from '../media-change';\n\nimport {PrintHook, HookTarget} from './print-hook';\nimport {mergeAlias} from '../add-alias';\n\ntype ClearCallback = () => void;\ntype UpdateCallback = (val: any) => void;\ntype Builder = UpdateCallback | ClearCallback;\n\ntype ValueMap = Map<string, string>;\ntype BreakpointMap = Map<string, ValueMap>;\ntype ElementMap = Map<HTMLElement, BreakpointMap>;\ntype ElementKeyMap = WeakMap<HTMLElement, Set<string>>;\ntype SubscriptionMap = Map<string, Subscription>;\ntype WatcherMap = WeakMap<HTMLElement, SubscriptionMap>;\ntype BuilderMap = WeakMap<HTMLElement, Map<string, Builder>>;\n\nexport interface ElementMatcher {\n  element: HTMLElement;\n  key: string;\n  value: any;\n}\n\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\n@Injectable({providedIn: 'root'})\nexport class MediaMarshaller {\n  private activatedBreakpoints: BreakPoint[] = [];\n  private elementMap: ElementMap = new Map();\n  private elementKeyMap: ElementKeyMap = new WeakMap();\n  private watcherMap: WatcherMap = new WeakMap();     // special triggers to update elements\n  private updateMap: BuilderMap = new WeakMap();      // callback functions to update styles\n  private clearMap: BuilderMap = new WeakMap();       // callback functions to clear styles\n\n  private subject: Subject<ElementMatcher> = new Subject();\n\n  get activatedAlias(): string {\n    return this.activatedBreakpoints[0] ? this.activatedBreakpoints[0].alias : '';\n  }\n\n  constructor(protected matchMedia: MatchMedia,\n              protected breakpoints: BreakPointRegistry,\n              protected hook: PrintHook) {\n    this.observeActivations();\n  }\n\n  /**\n   * Update styles on breakpoint activates or deactivates\n   * @param mc\n   */\n  onMediaChange(mc: MediaChange) {\n    const bp: BreakPoint | null = this.findByQuery(mc.mediaQuery);\n    if (bp) {\n      mc = mergeAlias(mc, bp);\n\n      if (mc.matches && this.activatedBreakpoints.indexOf(bp) === -1) {\n        this.activatedBreakpoints.push(bp);\n        this.activatedBreakpoints.sort(sortDescendingPriority);\n\n        this.updateStyles();\n\n      } else if (!mc.matches && this.activatedBreakpoints.indexOf(bp) !== -1) {\n        // Remove the breakpoint when it's deactivated\n        this.activatedBreakpoints.splice(this.activatedBreakpoints.indexOf(bp), 1);\n        this.activatedBreakpoints.sort(sortDescendingPriority);\n\n        this.updateStyles();\n      }\n    }\n  }\n\n  /**\n   * initialize the marshaller with necessary elements for delegation on an element\n   * @param element\n   * @param key\n   * @param updateFn optional callback so that custom bp directives don't have to re-provide this\n   * @param clearFn optional callback so that custom bp directives don't have to re-provide this\n   * @param extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n   */\n  init(element: HTMLElement,\n       key: string,\n       updateFn?: UpdateCallback,\n       clearFn?: ClearCallback,\n       extraTriggers: Observable<any>[] = []): void {\n\n    initBuilderMap(this.updateMap, element, key, updateFn);\n    initBuilderMap(this.clearMap, element, key, clearFn);\n\n    this.buildElementKeyMap(element, key);\n    this.watchExtraTriggers(element, key, extraTriggers);\n  }\n\n  /**\n   * get the value for an element and key and optionally a given breakpoint\n   * @param element\n   * @param key\n   * @param bp\n   */\n  getValue(element: HTMLElement, key: string, bp?: string): any {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n      if (values) {\n        return values.get(key);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * whether the element has values for a given key\n   * @param element\n   * @param key\n   */\n  hasValue(element: HTMLElement, key: string): boolean {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const values = this.getActivatedValues(bpMap, key);\n      if (values) {\n        return values.get(key) !== undefined || false;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set the value for an input on a directive\n   * @param element the element in question\n   * @param key the type of the directive (e.g. flex, layout-gap, etc)\n   * @param bp the breakpoint suffix (empty string = default)\n   * @param val the value for the breakpoint\n   */\n  setValue(element: HTMLElement, key: string, val: any, bp: string): void {\n    let bpMap: BreakpointMap | undefined = this.elementMap.get(element);\n    if (!bpMap) {\n      bpMap = new Map().set(bp, new Map().set(key, val));\n      this.elementMap.set(element, bpMap);\n    } else {\n      const values = (bpMap.get(bp) || new Map()).set(key, val);\n      bpMap.set(bp, values);\n      this.elementMap.set(element, bpMap);\n    }\n    const value = this.getValue(element, key);\n    if (value !== undefined) {\n      this.updateElement(element, key, value);\n    }\n  }\n\n  /** Track element value changes for a specific key */\n  trackValue(element: HTMLElement, key: string): Observable<ElementMatcher> {\n    return this.subject\n        .asObservable()\n        .pipe(filter(v => v.element === element && v.key === key));\n  }\n\n  /** update all styles for all elements on the current breakpoint */\n  updateStyles(): void {\n    this.elementMap.forEach((bpMap, el) => {\n      const keyMap = new Set(this.elementKeyMap.get(el)!);\n      let valueMap = this.getActivatedValues(bpMap);\n\n      if (valueMap) {\n        valueMap.forEach((v, k) => {\n          this.updateElement(el, k, v);\n          keyMap.delete(k);\n        });\n      }\n\n      keyMap.forEach(k => {\n        valueMap = this.getActivatedValues(bpMap, k);\n        if (valueMap) {\n          const value = valueMap.get(k);\n          this.updateElement(el, k, value);\n        } else {\n          this.clearElement(el, k);\n        }\n      });\n\n    });\n  }\n\n  /**\n   * clear the styles for a given element\n   * @param element\n   * @param key\n   */\n  clearElement(element: HTMLElement, key: string): void {\n    const builders = this.clearMap.get(element);\n    if (builders) {\n      const clearFn: ClearCallback = builders.get(key) as ClearCallback;\n      if (!!clearFn) {\n        clearFn();\n        this.subject.next({element, key, value: ''});\n      }\n    }\n  }\n\n  /**\n   * update a given element with the activated values for a given key\n   * @param element\n   * @param key\n   * @param value\n   */\n  updateElement(element: HTMLElement, key: string, value: any): void {\n    const builders = this.updateMap.get(element);\n    if (builders) {\n      const updateFn: UpdateCallback = builders.get(key) as UpdateCallback;\n      if (!!updateFn) {\n        updateFn(value);\n        this.subject.next({element, key, value});\n      }\n    }\n  }\n\n  /**\n   * release all references to a given element\n   * @param element\n   */\n  releaseElement(element: HTMLElement): void {\n    const watcherMap = this.watcherMap.get(element);\n    if (watcherMap) {\n      watcherMap.forEach(s => s.unsubscribe());\n      this.watcherMap.delete(element);\n    }\n    const elementMap = this.elementMap.get(element);\n    if (elementMap) {\n      elementMap.forEach((_, s) => elementMap.delete(s));\n      this.elementMap.delete(element);\n    }\n  }\n\n  /**\n   * trigger an update for a given element and key (e.g. layout)\n   * @param element\n   * @param key\n   */\n  triggerUpdate(element: HTMLElement, key?: string): void {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const valueMap = this.getActivatedValues(bpMap, key);\n      if (valueMap) {\n        if (key) {\n          this.updateElement(element, key, valueMap.get(key));\n        } else {\n          valueMap.forEach((v, k) => this.updateElement(element, k, v));\n        }\n      }\n    }\n  }\n\n  /** Cross-reference for HTMLElement with directive key */\n  private buildElementKeyMap(element: HTMLElement, key: string) {\n    let keyMap = this.elementKeyMap.get(element);\n    if (!keyMap) {\n      keyMap = new Set();\n      this.elementKeyMap.set(element, keyMap);\n    }\n    keyMap.add(key);\n  }\n\n  /**\n   * Other triggers that should force style updates:\n   * - directionality\n   * - layout changes\n   * - mutationobserver updates\n   */\n  private watchExtraTriggers(element: HTMLElement,\n                             key: string,\n                             triggers: Observable<any>[]) {\n    if (triggers && triggers.length) {\n      let watchers = this.watcherMap.get(element);\n      if (!watchers) {\n        watchers = new Map();\n        this.watcherMap.set(element, watchers);\n      }\n      const subscription = watchers.get(key);\n      if (!subscription) {\n        const newSubscription = merge(...triggers).subscribe(() => {\n          const currentValue = this.getValue(element, key);\n          this.updateElement(element, key, currentValue);\n        });\n        watchers.set(key, newSubscription);\n      }\n    }\n  }\n\n  /** Breakpoint locator by mediaQuery */\n  private findByQuery(query: string) {\n    return this.breakpoints.findByQuery(query);\n  }\n\n  /**\n   * get the fallback breakpoint for a given element, starting with the current breakpoint\n   * @param bpMap\n   * @param key\n   */\n  private getActivatedValues(bpMap: BreakpointMap, key?: string): ValueMap | undefined {\n    for (let i = 0; i < this.activatedBreakpoints.length; i++) {\n      const activatedBp = this.activatedBreakpoints[i];\n      const valueMap = bpMap.get(activatedBp.alias);\n      if (valueMap) {\n        if (key === undefined || valueMap.has(key)) {\n          return valueMap;\n        }\n      }\n    }\n    const lastHope = bpMap.get('');\n    return (key === undefined || lastHope && lastHope.has(key)) ? lastHope : undefined;\n  }\n\n  /**\n   * Watch for mediaQuery breakpoint activations\n   */\n  private observeActivations() {\n    const target = this as unknown as HookTarget;\n    const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n\n    this.matchMedia\n        .observe(this.hook.withPrintQuery(queries))\n        .pipe(\n            tap(this.hook.interceptEvents(target)),\n            filter(this.hook.blockPropagation())\n        )\n        .subscribe(this.onMediaChange.bind(this));\n  }\n\n}\n\nfunction initBuilderMap(map: BuilderMap,\n                        element: HTMLElement,\n                        key: string,\n                        input?: UpdateCallback | ClearCallback): void {\n  if (input !== undefined) {\n    let oldMap = map.get(element);\n    if (!oldMap) {\n      oldMap = new Map();\n      map.set(element, oldMap);\n    }\n    oldMap.set(key, input);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {APP_BOOTSTRAP_LISTENER, PLATFORM_ID, InjectionToken} from '@angular/core';\nimport {DOCUMENT, isPlatformBrowser} from '@angular/common';\n\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n */\nexport function removeStyles(_document: Document, platformId: Object) {\n  return () => {\n    if (isPlatformBrowser(platformId)) {\n      const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n\n      // RegExp constructor should only be used if passing a variable to the constructor.\n      // When using static regular expression it is more performant to use reg exp literal.\n      // This is also needed to provide Safari 9 compatibility, please see\n      // https://stackoverflow.com/questions/37919802 for more discussion.\n      const classRegex = /\\bflex-layout-.+?\\b/g;\n      elements.forEach(el => {\n        el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ?\n          el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n      });\n    }\n  };\n}\n\n/**\n *  Provider to remove SSR styles on the browser\n */\nexport const BROWSER_PROVIDER = {\n  provide: <InjectionToken<(() => void)[]>>APP_BOOTSTRAP_LISTENER,\n  useFactory: removeStyles,\n  deps: [DOCUMENT, PLATFORM_ID],\n  multi: true\n};\n\nexport const CLASS_NAME = 'flex-layout-';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {MediaChange} from './media-change';\nimport {BreakPoint} from './breakpoints/break-point';\n\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n */\nexport function mergeAlias(dest: MediaChange, source: BreakPoint | null): MediaChange {\n  dest = dest ? dest.clone() : new MediaChange();\n  if (source) {\n    dest.mqAlias = source.alias;\n    dest.mediaQuery = source.mediaQuery;\n    dest.suffix = source.suffix as string;\n    dest.priority = source.priority as number;\n  }\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport const INLINE = 'inline';\nexport const LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n */\nexport function buildLayoutCSS(value: string) {\n  let [direction, wrap, isInline] = validateValue(value);\n  return buildCSS(direction, wrap, isInline);\n }\n\n/**\n  * Validate the value to be one of the acceptable value options\n  * Use default fallback of 'row'\n  */\nexport function validateValue(value: string): [string, string, boolean] {\n  value = value ? value.toLowerCase() : '';\n  let [direction, wrap, inline] = value.split(' ');\n\n  // First value must be the `flex-direction`\n  if (!LAYOUT_VALUES.find(x => x === direction)) {\n    direction = LAYOUT_VALUES[0];\n  }\n\n  if (wrap === INLINE) {\n    wrap = (inline !== INLINE) ? inline : '';\n    inline = INLINE;\n  }\n\n  return [direction, validateWrapValue(wrap), !!inline];\n}\n\n/**\n * Determine if the validated, flex-direction value specifies\n * a horizontal/row flow.\n */\nexport function isFlowHorizontal(value: string): boolean {\n  let [flow, ] = validateValue(value);\n  return flow.indexOf('row') > -1;\n}\n\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n */\nexport function validateWrapValue(value: string) {\n  if (!!value) {\n    switch (value.toLowerCase()) {\n      case 'reverse':\n      case 'wrap-reverse':\n      case 'reverse-wrap':\n        value = 'wrap-reverse';\n        break;\n\n      case 'no':\n      case 'none':\n      case 'nowrap':\n        value = 'nowrap';\n        break;\n\n      // All other values fallback to 'wrap'\n      default:\n        value = 'wrap';\n        break;\n    }\n  }\n  return value;\n}\n\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n */\nfunction buildCSS(direction: string, wrap: string | null = null, inline = false) {\n  return {\n    'display': inline ? 'inline-flex' : 'flex',\n    'box-sizing': 'border-box',\n    'flex-direction': direction,\n    'flex-wrap': !!wrap ? wrap : null\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param dest The object which will have properties copied to it.\n * @param sources The source objects from which properties will be copied.\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let source of sources) {\n    if (source != null) {\n      for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {BreakPoint} from './break-point';\nimport {extendObject} from '../../utils/object-extend';\n\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\nfunction firstUpperCase(part: string) {\n  let first = part.length > 0 ? part.charAt(0) : '';\n  let remainder = (part.length > 1) ? part.slice(1) : '';\n  return first.toUpperCase() + remainder;\n}\n\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\nfunction camelCase(name: string): string {\n  return name\n      .replace(ALIAS_DELIMITERS, '|')\n      .split('|')\n      .map(firstUpperCase)\n      .join('');\n}\n\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\nexport function validateSuffixes(list: BreakPoint[]): BreakPoint[] {\n  list.forEach((bp: BreakPoint) => {\n    if (!bp.suffix) {\n      bp.suffix = camelCase(bp.alias);   // create Suffix value based on alias\n      bp.overlapping = !!bp.overlapping; // ensure default value\n    }\n  });\n  return list;\n}\n\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\nexport function mergeByAlias(defaults: BreakPoint[], custom: BreakPoint[] = []): BreakPoint[] {\n  const dict: {[key: string]: BreakPoint} = {};\n  defaults.forEach(bp => {\n    dict[bp.alias] = bp;\n  });\n  // Merge custom breakpoints\n  custom.forEach((bp: BreakPoint) => {\n    if (dict[bp.alias]) {\n      extendObject(dict[bp.alias], bp);\n    } else {\n      dict[bp.alias] = bp;\n    }\n  });\n\n  return validateSuffixes(Object.keys(dict).map(k => dict[k]));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface WithPriority {\n  priority?: number;\n}\n\n/** HOF to sort the breakpoints by descending priority */\nexport function sortDescendingPriority<T extends WithPriority>(a: T | null, b: T | null): number {\n  const priorityA = a ? a.priority || 0 : 0;\n  const priorityB = b ? b.priority || 0 : 0;\n  return priorityB - priorityA;\n}\n\n/** HOF to sort the breakpoints by ascending priority */\nexport function sortAscendingPriority<T extends WithPriority>(a: T, b: T): number {\n  const pA = a.priority || 0;\n  const pB = b.priority || 0;\n  return pA - pB;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, NgZone, PLATFORM_ID} from '@angular/core';\nimport {DOCUMENT, isPlatformBrowser} from '@angular/common';\nimport {BehaviorSubject, Observable, merge, Observer} from 'rxjs';\nimport {filter} from 'rxjs/operators';\n\nimport {MediaChange} from '../media-change';\n\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\n@Injectable({providedIn: 'root'})\nexport class MatchMedia {\n  /** Initialize source with 'all' so all non-responsive APIs trigger style updates */\n  readonly source = new BehaviorSubject<MediaChange>(new MediaChange(true));\n  registry = new Map<string, MediaQueryList>();\n\n  constructor(protected _zone: NgZone,\n              @Inject(PLATFORM_ID) protected _platformId: Object,\n              @Inject(DOCUMENT) protected _document: any) {\n  }\n\n  /**\n   * Publish list of all current activations\n   */\n  get activations(): string[] {\n    const results: string[] = [];\n    this.registry.forEach((mql: MediaQueryList, key: string) => {\n      if (mql.matches) {\n        results.push(key);\n      }\n    });\n    return results;\n  }\n\n  /**\n   * For the specified mediaQuery?\n   */\n  isActive(mediaQuery: string): boolean {\n    const mql = this.registry.get(mediaQuery);\n    return !!mql ? mql.matches : false;\n  }\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   *\n   * If a mediaQuery is not specified, then ALL mediaQuery activations will\n   * be announced.\n   */\n  observe(): Observable<MediaChange>;\n  observe(mediaQueries: string[]): Observable<MediaChange>;\n  observe(mediaQueries: string[], filterOthers: boolean): Observable<MediaChange>;\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * Typically used by the MediaQueryAdaptor; optionally available to components\n   * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n   *\n   * Use deferred registration process to register breakpoints only on subscription\n   * This logic also enforces logic to register all mediaQueries BEFORE notify\n   * subscribers of notifications.\n   */\n  observe(mqList?: string[], filterOthers = false): Observable<MediaChange> {\n    if (mqList && mqList.length) {\n      const matchMedia$: Observable<MediaChange> = this._observable$.pipe(\n          filter((change: MediaChange) => {\n            return !filterOthers ? true : (mqList.indexOf(change.mediaQuery) > -1);\n          })\n      );\n      const registration$: Observable<MediaChange> = new Observable((observer: Observer<MediaChange>) => {  // tslint:disable-line:max-line-length\n        const matches: Array<MediaChange> = this.registerQuery(mqList);\n        if (matches.length) {\n          const lastChange = matches.pop()!;\n          matches.forEach((e: MediaChange) => {\n            observer.next(e);\n          });\n          this.source.next(lastChange); // last match is cached\n        }\n        observer.complete();\n      });\n      return merge(registration$, matchMedia$);\n    }\n\n    return this._observable$;\n  }\n\n  /**\n   * Based on the BreakPointRegistry provider, register internal listeners for each unique\n   * mediaQuery. Each listener emits specific MediaChange data to observers\n   */\n  registerQuery(mediaQuery: string | string[]) {\n    const list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n    const matches: MediaChange[] = [];\n\n    buildQueryCss(list, this._document);\n\n    list.forEach((query: string) => {\n      const onMQLEvent = (e: MediaQueryListEvent) => {\n        this._zone.run(() => this.source.next(new MediaChange(e.matches, query)));\n      };\n\n      let mql = this.registry.get(query);\n      if (!mql) {\n        mql = this.buildMQL(query);\n        mql.addListener(onMQLEvent);\n        this.registry.set(query, mql);\n      }\n\n      if (mql.matches) {\n        matches.push(new MediaChange(true, query));\n      }\n    });\n\n    return matches;\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected buildMQL(query: string): MediaQueryList {\n    return constructMql(query, isPlatformBrowser(this._platformId));\n  }\n\n  protected _observable$ = this.source.asObservable();\n}\n\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES: { [key: string]: any } = {};\n\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param mediaQueries\n * @param _document\n */\nfunction buildQueryCss(mediaQueries: string[], _document: Document) {\n  const list = mediaQueries.filter(it => !ALL_STYLES[it]);\n  if (list.length > 0) {\n    const query = list.join(', ');\n\n    try {\n      const styleEl = _document.createElement('style');\n\n      styleEl.setAttribute('type', 'text/css');\n      if (!(styleEl as any).styleSheet) {\n        const cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n        styleEl.appendChild(_document.createTextNode(cssText));\n      }\n\n      _document.head!.appendChild(styleEl);\n\n      // Store in private global registry\n      list.forEach(mq => ALL_STYLES[mq] = styleEl);\n\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nfunction constructMql(query: string, isBrowser: boolean): MediaQueryList {\n  const canListen = isBrowser && !!(<Window>window).matchMedia('all').addListener;\n\n  return canListen ? (<Window>window).matchMedia(query) : {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {\n    },\n    removeListener: () => {\n    }\n  } as unknown as MediaQueryList;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\n\nimport {mergeAlias} from '../add-alias';\nimport {MediaChange} from '../media-change';\nimport {BreakPoint} from '../breakpoints/break-point';\nimport {LAYOUT_CONFIG, LayoutConfigOptions} from '../tokens/library-config';\nimport {BreakPointRegistry, OptionalBreakPoint} from '../breakpoints/break-point-registry';\nimport {sortDescendingPriority} from '../utils/sort';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Interface to apply PrintHook to call anonymous `target.updateStyles()`\n */\nexport interface HookTarget {\n  activatedBreakpoints: BreakPoint[];\n  updateStyles(): void;\n}\n\nconst PRINT = 'print';\nexport const BREAKPOINT_PRINT = {\n  alias: PRINT,\n  mediaQuery: PRINT,\n  priority: 1000\n};\n\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\n@Injectable({providedIn: 'root'})\nexport class PrintHook implements OnDestroy {\n  constructor(\n      protected breakpoints: BreakPointRegistry,\n      @Inject(LAYOUT_CONFIG) protected layoutConfig: LayoutConfigOptions,\n      @Inject(DOCUMENT) protected _document: any) {\n  }\n\n  /** Add 'print' mediaQuery: to listen for matchMedia activations */\n  withPrintQuery(queries: string[]): string[] {\n    return [...queries, PRINT];\n  }\n\n  /** Is the MediaChange event for any 'print' @media */\n  isPrintEvent(e: MediaChange): Boolean {\n    return e.mediaQuery.startsWith(PRINT);\n  }\n\n  /** What is the desired mqAlias to use while printing? */\n  get printAlias(): string[] {\n    return this.layoutConfig.printWithBreakpoints || [];\n  }\n\n  /** Lookup breakpoints associated with print aliases. */\n  get printBreakPoints(): BreakPoint[] {\n    return this.printAlias\n        .map(alias => this.breakpoints.findByAlias(alias))\n        .filter(bp => bp !== null) as BreakPoint[];\n  }\n\n  /** Lookup breakpoint associated with mediaQuery */\n  getEventBreakpoints({mediaQuery}: MediaChange): BreakPoint[] {\n    const bp = this.breakpoints.findByQuery(mediaQuery);\n    const list = bp ? [...this.printBreakPoints, bp] : this.printBreakPoints;\n\n    return list.sort(sortDescendingPriority);\n  }\n\n  /** Update event with printAlias mediaQuery information */\n  updateEvent(event: MediaChange): MediaChange {\n    let bp: OptionalBreakPoint = this.breakpoints.findByQuery(event.mediaQuery);\n    if (this.isPrintEvent(event)) {\n      // Reset from 'print' to first (highest priority) print breakpoint\n      bp = this.getEventBreakpoints(event)[0];\n      event.mediaQuery = bp ? bp.mediaQuery : '';\n    }\n    return mergeAlias(event, bp);\n  }\n\n\n  // registeredBeforeAfterPrintHooks tracks if we registered the `beforeprint`\n  //  and `afterprint` event listeners.\n  private registeredBeforeAfterPrintHooks: boolean = false;\n\n  // isPrintingBeforeAfterEvent is used to track if we are printing from within\n  // a `beforeprint` event handler. This prevents the typicall `stopPrinting`\n  // form `interceptEvents` so that printing is not stopped while the dialog\n  // is still open. This is an extension of the `isPrinting` property on\n  // browsers which support `beforeprint` and `afterprint` events.\n  private isPrintingBeforeAfterEvent: boolean = false;\n\n  private beforePrintEventListeners: Function[] = [];\n  private afterPrintEventListeners: Function[] = [];\n\n  // registerBeforeAfterPrintHooks registers a `beforeprint` event hook so we can\n  // trigger print styles synchronously and apply proper layout styles.\n  // It is a noop if the hooks have already been registered or if the document's\n  // `defaultView` is not available.\n  private registerBeforeAfterPrintHooks(target: HookTarget) {\n    // `defaultView` may be null when rendering on the server or in other contexts.\n    if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) {\n      return;\n    }\n\n    this.registeredBeforeAfterPrintHooks = true;\n\n    const beforePrintListener = () => {\n      // If we aren't already printing, start printing and update the styles as\n      // if there was a regular print `MediaChange`(from matchMedia).\n      if (!this.isPrinting) {\n        this.isPrintingBeforeAfterEvent = true;\n        this.startPrinting(target, this.getEventBreakpoints(new MediaChange(true, PRINT)));\n        target.updateStyles();\n      }\n    };\n\n    const afterPrintListener = () => {\n      // If we aren't already printing, start printing and update the styles as\n      // if there was a regular print `MediaChange`(from matchMedia).\n      this.isPrintingBeforeAfterEvent = false;\n      if (this.isPrinting) {\n        this.stopPrinting(target);\n        target.updateStyles();\n      }\n    };\n\n    // Could we have teardown logic to remove if there are no print listeners being used?\n    this._document.defaultView.addEventListener('beforeprint', beforePrintListener);\n    this._document.defaultView.addEventListener('afterprint', afterPrintListener);\n\n    this.beforePrintEventListeners.push(beforePrintListener);\n    this.afterPrintEventListeners.push(afterPrintListener);\n  }\n\n  /**\n   * Prepare RxJS filter operator with partial application\n   * @return pipeable filter predicate\n   */\n  interceptEvents(target: HookTarget) {\n    this.registerBeforeAfterPrintHooks(target);\n\n    return (event: MediaChange) => {\n      if (this.isPrintEvent(event)) {\n        if (event.matches && !this.isPrinting) {\n          this.startPrinting(target, this.getEventBreakpoints(event));\n          target.updateStyles();\n\n        } else if (!event.matches && this.isPrinting && !this.isPrintingBeforeAfterEvent) {\n          this.stopPrinting(target);\n          target.updateStyles();\n        }\n      } else {\n        this.collectActivations(event);\n      }\n    };\n  }\n\n  /** Stop mediaChange event propagation in event streams */\n  blockPropagation() {\n    return (event: MediaChange): boolean => {\n      return !(this.isPrinting || this.isPrintEvent(event));\n    };\n  }\n\n  /**\n   * Save current activateBreakpoints (for later restore)\n   * and substitute only the printAlias breakpoint\n   */\n  protected startPrinting(target: HookTarget, bpList: OptionalBreakPoint[]) {\n    this.isPrinting = true;\n    target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n  }\n\n  /** For any print de-activations, reset the entire print queue */\n  protected stopPrinting(target: HookTarget) {\n    target.activatedBreakpoints = this.deactivations;\n    this.deactivations = [];\n    this.queue.clear();\n    this.isPrinting = false;\n  }\n\n  /**\n   * To restore pre-Print Activations, we must capture the proper\n   * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n   * is supported; so 'print' mediaQuery activations are used as a fallback\n   * in browsers without `beforeprint` support.\n   *\n   * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n   *\n   * Let's capture all de-activations using the following logic:\n   *\n   *  When not printing:\n   *    - clear cache when activating non-print breakpoint\n   *    - update cache (and sort) when deactivating\n   *\n   *  When printing:\n   *    - sort and save when starting print\n   *    - restore as activatedTargets and clear when stop printing\n   */\n  collectActivations(event: MediaChange) {\n    if (!this.isPrinting || this.isPrintingBeforeAfterEvent) {\n      if (!event.matches) {\n        const bp = this.breakpoints.findByQuery(event.mediaQuery);\n        if (bp) {   // Deactivating a breakpoint\n          this.deactivations.push(bp);\n          this.deactivations.sort(sortDescendingPriority);\n        }\n      } else if (!this.isPrintingBeforeAfterEvent) {\n        // Only clear deactivations if we aren't printing from a `beforeprint` event.\n        // Otherwise this will clear before `stopPrinting()` is called to restore\n        // the pre-Print Activations.\n        this.deactivations = [];\n      }\n    }\n  }\n\n  /** Teardown logic for the service. */\n  ngOnDestroy() {\n    this.beforePrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('beforeprint', l));\n    this.afterPrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('afterprint', l));\n  }\n\n  /** Is this service currently in Print-mode ? */\n  private isPrinting = false;\n  private queue: PrintQueue = new PrintQueue();\n  private deactivations: BreakPoint[] = [];\n\n}\n\n// ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\nclass PrintQueue {\n  /** Sorted queue with prioritized print breakpoints */\n  printBreakpoints: BreakPoint[] = [];\n\n  addPrintBreakpoints(bpList: OptionalBreakPoint[]): BreakPoint[] {\n    bpList.push(BREAKPOINT_PRINT);\n    bpList.sort(sortDescendingPriority);\n    bpList.forEach(bp => this.addBreakpoint(bp));\n\n    return this.printBreakpoints;\n  }\n\n  /** Add Print breakpoint to queue */\n  addBreakpoint(bp: OptionalBreakPoint) {\n    if (!!bp) {\n      const bpInList = this.printBreakpoints.find(it => it.mediaQuery === bp.mediaQuery);\n      if (bpInList === undefined) {\n        // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n        // register as highest priority in the queue\n        this.printBreakpoints = isPrintBreakPoint(bp) ? [bp, ...this.printBreakpoints]\n            : [...this.printBreakpoints, bp];\n      }\n    }\n  }\n\n  /** Restore original activated breakpoints and clear internal caches */\n  clear() {\n    this.printBreakpoints = [];\n  }\n}\n\n// ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n\n/** Only support intercept queueing if the Breakpoint is a print @media query */\nfunction isPrintBreakPoint(bp: OptionalBreakPoint) {\n  return bp ? bp.mediaQuery.startsWith(PRINT) : false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Wraps the provided value in an array, unless the provided value is an array. */\nexport function coerceArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable, OnDestroy} from '@angular/core';\nimport {Subject, asapScheduler, Observable, of} from 'rxjs';\nimport {debounceTime, filter, map, switchMap, takeUntil} from 'rxjs/operators';\n\nimport {mergeAlias} from '../add-alias';\nimport {MediaChange} from '../media-change';\nimport {MatchMedia} from '../match-media/match-media';\nimport {PrintHook} from '../media-marshaller/print-hook';\nimport {BreakPointRegistry, OptionalBreakPoint} from '../breakpoints/break-point-registry';\n\nimport {sortDescendingPriority} from '../utils/sort';\nimport {coerceArray} from '../utils/array';\n\n\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n *  @usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '@angular/flex-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\n@Injectable({providedIn: 'root'})\nexport class MediaObserver implements OnDestroy {\n\n  /**\n   * @deprecated Use `asObservable()` instead.\n   * @breaking-change 8.0.0-beta.25\n   * @deletion-target 10.0.0\n   */\n  readonly media$: Observable<MediaChange>;\n\n  /** Filter MediaChange notifications for overlapping breakpoints */\n  filterOverlaps = false;\n\n  constructor(protected breakpoints: BreakPointRegistry,\n              protected matchMedia: MatchMedia,\n              protected hook: PrintHook) {\n    this._media$ = this.watchActivations();\n    this.media$ = this._media$.pipe(\n      filter((changes: MediaChange[]) => changes.length > 0),\n      map((changes: MediaChange[]) => changes[0])\n    );\n  }\n\n  /**\n   * Completes the active subject, signalling to all complete for all\n   * MediaObserver subscribers\n   */\n  ngOnDestroy(): void {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  // ************************************************\n  // Public Methods\n  // ************************************************\n\n  /**\n   * Observe changes to current activation 'list'\n   */\n  asObservable(): Observable<MediaChange[]> {\n    return this._media$;\n  }\n\n  /**\n   * Allow programmatic query to determine if one or more media query/alias match\n   * the current viewport size.\n   * @param value One or more media queries (or aliases) to check.\n   * @returns Whether any of the media queries match.\n   */\n  isActive(value: string | string[]): boolean {\n    const aliases = splitQueries(coerceArray(value));\n    return aliases.some(alias => {\n      const query = toMediaQuery(alias, this.breakpoints);\n      return this.matchMedia.isActive(query);\n    });\n  }\n\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n\n  /**\n   * Register all the mediaQueries registered in the BreakPointRegistry\n   * This is needed so subscribers can be auto-notified of all standard, registered\n   * mediaQuery activations\n   */\n  private watchActivations() {\n    const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n    return this.buildObservable(queries);\n  }\n\n  /**\n   * Only pass/announce activations (not de-activations)\n   *\n   * Since multiple-mediaQueries can be activation in a cycle,\n   * gather all current activations into a single list of changes to observers\n   *\n   * Inject associated (if any) alias information into the MediaChange event\n   * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n   * - Exclude print activations that do not have an associated mediaQuery\n   *\n   * NOTE: the raw MediaChange events [from MatchMedia] do not\n   *       contain important alias information; as such this info\n   *       must be injected into the MediaChange\n   */\n  private buildObservable(mqList: string[]): Observable<MediaChange[]> {\n    const hasChanges = (changes: MediaChange[]) => {\n      const isValidQuery = (change: MediaChange) => (change.mediaQuery.length > 0);\n      return (changes.filter(isValidQuery).length > 0);\n    };\n    const excludeOverlaps = (changes: MediaChange[]) => {\n      return !this.filterOverlaps ? changes : changes.filter(change => {\n        const bp = this.breakpoints.findByQuery(change.mediaQuery);\n        return !bp ? true : !bp.overlapping;\n      });\n    };\n\n    /**\n     */\n    return this.matchMedia\n        .observe(this.hook.withPrintQuery(mqList))\n        .pipe(\n            filter((change: MediaChange) => change.matches),\n            debounceTime(0, asapScheduler),\n            switchMap(_ => of(this.findAllActivations())),\n            map(excludeOverlaps),\n            filter(hasChanges),\n            takeUntil(this.destroyed$)\n        );\n  }\n\n  /**\n   * Find all current activations and prepare single list of activations\n   * sorted by descending priority.\n   */\n  private findAllActivations(): MediaChange[] {\n    const mergeMQAlias = (change: MediaChange) => {\n      let bp: OptionalBreakPoint = this.breakpoints.findByQuery(change.mediaQuery);\n      return mergeAlias(change, bp);\n    };\n    const replaceWithPrintAlias = (change: MediaChange) => {\n      return this.hook.isPrintEvent(change) ? this.hook.updateEvent(change) : change;\n    };\n\n    return this.matchMedia\n        .activations\n        .map(query => new MediaChange(true, query))\n        .map(replaceWithPrintAlias)\n        .map(mergeMQAlias)\n        .sort(sortDescendingPriority);\n  }\n\n  private readonly _media$: Observable<MediaChange[]>;\n  private readonly destroyed$ = new Subject<void>();\n}\n\n/**\n * Find associated breakpoint (if any)\n */\nfunction toMediaQuery(query: string, locator: BreakPointRegistry) {\n  const bp = locator.findByAlias(query) || locator.findByQuery(query);\n  return bp ? bp.mediaQuery : query;\n}\n\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries: string[]): string[] {\n  return queries.map((query: string) => query.split(','))\n                .reduce((a1: string[], a2: string[]) => a1.concat(a2))\n                .map(query => query.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n */\nexport function applyCssPrefixes(target: {[key: string]: any | null}) {\n  for (let key in target) {\n    let value = target[key] || '';\n\n    switch (key) {\n      case 'display':\n        if (value === 'flex') {\n          target['display'] = [\n            '-webkit-flex',\n            'flex'\n          ];\n        } else if (value === 'inline-flex') {\n          target['display'] = [\n            '-webkit-inline-flex',\n            'inline-flex'\n          ];\n        } else {\n          target['display'] = value;\n        }\n        break;\n\n      case 'align-items':\n      case 'align-self':\n      case 'align-content':\n      case 'flex':\n      case 'flex-basis':\n      case 'flex-flow':\n      case 'flex-grow':\n      case 'flex-shrink':\n      case 'flex-wrap':\n      case 'justify-content':\n        target['-webkit-' + key] = value;\n        break;\n\n      case 'flex-direction':\n        value = value || 'row';\n        target['-webkit-flex-direction'] = value;\n        target['flex-direction'] = value;\n        break;\n\n      case 'order':\n        target['order'] = target['-webkit-' + key] = isNaN(+value) ? '0' : value;\n        break;\n    }\n  }\n  return target;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n /**\n * The flex API permits 3 or 1 parts of the value:\n *    - `flex-grow flex-shrink flex-basis`, or\n *    - `flex-basis`\n */\nexport function validateBasis(basis: string, grow = '1', shrink = '1'): string[] {\n  let parts = [grow, shrink, basis];\n\n  let j = basis.indexOf('calc');\n  if (j > 0) {\n    parts[2] = _validateCalcValue(basis.substring(j).trim());\n    let matches = basis.substr(0, j).trim().split(' ');\n    if (matches.length == 2) {\n      parts[0] = matches[0];\n      parts[1] = matches[1];\n    }\n  } else if (j == 0) {\n    parts[2] = _validateCalcValue(basis.trim());\n  } else {\n    let matches = basis.split(' ');\n    parts = (matches.length === 3) ? matches : [\n          grow, shrink, basis\n        ];\n  }\n\n  return parts;\n}\n\n\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n */\nfunction _validateCalcValue(calc: string): string {\n  return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\nimport {BROWSER_PROVIDER} from './browser-provider';\n\n\n/**\n * *****************************************************************\n * Define module for common Angular Layout utilities\n * *****************************************************************\n */\n@NgModule({\n  providers: [BROWSER_PROVIDER]\n})\nexport class CoreModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport type MediaQuerySubscriber = (changes: MediaChange) => void;\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nexport class MediaChange {\n  property: string = '';\n  value: any;\n\n  /**\n   * @param matches whether the mediaQuery is currently activated\n   * @param mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n   * @param mqAlias e.g. gt-sm, md, gt-lg\n   * @param suffix e.g. GtSM, Md, GtLg\n   * @param priority the priority of activation for the given breakpoint\n   */\n  constructor(public matches = false,\n              public mediaQuery = 'all',\n              public mqAlias = '',\n              public suffix = '',\n              public priority = 0) {\n  }\n\n  /** Create an exact copy of the MediaChange */\n  clone(): MediaChange {\n    return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n  }\n}\n\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\n\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\n@Injectable({providedIn: 'root'})\nexport class StylesheetMap {\n\n  readonly stylesheet = new Map<HTMLElement, Map<string, string|number>>();\n\n  /**\n   * Add an individual style to an HTML element\n   */\n  addStyleToElement(element: HTMLElement, style: string, value: string|number) {\n    const stylesheet = this.stylesheet.get(element);\n    if (stylesheet) {\n      stylesheet.set(style, value);\n    } else {\n      this.stylesheet.set(element, new Map([[style, value]]));\n    }\n  }\n\n  /**\n   * Clear the virtual stylesheet\n   */\n  clearStyles() {\n    this.stylesheet.clear();\n  }\n\n  /**\n   * Retrieve a given style for an HTML element\n   */\n  getStyleForElement(el: HTMLElement, styleName: string): string {\n    const styles = this.stylesheet.get(el);\n    let value = '';\n    if (styles) {\n      const style = styles.get(styleName);\n      if (typeof style === 'number' || typeof style === 'string') {\n        value = style + '';\n      }\n    }\n    return value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n/** a set of configuration options for FlexLayoutModule */\nexport interface LayoutConfigOptions {\n  addFlexToParent?: boolean;\n  addOrientationBps?: boolean;\n  disableDefaultBps?: boolean;\n  disableVendorPrefixes?: boolean;\n  serverLoaded?: boolean;\n  useColumnBasisZero?: boolean;\n  printWithBreakpoints?: string[];\n  mediaTriggerAutoRestore?: boolean;\n  ssrObserveBreakpoints?: string[];\n}\n\nexport const DEFAULT_CONFIG: LayoutConfigOptions = {\n  addFlexToParent: true,\n  addOrientationBps: false,\n  disableDefaultBps: false,\n  disableVendorPrefixes: false,\n  serverLoaded: false,\n  useColumnBasisZero: true,\n  printWithBreakpoints: [],\n  mediaTriggerAutoRestore: true,\n  ssrObserveBreakpoints: [],\n};\n\nexport const LAYOUT_CONFIG = new InjectionToken<LayoutConfigOptions>(\n    'Flex Layout token, config options for the library', {\n      providedIn: 'root',\n      factory: () => DEFAULT_CONFIG\n    });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n */\nexport const SERVER_TOKEN = new InjectionToken<boolean>(\n  'FlexLayoutServerLoaded', {\n    providedIn: 'root',\n    factory: () => false\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {BreakPoint} from '../breakpoints/break-point';\n\nexport const BREAKPOINT = new InjectionToken<BreakPoint|BreakPoint[]|null>(\n  'Flex Layout token, collect all breakpoints into one provider', {\n    providedIn: 'root',\n    factory: () => null\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {StyleDefinition, StyleUtils} from '../style-utils/style-utils';\nimport {StyleBuilder} from '../style-builder/style-builder';\nimport {MediaMarshaller} from '../media-marshaller/media-marshaller';\nimport {buildLayoutCSS} from '../../utils/layout-validator';\n\nexport abstract class BaseDirective2 implements OnChanges, OnDestroy {\n\n  protected DIRECTIVE_KEY = '';\n  protected inputs: string[] = [];\n  /** The most recently used styles for the builder */\n  protected mru: StyleDefinition = {};\n  protected destroySubject: Subject<void> = new Subject();\n\n  /** Access to host element's parent DOM node */\n  protected get parentElement(): HTMLElement | null {\n    return this.elementRef.nativeElement.parentElement;\n  }\n\n  /** Access to the HTMLElement for the directive */\n  protected get nativeElement(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /** Access to the activated value for the directive */\n  get activatedValue(): string {\n    return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n  set activatedValue(value: string) {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value,\n      this.marshal.activatedAlias);\n  }\n\n  /** Cache map for style computation */\n  protected styleCache: Map<string, StyleDefinition> = new Map();\n\n  protected constructor(protected elementRef: ElementRef,\n                        protected styleBuilder: StyleBuilder,\n                        protected styler: StyleUtils,\n                        protected marshal: MediaMarshaller) {\n  }\n\n  /** For @Input changes */\n  ngOnChanges(changes: SimpleChanges) {\n    Object.keys(changes).forEach(key => {\n      if (this.inputs.indexOf(key) !== -1) {\n        const bp = key.split('.').slice(1).join('.');\n        const val = changes[key].currentValue;\n        this.setValue(val, bp);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroySubject.next();\n    this.destroySubject.complete();\n    this.marshal.releaseElement(this.nativeElement);\n  }\n\n  /** Register with central marshaller service */\n  protected init(extraTriggers: Observable<any>[] = []): void {\n    this.marshal.init(\n      this.elementRef.nativeElement,\n      this.DIRECTIVE_KEY,\n      this.updateWithValue.bind(this),\n      this.clearStyles.bind(this),\n      extraTriggers\n    );\n  }\n\n  /** Add styles to the element using predefined style builder */\n  protected addStyles(input: string, parent?: Object) {\n    const builder = this.styleBuilder;\n    const useCache = builder.shouldCache;\n\n    let genStyles: StyleDefinition | undefined = this.styleCache.get(input);\n\n    if (!genStyles || !useCache) {\n      genStyles = builder.buildStyles(input, parent);\n      if (useCache) {\n        this.styleCache.set(input, genStyles);\n      }\n    }\n\n    this.mru = {...genStyles};\n    this.applyStyleToElement(genStyles);\n    builder.sideEffect(input, genStyles, parent);\n  }\n\n  /** Remove generated styles from an element using predefined style builder */\n  protected clearStyles() {\n    Object.keys(this.mru).forEach(k => {\n      this.mru[k] = '';\n    });\n    this.applyStyleToElement(this.mru);\n    this.mru = {};\n  }\n\n  /** Force trigger style updates on DOM element */\n  protected triggerUpdate() {\n    this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction).\n   *\n   * Check inline style first then check computed (stylesheet) style.\n   * And optionally add the flow value to element's inline style.\n   */\n  protected getFlexFlowDirection(target: HTMLElement, addIfMissing = false): string {\n    if (target) {\n      const [value, hasInlineValue] = this.styler.getFlowDirection(target);\n\n      if (!hasInlineValue && addIfMissing) {\n        const style = buildLayoutCSS(value);\n        const elements = [target];\n        this.styler.applyStyleToElements(style, elements);\n      }\n\n      return value.trim();\n    }\n\n    return 'row';\n  }\n\n  protected hasWrap(target: HTMLElement): boolean {\n    return this.styler.hasWrap(target);\n  }\n\n  /** Applies styles given via string pair or object map to the directive element */\n  protected applyStyleToElement(style: StyleDefinition,\n                                value?: string | number,\n                                element: HTMLElement = this.nativeElement) {\n    this.styler.applyStyleToElement(element, style, value);\n  }\n\n  protected setValue(val: any, bp: string): void {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n  }\n\n  protected updateWithValue(input: string) {\n    this.addStyles(input);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {BreakPoint} from '../break-point';\n\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n */\nexport const DEFAULT_BREAKPOINTS: BreakPoint[] = [\n  {\n    alias: 'xs',\n    mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.9px)',\n    priority: 1000,\n  },\n  {\n    alias: 'sm',\n    mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.9px)',\n    priority: 900,\n  },\n  {\n    alias: 'md',\n    mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.9px)',\n    priority: 800,\n  },\n  {\n    alias: 'lg',\n    mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.9px)',\n    priority: 700,\n  },\n  {\n    alias: 'xl',\n    mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.9px)',\n    priority: 600,\n  },\n  {\n    alias: 'lt-sm',\n    overlapping: true,\n    mediaQuery: 'screen and (max-width: 599.9px)',\n    priority: 950,\n  },\n  {\n    alias: 'lt-md',\n    overlapping: true,\n    mediaQuery: 'screen and (max-width: 959.9px)',\n    priority: 850,\n  },\n  {\n    alias: 'lt-lg',\n    overlapping: true,\n    mediaQuery: 'screen and (max-width: 1279.9px)',\n    priority: 750,\n  },\n  {\n    alias: 'lt-xl',\n    overlapping: true,\n    priority: 650,\n    mediaQuery: 'screen and (max-width: 1919.9px)',\n  },\n  {\n    alias: 'gt-xs',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 600px)',\n    priority: -950,\n  },\n  {\n    alias: 'gt-sm',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 960px)',\n    priority: -850,\n  }, {\n    alias: 'gt-md',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 1280px)',\n    priority: -750,\n  },\n  {\n    alias: 'gt-lg',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 1920px)',\n    priority: -650,\n  }\n];\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BreakPoint} from '../break-point';\n\n/* tslint:disable */\nconst HANDSET_PORTRAIT  = '(orientation: portrait) and (max-width: 599.9px)';\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.9px)';\n\nconst TABLET_PORTRAIT   = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.9px)';\nconst TABLET_LANDSCAPE  = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.9px)';\n\nconst WEB_PORTRAIT      = '(orientation: portrait) and (min-width: 840px)';\nconst WEB_LANDSCAPE     = '(orientation: landscape) and (min-width: 1280px)';\n\nexport const ScreenTypes = {\n  'HANDSET'           : `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n  'TABLET'            : `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n  'WEB'               : `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n\n  'HANDSET_PORTRAIT'  : `${HANDSET_PORTRAIT}`,\n  'TABLET_PORTRAIT'   : `${TABLET_PORTRAIT} `,\n  'WEB_PORTRAIT'      : `${WEB_PORTRAIT}`,\n\n  'HANDSET_LANDSCAPE' : `${HANDSET_LANDSCAPE}`,\n  'TABLET_LANDSCAPE'  : `${TABLET_LANDSCAPE}`,\n  'WEB_LANDSCAPE'     : `${WEB_LANDSCAPE}`\n};\n\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\nexport const ORIENTATION_BREAKPOINTS : BreakPoint[] = [\n  {'alias': 'handset',            priority: 2000, 'mediaQuery': ScreenTypes.HANDSET},\n  {'alias': 'handset.landscape',  priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE},\n  {'alias': 'handset.portrait',   priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_PORTRAIT},\n\n  {'alias': 'tablet',             priority: 2100, 'mediaQuery': ScreenTypes.TABLET},\n  {'alias': 'tablet.landscape',   priority: 2100, 'mediaQuery': ScreenTypes.TABLET_LANDSCAPE},\n  {'alias': 'tablet.portrait',    priority: 2100, 'mediaQuery': ScreenTypes.TABLET_PORTRAIT},\n\n  {'alias': 'web',                priority: 2200, 'mediaQuery': ScreenTypes.WEB, overlapping : true },\n  {'alias': 'web.landscape',      priority: 2200, 'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping : true },\n  {'alias': 'web.portrait',       priority: 2200, 'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping : true }\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken} from '@angular/core';\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINT} from '../tokens/breakpoint-token';\nimport {DEFAULT_BREAKPOINTS} from '../breakpoints/data/break-points';\nimport {ORIENTATION_BREAKPOINTS} from '../breakpoints/data/orientation-break-points';\nimport {mergeByAlias} from '../breakpoints/breakpoint-tools';\nimport {LAYOUT_CONFIG} from '../tokens/library-config';\n\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n */\nexport const BREAKPOINTS =\n  new InjectionToken<BreakPoint[]>('Token (@angular/flex-layout) Breakpoints', {\n    providedIn: 'root',\n    factory: () => {\n      const breakpoints: any = inject(BREAKPOINT);\n      const layoutConfig = inject(LAYOUT_CONFIG);\n      const bpFlattenArray: BreakPoint[] = [].concat.apply([], (breakpoints || [])\n        .map((v: BreakPoint | BreakPoint[]) => Array.isArray(v) ? v : [v]));\n      const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS)\n        .concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n\n      return mergeByAlias(builtIns, bpFlattenArray);\n    }\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable, Inject} from '@angular/core';\n\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINTS} from './break-points-token';\nimport {sortAscendingPriority} from '../utils/sort';\n\nexport type OptionalBreakPoint = BreakPoint | null;\n\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\n@Injectable({providedIn: 'root'})\nexport class BreakPointRegistry {\n  readonly items: BreakPoint[];\n\n  constructor(@Inject(BREAKPOINTS) list: BreakPoint[]) {\n    this.items = [...list].sort(sortAscendingPriority);\n  }\n\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   */\n  findByAlias(alias: string): OptionalBreakPoint {\n    return !alias ? null : this.findWithPredicate(alias, (bp) => bp.alias == alias);\n  }\n\n  findByQuery(query: string): OptionalBreakPoint {\n    return this.findWithPredicate(query, (bp) => bp.mediaQuery == query);\n  }\n\n  /**\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n   * e.g. gt-sm overlaps md, lg, and xl\n   */\n  get overlappings(): BreakPoint[] {\n    return this.items.filter(it => it.overlapping == true);\n  }\n\n  /**\n   * Get list of all registered (non-empty) breakpoint aliases\n   */\n  get aliases(): string[] {\n    return this.items.map(it => it.alias);\n  }\n\n  /**\n   * Aliases are mapped to properties using suffixes\n   * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n   * for property layoutGtSM.\n   */\n  get suffixes(): string[] {\n    return this.items.map(it => !!it.suffix ? it.suffix : '');\n  }\n\n  /**\n   * Memoized lookup using custom predicate function\n   */\n  private findWithPredicate(key: string,\n      searchFn: (bp: BreakPoint) => boolean): OptionalBreakPoint {\n    let response = this.findByMap.get(key);\n    if (!response) {\n      response = this.items.find(searchFn) || null;\n      this.findByMap.set(key, response);\n    }\n    return response || null;\n\n  }\n\n  /**\n   * Memoized BreakPoint Lookups\n   */\n  private readonly findByMap = new Map<String, OptionalBreakPoint>();\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, NgZone, PLATFORM_ID} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\nimport {MatchMedia} from '../match-media';\nimport {BreakPointRegistry} from '../../breakpoints/break-point-registry';\n\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\n@Injectable()\nexport class MockMatchMedia extends MatchMedia {\n\n\n  autoRegisterQueries = true;   // Used for testing BreakPoint registrations\n  useOverlaps = false;          // Allow fallback to overlapping mediaQueries\n\n  constructor(_zone: NgZone,\n              @Inject(PLATFORM_ID) _platformId: Object,\n              @Inject(DOCUMENT) _document: any,\n              private _breakpoints: BreakPointRegistry) {\n    super(_zone, _platformId, _document);\n  }\n\n  /** Easy method to clear all listeners for all mediaQueries */\n  clearAll() {\n    this.registry.forEach((mql: MediaQueryList) => {\n      (mql as MockMediaQueryList).destroy();\n    });\n    this.registry.clear();\n    this.useOverlaps = false;\n  }\n\n  /** Feature to support manual, simulated activation of a mediaQuery. */\n  activate(mediaQuery: string, useOverlaps = false): boolean {\n    useOverlaps = useOverlaps || this.useOverlaps;\n    mediaQuery = this._validateQuery(mediaQuery);\n\n    if (useOverlaps || !this.isActive(mediaQuery)) {\n      this._deactivateAll();\n\n      this._registerMediaQuery(mediaQuery);\n      this._activateWithOverlaps(mediaQuery, useOverlaps);\n    }\n\n    return this.hasActivated;\n  }\n\n  /** Converts an optional mediaQuery alias to a specific, valid mediaQuery */\n  _validateQuery(queryOrAlias: string) {\n    const bp = this._breakpoints.findByAlias(queryOrAlias);\n    return (bp && bp.mediaQuery) || queryOrAlias;\n  }\n\n  /**\n   * Manually onMediaChange any overlapping mediaQueries to simulate\n   * similar functionality in the window.matchMedia()\n   */\n  private _activateWithOverlaps(mediaQuery: string, useOverlaps: boolean): boolean {\n    if (useOverlaps) {\n      const bp = this._breakpoints.findByQuery(mediaQuery);\n      const alias = bp ? bp.alias : 'unknown';\n\n      // Simulate activation of overlapping lt-<XXX> ranges\n      switch (alias) {\n        case 'lg'   :\n          this._activateByAlias('lt-xl');\n          break;\n        case 'md'   :\n          this._activateByAlias('lt-xl, lt-lg');\n          break;\n        case 'sm'   :\n          this._activateByAlias('lt-xl, lt-lg, lt-md');\n          break;\n        case 'xs'   :\n          this._activateByAlias('lt-xl, lt-lg, lt-md, lt-sm');\n          break;\n      }\n\n      // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n      switch (alias) {\n        case 'xl'   :\n          this._activateByAlias('gt-lg, gt-md, gt-sm, gt-xs');\n          break;\n        case 'lg'   :\n          this._activateByAlias('gt-md, gt-sm, gt-xs');\n          break;\n        case 'md'   :\n          this._activateByAlias('gt-sm, gt-xs');\n          break;\n        case 'sm'   :\n          this._activateByAlias('gt-xs');\n          break;\n      }\n    }\n    // Activate last since the responsiveActivation is watching *this* mediaQuery\n    return this._activateByQuery(mediaQuery);\n  }\n\n  /**\n   *\n   */\n  private _activateByAlias(aliases: string) {\n    const activate = (alias: string) => {\n      const bp = this._breakpoints.findByAlias(alias);\n      this._activateByQuery(bp ? bp.mediaQuery : alias);\n    };\n    aliases.split(',').forEach(alias => activate(alias.trim()));\n  }\n\n  /**\n   *\n   */\n  private _activateByQuery(mediaQuery: string) {\n    const mql: MockMediaQueryList = this.registry.get(mediaQuery) as MockMediaQueryList;\n\n    if (mql && !this.isActive(mediaQuery)) {\n      this.registry.set(mediaQuery, mql.activate());\n    }\n    return this.hasActivated;\n  }\n\n  /** Deactivate all current MQLs and reset the buffer */\n  private _deactivateAll() {\n    this.registry.forEach((it: MediaQueryList) => {\n      (it as MockMediaQueryList).deactivate();\n    });\n    return this;\n  }\n\n  /** Insure the mediaQuery is registered with MatchMedia */\n  private _registerMediaQuery(mediaQuery: string) {\n    if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this.registerQuery(mediaQuery);\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected buildMQL(query: string): MediaQueryList {\n    return new MockMediaQueryList(query);\n  }\n\n  protected get hasActivated() {\n    return this.activations.length > 0;\n  }\n\n}\n\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nexport class MockMediaQueryList implements MediaQueryList {\n  private _isActive = false;\n  private _listeners: MediaQueryListListener[] = [];\n\n  get matches(): boolean {\n    return this._isActive;\n  }\n\n  get media(): string {\n    return this._mediaQuery;\n  }\n\n  constructor(private _mediaQuery: string) {\n  }\n\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n\n  /** Notify all listeners that 'matches === TRUE' */\n  activate(): MockMediaQueryList {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(this, {matches: this.matches, media: this.media} as MediaQueryListEvent);\n      });\n    }\n    return this;\n  }\n\n  /** Notify all listeners that 'matches === false' */\n  deactivate(): MockMediaQueryList {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(this, {matches: this.matches, media: this.media} as MediaQueryListEvent);\n      });\n    }\n    return this;\n  }\n\n  /** Add a listener to our internal list to activate later */\n  addListener(listener: MediaQueryListListener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = listener!;\n      cb.call(this, {matches: this.matches, media: this.media} as MediaQueryListEvent);\n    }\n  }\n\n  /** Don't need to remove listeners in the testing environment */\n  removeListener(_: MediaQueryListListener | null) {\n  }\n\n  addEventListener<K extends keyof MediaQueryListEventMap>(\n      _: K,\n      __: (this: MediaQueryList,\n      ev: MediaQueryListEventMap[K]) => any,\n      ___?: boolean | AddEventListenerOptions): void;\n\n  addEventListener(\n      _: string,\n      __: EventListenerOrEventListenerObject,\n      ___?: boolean | AddEventListenerOptions) {\n  }\n\n  removeEventListener<K extends keyof MediaQueryListEventMap>(\n      _: K,\n      __: (this: MediaQueryList,\n      ev: MediaQueryListEventMap[K]) => any,\n      ___?: boolean | EventListenerOptions): void;\n\n  removeEventListener(\n      _: string,\n      __: EventListenerOrEventListenerObject,\n      ___?: boolean | EventListenerOptions) {\n  }\n\n  dispatchEvent(_: Event): boolean {\n    return false;\n  }\n\n  onchange: MediaQueryListListener = null;\n}\n\n/**\n * Pre-configured provider for MockMatchMedia\n */\nexport const MockMatchMediaProvider = {  // tslint:disable-line:variable-name\n  provide: MatchMedia,\n  useClass: MockMatchMedia\n};\n\ntype MediaQueryListListener = ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {DOCUMENT, isPlatformBrowser} from '@angular/common';\n\nimport {fromEvent, Subscription} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\nimport {mergeAlias} from '../add-alias';\nimport {MediaChange} from '../media-change';\nimport {MatchMedia} from '../match-media/match-media';\nimport {BreakPointRegistry, OptionalBreakPoint} from '../breakpoints/break-point-registry';\nimport {sortDescendingPriority} from '../utils/sort';\nimport {LAYOUT_CONFIG, LayoutConfigOptions} from '../tokens/library-config';\n\n/**\n * Class\n */\n@Injectable({providedIn: 'root'})\nexport class MediaTrigger {\n\n  constructor(\n      protected breakpoints: BreakPointRegistry,\n      protected matchMedia: MatchMedia,\n      @Inject(LAYOUT_CONFIG) protected layoutConfig: LayoutConfigOptions,\n      @Inject(PLATFORM_ID) protected _platformId: Object,\n      @Inject(DOCUMENT) protected _document: any) {\n  }\n\n  /**\n   * Manually activate range of breakpoints\n   * @param list array of mediaQuery or alias strings\n   */\n  activate(list: string[]) {\n    list = list.map(it => it.trim()); // trim queries\n\n    this.saveActivations();\n    this.deactivateAll();\n    this.setActivations(list);\n\n    this.prepareAutoRestore();\n  }\n\n  /**\n   * Restore original, 'real' breakpoints and emit events\n   * to trigger stream notification\n   */\n  restore() {\n    if (this.hasCachedRegistryMatches) {\n      const extractQuery = (change: MediaChange) => change.mediaQuery;\n      const list = this.originalActivations.map(extractQuery);\n      try {\n\n        this.deactivateAll();\n        this.restoreRegistryMatches();\n        this.setActivations(list);\n\n      } finally {\n        this.originalActivations = [];\n        if (this.resizeSubscription) {\n          this.resizeSubscription.unsubscribe();\n        }\n      }\n    }\n  }\n\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n\n  /**\n   * Whenever window resizes, immediately auto-restore original\n   * activations (if we are simulating activations)\n   */\n  private prepareAutoRestore() {\n    const isBrowser = isPlatformBrowser(this._platformId) && this._document;\n    const enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;\n\n    if (enableAutoRestore) {\n      const resize$ = fromEvent(window, 'resize').pipe(take(1));\n      this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n    }\n  }\n\n  /**\n   * Notify all matchMedia subscribers of de-activations\n   *\n   * Note: we must force 'matches' updates for\n   *       future matchMedia::activation lookups\n   */\n  private deactivateAll() {\n    const list = this.currentActivations;\n\n    this.forceRegistryMatches(list, false);\n    this.simulateMediaChanges(list, false);\n  }\n\n  /**\n   * Cache current activations as sorted, prioritized list of MediaChanges\n   */\n  private saveActivations() {\n    if (!this.hasCachedRegistryMatches) {\n      const toMediaChange = (query: string) => new MediaChange(true, query);\n      const mergeMQAlias = (change: MediaChange) => {\n        const bp: OptionalBreakPoint = this.breakpoints.findByQuery(change.mediaQuery);\n        return mergeAlias(change, bp);\n      };\n\n      this.originalActivations = this.currentActivations\n          .map(toMediaChange)\n          .map(mergeMQAlias)\n          .sort(sortDescendingPriority);\n\n      this.cacheRegistryMatches();\n    }\n  }\n\n  /**\n   * Force set manual activations for specified mediaQuery list\n   */\n  private setActivations(list: string[]) {\n    if (!!this.originalRegistry) {\n      this.forceRegistryMatches(list, true);\n    }\n    this.simulateMediaChanges(list);\n  }\n\n  /**\n   * For specified mediaQuery list manually simulate activations or deactivations\n   */\n  private simulateMediaChanges(queries: string[], matches = true) {\n    const toMediaQuery = (query: string) => {\n      const locator = this.breakpoints;\n      const bp = locator.findByAlias(query) || locator.findByQuery(query);\n      return bp ? bp.mediaQuery : query;\n    };\n    const emitChangeEvent = (query: string) => this.emitChangeEvent(matches, query);\n\n    queries.map(toMediaQuery).forEach(emitChangeEvent);\n  }\n\n  /**\n   * Replace current registry with simulated registry...\n   * Note: this is required since MediaQueryList::matches is 'readOnly'\n   */\n  private forceRegistryMatches(queries: string[], matches: boolean) {\n    const registry = new Map<string, MediaQueryList>();\n    queries.forEach(query => {\n      registry.set(query, {matches: matches} as MediaQueryList);\n    });\n\n    this.matchMedia.registry = registry;\n  }\n\n  /**\n   * Save current MatchMedia::registry items.\n   */\n  private cacheRegistryMatches() {\n    const target = this.originalRegistry;\n\n    target.clear();\n    this.matchMedia.registry.forEach((value: MediaQueryList, key: string) => {\n      target.set(key, value);\n    });\n    this.hasCachedRegistryMatches = true;\n  }\n\n  /**\n   * Restore original, 'true' registry\n   */\n  private restoreRegistryMatches() {\n    const target = this.matchMedia.registry;\n\n    target.clear();\n    this.originalRegistry.forEach((value: MediaQueryList, key: string) => {\n      target.set(key, value);\n    });\n\n    this.originalRegistry.clear();\n    this.hasCachedRegistryMatches = false;\n  }\n\n  /**\n   * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n   */\n  private emitChangeEvent(matches: boolean, query: string) {\n    this.matchMedia.source.next(new MediaChange(matches, query));\n  }\n\n  private get currentActivations(): string[] {\n    return this.matchMedia.activations;\n  }\n\n  private hasCachedRegistryMatches = false;\n  private originalActivations: MediaChange[] = [];\n  private originalRegistry: Map<string, MediaQueryList> = new Map<string, MediaQueryList>();\n\n  private resizeSubscription!: Subscription;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {isPlatformBrowser, isPlatformServer} from '@angular/common';\n\nimport {applyCssPrefixes} from '../../utils/auto-prefixer';\nimport {StylesheetMap} from '../stylesheet-map/stylesheet-map';\nimport {SERVER_TOKEN} from '../tokens/server-token';\nimport {LAYOUT_CONFIG, LayoutConfigOptions} from '../tokens/library-config';\n\n@Injectable({providedIn: 'root'})\nexport class StyleUtils {\n\n  constructor(private _serverStylesheet: StylesheetMap,\n              @Inject(SERVER_TOKEN) private _serverModuleLoaded: boolean,\n              @Inject(PLATFORM_ID) private _platformId: Object,\n              @Inject(LAYOUT_CONFIG) private layoutConfig: LayoutConfigOptions) {}\n\n  /**\n   * Applies styles given via string pair or object map to the directive element\n   */\n  applyStyleToElement(element: HTMLElement,\n                      style: StyleDefinition | string,\n                      value: string | number | null = null) {\n    let styles: StyleDefinition = {};\n    if (typeof style === 'string') {\n      styles[style] = value;\n      style = styles;\n    }\n    styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    this._applyMultiValueStyleToElement(styles, element);\n  }\n\n  /**\n   * Applies styles given via string pair or object map to the directive's element\n   */\n  applyStyleToElements(style: StyleDefinition, elements: HTMLElement[] = []) {\n    const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    elements.forEach(el => {\n      this._applyMultiValueStyleToElement(styles, el);\n    });\n  }\n\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction)\n   *\n   * Check inline style first then check computed (stylesheet) style\n   */\n  getFlowDirection(target: HTMLElement): [string, string] {\n    const query = 'flex-direction';\n    let value = this.lookupStyle(target, query);\n    const hasInlineValue = this.lookupInlineStyle(target, query) ||\n    (isPlatformServer(this._platformId) && this._serverModuleLoaded) ? value : '';\n\n    return [value || 'row', hasInlineValue];\n  }\n\n  hasWrap(target: HTMLElement): boolean {\n    const query = 'flex-wrap';\n    return this.lookupStyle(target, query) === 'wrap';\n  }\n\n  /**\n   * Find the DOM element's raw attribute value (if any)\n   */\n  lookupAttributeValue(element: HTMLElement, attribute: string): string {\n    return element.getAttribute(attribute) || '';\n  }\n\n  /**\n   * Find the DOM element's inline style value (if any)\n   */\n  lookupInlineStyle(element: HTMLElement, styleName: string): string {\n    return isPlatformBrowser(this._platformId) ?\n      element.style.getPropertyValue(styleName) : this._getServerStyle(element, styleName);\n  }\n\n  /**\n   * Determine the inline or inherited CSS style\n   * NOTE: platform-server has no implementation for getComputedStyle\n   */\n  lookupStyle(element: HTMLElement, styleName: string, inlineOnly = false): string {\n    let value = '';\n    if (element) {\n      let immediateValue = value = this.lookupInlineStyle(element, styleName);\n      if (!immediateValue) {\n        if (isPlatformBrowser(this._platformId)) {\n          if (!inlineOnly) {\n            value = getComputedStyle(element).getPropertyValue(styleName);\n          }\n        } else {\n          if (this._serverModuleLoaded) {\n            value = this._serverStylesheet.getStyleForElement(element, styleName);\n          }\n        }\n      }\n    }\n\n    // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n    //       in which case getComputedStyle() should determine a valid value.\n    return value ? value.trim() : '';\n  }\n\n  /**\n   * Applies the styles to the element. The styles object map may contain an array of values\n   * Each value will be added as element style\n   * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n   */\n  private _applyMultiValueStyleToElement(styles: StyleDefinition,\n                                         element: HTMLElement) {\n    Object.keys(styles).sort().forEach(key => {\n      const el = styles[key];\n      const values: (string | number | null)[] = Array.isArray(el) ? el : [el];\n      values.sort();\n      for (let value of values) {\n        value = value ? value + '' : '';\n        if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n          isPlatformBrowser(this._platformId) ?\n            element.style.setProperty(key, value) : this._setServerStyle(element, key, value);\n        } else {\n          this._serverStylesheet.addStyleToElement(element, key, value);\n        }\n      }\n    });\n  }\n\n  private _setServerStyle(element: any, styleName: string, styleValue?: string|null) {\n    styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    const styleMap = this._readStyleAttribute(element);\n    styleMap[styleName] = styleValue || '';\n    this._writeStyleAttribute(element, styleMap);\n  }\n\n  private _getServerStyle(element: any, styleName: string): string {\n    const styleMap = this._readStyleAttribute(element);\n    return styleMap[styleName] || '';\n  }\n\n  private _readStyleAttribute(element: any): {[name: string]: string} {\n    const styleMap: {[name: string]: string} = {};\n    const styleAttribute = element.getAttribute('style');\n    if (styleAttribute) {\n      const styleList = styleAttribute.split(/;+/g);\n      for (let i = 0; i < styleList.length; i++) {\n        const style = styleList[i].trim();\n        if (style.length > 0) {\n          const colonIndex = style.indexOf(':');\n          if (colonIndex === -1) {\n            throw new Error(`Invalid CSS style: ${style}`);\n          }\n          const name = style.substr(0, colonIndex).trim();\n          styleMap[name] = style.substr(colonIndex + 1).trim();\n        }\n      }\n    }\n    return styleMap;\n  }\n\n  private _writeStyleAttribute(element: any, styleMap: {[name: string]: string}) {\n    let styleAttrValue = '';\n    for (const key in styleMap) {\n      const newValue = styleMap[key];\n      if (newValue) {\n        styleAttrValue += key + ':' + styleMap[key] + ';';\n      }\n    }\n    element.setAttribute('style', styleAttrValue);\n  }\n}\n\n/**\n * Definition of a css style. Either a property name (e.g. \"flex-basis\") or an object\n * map of property name and value (e.g. {display: 'none', flex-order: 5})\n */\nexport type StyleDefinition = { [property: string]: string | number | null };\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {StyleDefinition} from '../style-utils/style-utils';\n\n/** A class that encapsulates CSS style generation for common directives */\nexport abstract class StyleBuilder {\n\n  /** Whether to cache the generated output styles */\n  shouldCache = true;\n\n  /** Build the styles given an input string and configuration object from a host */\n  abstract buildStyles(input: string, parent?: Object): StyleDefinition;\n\n  /**\n   * Run a side effect computation given the input string and the computed styles\n   * from the build task and the host configuration object\n   * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n   */\n  sideEffect(_input: string, _styles: StyleDefinition, _parent?: Object) {\n  }\n}\n"],"names":["watcherMap","forEach","s","unsubscribe","this","delete","element","elementMap","get","_","MediaMarshaller","prototype","triggerUpdate","key","_this","bpMap","valueMap","getActivatedValues","updateElement","v","k","buildElementKeyMap","keyMap","elementKeyMap","Set","set","add","watchExtraTriggers","triggers","length","watchers","Map","newSubscription","merge","apply","subscribe","currentValue","getValue","findByQuery","query","breakpoints","i","activatedBreakpoints","activatedBp","alias","undefined","has","lastHope","observeActivations","target","queries","items","map","bp","mediaQuery","matchMedia","observe","hook","withPrintQuery","pipe","tap","interceptEvents","filter","blockPropagation","onMediaChange","bind","type","Injectable","args","providedIn","MatchMedia","BreakPointRegistry","PrintHook","__extends","d","b","__","constructor","extendStatics","Object","create","__spreadArrays","il","arguments","r","Array","a","j","jl","removeStyles","_document","platformId","isPlatformBrowser","classRegex_1","from","querySelectorAll","CLASS_NAME","el","classList","contains","parentNode","removeChild","className","replace","mergeAlias","dest","source","clone","MediaChange","mqAlias","suffix","priority","buildLayoutCSS","value","_a","validateValue","buildCSS","toLowerCase","split","direction","wrap","inline","LAYOUT_VALUES","find","x","INLINE","validateWrapValue","display","box-sizing","flex-direction","flex-wrap","extendObject","sources","_i","TypeError","sources_1","hasOwnProperty","firstUpperCase","part","first","charAt","remainder","slice","toUpperCase","camelCase","name","ALIAS_DELIMITERS","join","validateSuffixes","list","overlapping","mergeByAlias","defaults","custom","dict","keys","sortDescendingPriority","priorityA","sortAscendingPriority","buildQueryCss","mediaQueries","it","ALL_STYLES","styleEl_1","createElement","setAttribute","styleSheet","cssText","appendChild","createTextNode","mq","e","console","error","constructMql","isBrowser","addListener","matches","media","removeListener","isPrintBreakPoint","startsWith","PRINT","coerceArray","isArray","toMediaQuery","locator","findByAlias","splitQueries","reduce","a1","a2","concat","trim","applyCssPrefixes","isNaN","validateBasis","basis","grow","shrink","parts","indexOf","_validateCalcValue","substring","substr","calc","initBuilderMap","input","oldMap","setPrototypeOf","__proto__","p","__assign","assign","t","n","call","BROWSER_PROVIDER","provide","APP_BOOTSTRAP_LISTENER","useFactory","deps","DOCUMENT","PLATFORM_ID","multi","CoreModule","NgModule","providers","property","StylesheetMap","stylesheet","addStyleToElement","style","clearStyles","clear","getStyleForElement","styleName","styles","DEFAULT_CONFIG","addFlexToParent","addOrientationBps","disableDefaultBps","disableVendorPrefixes","serverLoaded","useColumnBasisZero","printWithBreakpoints","mediaTriggerAutoRestore","ssrObserveBreakpoints","LAYOUT_CONFIG","InjectionToken","factory","SERVER_TOKEN","BREAKPOINT","BaseDirective2","elementRef","styleBuilder","styler","marshal","DIRECTIVE_KEY","inputs","mru","destroySubject","Subject","styleCache","defineProperty","nativeElement","parentElement","setValue","activatedAlias","ngOnChanges","changes","val","ngOnDestroy","next","complete","releaseElement","init","extraTriggers","updateWithValue","addStyles","parent","builder","useCache","shouldCache","genStyles","buildStyles","applyStyleToElement","sideEffect","getFlexFlowDirection","addIfMissing","getFlowDirection","elements","applyStyleToElements","hasWrap","DEFAULT_BREAKPOINTS","TABLET_PORTRAIT","TABLET_LANDSCAPE","WEB_PORTRAIT","WEB_LANDSCAPE","ScreenTypes","HANDSET","HANDSET_PORTRAIT","TABLET","WEB","HANDSET_LANDSCAPE","ORIENTATION_BREAKPOINTS","BREAKPOINTS","inject","layoutConfig","bpFlattenArray","findByMap","sort","findWithPredicate","searchFn","response","decorators","Inject","_zone","_platformId","BehaviorSubject","registry","_observable$","asObservable","results","mql","push","isActive","mqList","filterOthers","matchMedia$","change","registration$","Observable","observer","registerQuery","lastChange","pop","onMQLEvent","run","buildMQL","NgZone","MockMatchMedia","_super","_breakpoints","autoRegisterQueries","useOverlaps","clearAll","destroy","activate","_validateQuery","_deactivateAll","_registerMediaQuery","_activateWithOverlaps","hasActivated","queryOrAlias","_activateByAlias","_activateByQuery","aliases","deactivate","MockMediaQueryList","activations","_mediaQuery","_isActive","_listeners","onchange","callback","listener","addEventListener","___","removeEventListener","dispatchEvent","MockMatchMediaProvider","useClass","BREAKPOINT_PRINT","registeredBeforeAfterPrintHooks","isPrintingBeforeAfterEvent","beforePrintEventListeners","afterPrintEventListeners","isPrinting","queue","PrintQueue","deactivations","isPrintEvent","printAlias","getEventBreakpoints","printBreakPoints","updateEvent","event","registerBeforeAfterPrintHooks","defaultView","beforePrintListener","startPrinting","updateStyles","afterPrintListener","stopPrinting","collectActivations","bpList","addPrintBreakpoints","l","printBreakpoints","addBreakpoint","MediaObserver","filterOverlaps","destroyed$","_media$","watchActivations","media$","some","buildObservable","hasChanges","isValidQuery","excludeOverlaps","debounceTime","asapScheduler","switchMap","of","findAllActivations","takeUntil","mergeMQAlias","replaceWithPrintAlias","MediaTrigger","hasCachedRegistryMatches","originalActivations","originalRegistry","saveActivations","deactivateAll","setActivations","prepareAutoRestore","restore","extractQuery","restoreRegistryMatches","resizeSubscription","resize$","fromEvent","window","take","currentActivations","forceRegistryMatches","simulateMediaChanges","toMediaChange","cacheRegistryMatches","emitChangeEvent","StyleUtils","_serverStylesheet","_serverModuleLoaded","_applyMultiValueStyleToElement","lookupStyle","hasInlineValue","lookupInlineStyle","isPlatformServer","lookupAttributeValue","attribute","getAttribute","getPropertyValue","_getServerStyle","inlineOnly","getComputedStyle","values","values_1","setProperty","_setServerStyle","styleValue","styleMap","_readStyleAttribute","_writeStyleAttribute","styleAttribute","styleList","colonIndex","Error","name_1","styleAttrValue","Boolean","StyleBuilder","_input","_styles","_parent","WeakMap","updateMap","clearMap","subject","mc","splice","updateFn","clearFn","hasValue","trackValue","clearElement","builders"],"mappings":"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"}