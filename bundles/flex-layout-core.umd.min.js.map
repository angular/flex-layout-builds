{"version":3,"file":"flex-layout-core.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/core/browser-provider.ts","../../src/lib/utils/layout-validator.ts","../../src/lib/utils/object-extend.ts","../../src/lib/core/breakpoints/breakpoint-tools.ts","../../src/lib/core/match-media/match-media.ts","../../src/lib/core/add-alias.ts","../../src/lib/utils/auto-prefixer.ts","../../src/lib/core/basis-validator/basis-validator.ts","../../src/lib/core/module.ts","../../src/lib/core/media-change.ts","../../src/lib/core/stylesheet-map/stylesheet-map.ts","../../src/lib/core/tokens/library-config.ts","../../src/lib/core/tokens/server-token.ts","../../src/lib/core/tokens/breakpoint-token.ts","../../src/lib/core/responsive-activation/responsive-activation.ts","../../src/lib/core/base/base.ts","../../src/lib/core/base/base-adapter.ts","../../src/lib/core/breakpoints/data/break-points.ts","../../src/lib/core/breakpoints/data/orientation-break-points.ts","../../src/lib/core/breakpoints/break-points-token.ts","../../src/lib/core/breakpoints/break-point-registry.ts","../../src/lib/core/match-media/mock/mock-match-media.ts","../../src/lib/core/match-media/server-match-media.ts","../../src/lib/core/media-monitor/media-monitor.ts","../../src/lib/core/observable-media/observable-media.ts","../../src/lib/core/media-observer/media-observer.ts","../../src/lib/core/style-utils/style-utils.ts","../../src/lib/core/style-builder/style-builder.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {APP_BOOTSTRAP_LISTENER, PLATFORM_ID, InjectionToken} from '@angular/core';\nimport {DOCUMENT, isPlatformBrowser} from '@angular/common';\n\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n */\nexport function removeStyles(_document: Document, platformId: Object) {\n  return () => {\n    if (isPlatformBrowser(platformId)) {\n      const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n\n      // RegExp constructor should only be used if passing a variable to the constructor.\n      // When using static regular expression it is more performant to use reg exp literal.\n      // This is also needed to provide Safari 9 compatibility, please see\n      // https://stackoverflow.com/questions/37919802 for more discussion.\n      const classRegex = /\\bflex-layout-.+?\\b/g;\n      elements.forEach(el => {\n        el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ?\n          el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n      });\n    }\n  };\n}\n\n/**\n *  Provider to remove SSR styles on the browser\n */\nexport const BROWSER_PROVIDER = {\n  provide: <InjectionToken<(() => void)[]>>APP_BOOTSTRAP_LISTENER,\n  useFactory: removeStyles,\n  deps: [DOCUMENT, PLATFORM_ID],\n  multi: true\n};\n\nexport const CLASS_NAME = 'flex-layout-';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport const INLINE = 'inline';\nexport const LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n */\nexport function buildLayoutCSS(value: string) {\n  let [direction, wrap, isInline] = validateValue(value);\n  return buildCSS(direction, wrap, isInline);\n }\n\n/**\n  * Validate the value to be one of the acceptable value options\n  * Use default fallback of 'row'\n  */\nexport function validateValue(value: string): [string, string, boolean] {\n  value = value ? value.toLowerCase() : '';\n  let [direction, wrap, inline] = value.split(' ');\n\n  // First value must be the `flex-direction`\n  if (!LAYOUT_VALUES.find(x => x === direction)) {\n    direction = LAYOUT_VALUES[0];\n  }\n\n  if (wrap === INLINE) {\n    wrap = (inline !== INLINE) ? inline : '';\n    inline = INLINE;\n  }\n\n  return [direction, validateWrapValue(wrap), !!inline];\n}\n\n/**\n * Determine if the validated, flex-direction value specifies\n * a horizontal/row flow.\n */\nexport function isFlowHorizontal(value: string): boolean {\n  let [flow, ] = validateValue(value);\n  return flow.indexOf('row') > -1;\n}\n\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n */\nexport function validateWrapValue(value: string) {\n  if (!!value) {\n    switch (value.toLowerCase()) {\n      case 'reverse':\n      case 'wrap-reverse':\n      case 'reverse-wrap':\n        value = 'wrap-reverse';\n        break;\n\n      case 'no':\n      case 'none':\n      case 'nowrap':\n        value = 'nowrap';\n        break;\n\n      // All other values fallback to 'wrap'\n      default:\n        value = 'wrap';\n        break;\n    }\n  }\n  return value;\n}\n\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n */\nfunction buildCSS(direction: string, wrap: string | null = null, inline = false) {\n  return {\n    'display': inline ? 'inline-flex' : 'flex',\n    'box-sizing': 'border-box',\n    'flex-direction': direction,\n    'flex-wrap': !!wrap ? wrap : null\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param dest The object which will have properties copied to it.\n * @param sources The source objects from which properties will be copied.\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let source of sources) {\n    if (source != null) {\n      for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BreakPoint} from './break-point';\nimport {extendObject} from '../../utils/object-extend';\n\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\nfunction firstUpperCase(part: string) {\n  let first = part.length > 0 ? part.charAt(0) : '';\n  let remainder = (part.length > 1) ? part.slice(1) : '';\n  return first.toUpperCase() + remainder;\n}\n\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\nfunction camelCase(name: string): string {\n  return name\n      .replace(ALIAS_DELIMITERS, '|')\n      .split('|')\n      .map(firstUpperCase)\n      .join('');\n}\n\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\nexport function validateSuffixes(list: BreakPoint[]): BreakPoint[] {\n  list.forEach((bp: BreakPoint) => {\n    if (!bp.suffix) {\n      bp.suffix = camelCase(bp.alias);   // create Suffix value based on alias\n      bp.overlapping = !!bp.overlapping; // ensure default value\n    }\n  });\n  return list;\n}\n\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\nexport function mergeByAlias(defaults: BreakPoint[], custom: BreakPoint[] = []): BreakPoint[] {\n  const dict: {[key: string]: BreakPoint} = {};\n  defaults.forEach(bp => {\n    dict[bp.alias] = bp;\n  });\n  // Merge custom breakpoints\n  custom.forEach((bp: BreakPoint) => {\n    if (dict[bp.alias]) {\n      extendObject(dict[bp.alias], bp);\n    } else {\n      dict[bp.alias] = bp;\n    }\n  });\n\n  return validateSuffixes(Object.keys(dict).map(k => dict[k]));\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, NgZone, PLATFORM_ID} from '@angular/core';\nimport {DOCUMENT, isPlatformBrowser} from '@angular/common';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\n\nimport {MediaChange} from '../media-change';\n\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\n@Injectable({providedIn: 'root'})\nexport class MatchMedia {\n  protected _registry = new Map<string, MediaQueryList>();\n  protected _source = new BehaviorSubject<MediaChange>(new MediaChange(true));\n  protected _observable$ = this._source.asObservable();\n\n  constructor(protected _zone: NgZone,\n              @Inject(PLATFORM_ID) protected _platformId: Object,\n              @Inject(DOCUMENT) protected _document: any) {\n  }\n\n  /**\n   * For the specified mediaQuery?\n   */\n  isActive(mediaQuery: string): boolean {\n    const mql = this._registry.get(mediaQuery);\n    return !!mql ? mql.matches : false;\n  }\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * Typically used by the MediaQueryAdaptor; optionally available to components\n   * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n   *\n   * NOTE: if a mediaQuery is not specified, then ALL mediaQuery activations will\n   *       be announced.\n   */\n  observe(mediaQuery?: string): Observable<MediaChange> {\n    if (mediaQuery) {\n      this.registerQuery(mediaQuery);\n    }\n\n    return this._observable$.pipe(\n      filter(change => (mediaQuery ? (change.mediaQuery === mediaQuery) : true))\n    );\n  }\n\n  /**\n   * Based on the BreakPointRegistry provider, register internal listeners for each unique\n   * mediaQuery. Each listener emits specific MediaChange data to observers\n   */\n  registerQuery(mediaQuery: string | string[]) {\n    const list = Array.isArray(mediaQuery) ? Array.from(new Set(mediaQuery)) : [mediaQuery];\n\n    if (list.length > 0) {\n      buildQueryCss(list, this._document);\n    }\n\n    list.forEach(query => {\n      const onMQLEvent = (e: MediaQueryListEvent) => {\n        this._zone.run(() => this._source.next(new MediaChange(e.matches, query)));\n      };\n\n      let mql = this._registry.get(query);\n\n      if (!mql) {\n        mql = this._buildMQL(query);\n        mql.addListener(onMQLEvent);\n        this._registry.set(query, mql);\n      }\n\n      if (mql.matches) {\n        onMQLEvent(mql as unknown as MediaQueryListEvent);\n      }\n    });\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected _buildMQL(query: string): MediaQueryList {\n    return constructMql(query, isPlatformBrowser(this._platformId));\n  }\n}\n\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES: {[key: string]: any} = {};\n\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param mediaQueries\n * @param _document\n */\nfunction buildQueryCss(mediaQueries: string[], _document: Document) {\n  const list = mediaQueries.filter(it => !ALL_STYLES[it]);\n  if (list.length > 0) {\n    const query = list.join(', ');\n\n    try {\n      const styleEl = _document.createElement('style');\n\n      styleEl.setAttribute('type', 'text/css');\n      if (!(styleEl as any).styleSheet) {\n        const cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n` ;\n        styleEl.appendChild(_document.createTextNode(cssText));\n      }\n\n      _document.head!.appendChild(styleEl);\n\n      // Store in private global registry\n      list.forEach(mq => ALL_STYLES[mq] = styleEl);\n\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nfunction constructMql(query: string, isBrowser: boolean): MediaQueryList {\n  const canListen = isBrowser && !!(<any>window).matchMedia('all').addListener;\n\n  return canListen ? (<any>window).matchMedia(query) : {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {\n    },\n    removeListener: () => {\n    }\n  } as unknown as MediaQueryList;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {MediaChange} from './media-change';\nimport {BreakPoint} from './breakpoints/break-point';\nimport {extendObject} from '../utils/object-extend';\n\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n */\nexport function mergeAlias(dest: MediaChange, source: BreakPoint | null) {\n  return extendObject(dest, source ? {\n        mqAlias: source.alias,\n        suffix: source.suffix\n      } : {});\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n */\nexport function applyCssPrefixes(target: {[key: string]: any | null}) {\n  for (let key in target) {\n    let value = target[key] || '';\n\n    switch (key) {\n      case 'display':\n        if (value === 'flex') {\n          target['display'] = [\n            '-webkit-flex',\n            'flex'\n          ];\n        } else if (value === 'inline-flex') {\n          target['display'] = [\n            '-webkit-inline-flex',\n            'inline-flex'\n          ];\n        } else {\n          target['display'] = value;\n        }\n        break;\n\n      case 'align-items':\n      case 'align-self':\n      case 'align-content':\n      case 'flex':\n      case 'flex-basis':\n      case 'flex-flow':\n      case 'flex-grow':\n      case 'flex-shrink':\n      case 'flex-wrap':\n      case 'justify-content':\n        target['-webkit-' + key] = value;\n        break;\n\n      case 'flex-direction':\n        value = value || 'row';\n        target['-webkit-flex-direction'] = value;\n        target['flex-direction'] = value;\n        break;\n\n      case 'order':\n        target['order'] = target['-webkit-' + key] = isNaN(+value) ? '0' : value;\n        break;\n    }\n  }\n  return target;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n /**\n * The flex API permits 3 or 1 parts of the value:\n *    - `flex-grow flex-shrink flex-basis`, or\n *    - `flex-basis`\n */\nexport function validateBasis(basis: string, grow = '1', shrink = '1'): string[] {\n  let parts = [grow, shrink, basis];\n\n  let j = basis.indexOf('calc');\n  if (j > 0) {\n    parts[2] = _validateCalcValue(basis.substring(j).trim());\n    let matches = basis.substr(0, j).trim().split(' ');\n    if (matches.length == 2) {\n      parts[0] = matches[0];\n      parts[1] = matches[1];\n    }\n  } else if (j == 0) {\n    parts[2] = _validateCalcValue(basis.trim());\n  } else {\n    let matches = basis.split(' ');\n    parts = (matches.length === 3) ? matches : [\n          grow, shrink, basis\n        ];\n  }\n\n  return parts;\n}\n\n\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n */\nfunction _validateCalcValue(calc: string): string {\n  return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\nimport {BROWSER_PROVIDER} from './browser-provider';\n\n/**\n * *****************************************************************\n * Define module for the MediaQuery API\n * *****************************************************************\n */\n\n@NgModule({\n  providers: [BROWSER_PROVIDER]\n})\nexport class CoreModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport type MediaQuerySubscriber = (changes: MediaChange) => void;\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nexport class MediaChange {\n  property: string = '';\n  value: any;\n\n  constructor(public matches = false,       // Is the mq currently activated\n              public mediaQuery = 'all',    // e.g.   (min-width: 600px) and (max-width: 959px)\n              public mqAlias = '',          // e.g.   gt-sm, md, gt-lg\n              public suffix = ''            // e.g.   GtSM, Md, GtLg\n  ) { }\n\n  clone() {\n    return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n  }\n}\n\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\n\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\n@Injectable({providedIn: 'root'})\nexport class StylesheetMap {\n\n  readonly stylesheet = new Map<HTMLElement, Map<string, string|number>>();\n\n  /**\n   * Add an individual style to an HTML element\n   */\n  addStyleToElement(element: HTMLElement, style: string, value: string|number) {\n    const stylesheet = this.stylesheet.get(element);\n    if (stylesheet) {\n      stylesheet.set(style, value);\n    } else {\n      this.stylesheet.set(element, new Map([[style, value]]));\n    }\n  }\n\n  /**\n   * Clear the virtual stylesheet\n   */\n  clearStyles() {\n    this.stylesheet.clear();\n  }\n\n  /**\n   * Retrieve a given style for an HTML element\n   */\n  getStyleForElement(el: HTMLElement, styleName: string): string {\n    const styles = this.stylesheet.get(el);\n    let value = '';\n    if (styles) {\n      const style = styles.get(styleName);\n      if (typeof style === 'number' || typeof style === 'string') {\n        value = style + '';\n      }\n    }\n    return value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n/** a set of configuration options for FlexLayoutModule */\nexport interface LayoutConfigOptions {\n  addFlexToParent?: boolean;\n  addOrientationBps?: boolean;\n  disableDefaultBps?: boolean;\n  disableVendorPrefixes?: boolean;\n  serverLoaded?: boolean;\n  useColumnBasisZero?: boolean;\n}\n\nexport const DEFAULT_CONFIG: LayoutConfigOptions = {\n  addFlexToParent: true,\n  addOrientationBps: false,\n  disableDefaultBps: false,\n  disableVendorPrefixes: false,\n  serverLoaded: false,\n  useColumnBasisZero: true,\n};\n\nexport const LAYOUT_CONFIG = new InjectionToken<LayoutConfigOptions>(\n  'Flex Layout token, config options for the library', {\n    providedIn: 'root',\n    factory: () => DEFAULT_CONFIG\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n */\nexport const SERVER_TOKEN = new InjectionToken<boolean>(\n  'FlexLayoutServerLoaded', {\n    providedIn: 'root',\n    factory: () => false\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {BreakPoint} from '../breakpoints/break-point';\n\nexport const BREAKPOINT = new InjectionToken<BreakPoint|BreakPoint[]|null>(\n  'Flex Layout token, collect all breakpoints into one provider', {\n    providedIn: 'root',\n    factory: () => null\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Subscription} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {MediaChange, MediaQuerySubscriber} from '../media-change';\nimport {BreakPoint} from '../breakpoints/break-point';\nimport {MediaMonitor} from '../media-monitor/media-monitor';\nimport {extendObject} from '../../utils/object-extend';\n\nexport interface BreakPointX extends BreakPoint {\n  key: string;\n  baseKey: string;\n}\n\nexport class KeyOptions {\n  constructor(public baseKey: string,\n              public defaultValue: string|number|boolean,\n              public inputKeys: { [key: string]: any }) {\n  }\n}\n\n/**\n * ResponsiveActivation acts as a proxy between the MonitorMedia service (which emits mediaQuery\n * changes) and the fx API directives. The MQA proxies mediaQuery change events and notifies the\n * directive via the specified callback.\n *\n * - The MQA also determines which directive property should be used to determine the\n *   current change 'value'... BEFORE the original `onMediaQueryChanges()` method is called.\n * - The `ngOnDestroy()` method is also head-hooked to enable auto-unsubscribe from the\n *   MediaQueryServices.\n *\n * NOTE: these interceptions enables the logic in the fx API directives to remain terse and clean.\n */\nexport class ResponsiveActivation {\n  private _activatedInputKey: string = '';\n  private _registryMap: BreakPointX[] = this._buildRegistryMap();\n  private _subscribers: Subscription[] = this._configureChangeObservers();\n\n  /**\n   * Constructor\n   */\n  constructor(private _options: KeyOptions,\n              private _mediaMonitor: MediaMonitor,\n              private _onMediaChanges: MediaQuerySubscriber) {\n  }\n\n  /**\n   * Get a readonly sorted list of the breakpoints corresponding to the directive properties\n   * defined in the HTML markup: the sorting is done from largest to smallest. The order is\n   * important when several media queries are 'registered' and from which, the browser uses the\n   * first matching media query.\n   */\n  get registryFromLargest(): BreakPointX[] {\n    return [...this._registryMap].reverse();\n  }\n\n  /**\n   * Determine which directive @Input() property is currently active (for the viewport size):\n   * The key must be defined (in use) or fallback to the 'closest' overlapping property key\n   * that is defined; otherwise the default property key will be used.\n   * e.g.\n   *      if `<div fxHide fxHide.gt-sm=\"false\">` is used but the current activated mediaQuery alias\n   *      key is `.md` then `.gt-sm` should be used instead\n   */\n  get activatedInputKey(): string {\n    return this._activatedInputKey || this._options.baseKey;\n  }\n\n  /**\n   * Get the currently activated @Input value or the fallback default @Input value\n   */\n  get activatedInput(): any {\n    const key = this.activatedInputKey;\n    return this.hasKeyValue(key) ? this._lookupKeyValue(key) : this._options.defaultValue;\n  }\n\n  /**\n   * Fast validator for presence of attribute on the host element\n   */\n  hasKeyValue(key: string) {\n    return this._options.inputKeys[key] !== undefined;\n  }\n\n  /**\n   * Remove interceptors, restore original functions, and forward the onDestroy() call\n   */\n  destroy() {\n    this._subscribers.forEach(link => link.unsubscribe());\n    this._subscribers = [];\n  }\n\n  /**\n   * For each *defined* API property, register a callback to `_onMonitorEvents( )`\n   * Cache 1..n subscriptions for internal auto-unsubscribes when the the directive destructs\n   */\n  private _configureChangeObservers(): Subscription[] {\n    const subscriptions: Subscription[] = [];\n\n    this._registryMap.forEach(bp => {\n      if (this._keyInUse(bp.key)) {\n        // Inject directive default property key name: to let onMediaChange() calls\n        // know which property is being triggered...\n        const buildChanges = (change: MediaChange) => {\n          change = change.clone();\n          change.property = this._options.baseKey;\n          return change;\n        };\n\n        subscriptions.push(\n          this._mediaMonitor\n              .observe(bp.alias)\n              .pipe(map(buildChanges))\n              .subscribe(change => {\n                this._onMonitorEvents(change);\n              })\n        );\n      }\n    });\n\n    return subscriptions;\n  }\n\n  /**\n   * Build mediaQuery key-hashmap; only for the directive properties that are actually defined/used\n   * in the HTML markup\n   */\n  private _buildRegistryMap() {\n    return this._mediaMonitor.breakpoints\n      .map(bp => <BreakPointX>extendObject({}, bp, {\n        baseKey: this._options.baseKey,         // e.g. layout, hide, self-align, flex-wrap\n        key: this._options.baseKey + bp.suffix  // e.g. layoutGtSm, layoutMd, layoutGtLg\n      }))\n      .filter(bp => this._keyInUse(bp.key));\n  }\n\n  /**\n   * Synchronizes change notifications with the current mq-activated @Input and calculates the\n   * mq-activated input value or the default value\n   */\n  protected _onMonitorEvents(change: MediaChange) {\n    if (change.property === this._options.baseKey) {\n      change.value = this._calculateActivatedValue(change);\n      this._onMediaChanges(change);\n    }\n  }\n\n  /**\n   * Has the key been specified in the HTML markup and thus is intended\n   * to participate in activation processes.\n   */\n  private _keyInUse(key: string): boolean {\n    return this._lookupKeyValue(key) !== undefined;\n  }\n\n  /**\n   *  Map input key associated with mediaQuery activation to closest defined input key\n   *  then return the values associated with the targeted input property\n   *\n   *  !! change events may arrive out-of-order (activate before deactivate)\n   *     so make sure the deactivate is used ONLY when the keys match\n   *     (since a different activate may be in use)\n   */\n  private _calculateActivatedValue(current: MediaChange): any {\n    const currentKey = this._options.baseKey + current.suffix;  // e.g. suffix == 'GtSm',\n    let newKey = this._activatedInputKey;                       // e.g. newKey == hideGtSm\n\n    newKey = current.matches ? currentKey : ((newKey === currentKey) ? '' : newKey);\n\n    this._activatedInputKey = this._validateInputKey(newKey);\n    return this.activatedInput;\n  }\n\n  /**\n   * For the specified input property key, validate it is defined (used in the markup)\n   * If not see if a overlapping mediaQuery-related input key fallback has been defined\n   *\n   * NOTE: scans in the order defined by activeOverLaps (largest viewport ranges -> smallest ranges)\n   */\n  private _validateInputKey(inputKey: string) {\n    const isMissingKey = (key: string) => !this._keyInUse(key);\n\n    if (isMissingKey(inputKey)) {\n      this._mediaMonitor.activeOverlaps.some(bp => {\n        const key = this._options.baseKey + bp.suffix;\n        if (!isMissingKey(key)) {\n          inputKey = key;\n          return true;  // exit .some()\n        }\n        return false;\n      });\n    }\n    return inputKey;\n  }\n\n  /**\n   * Get the value (if any) for the directive instances @Input property (aka key)\n   */\n  private _lookupKeyValue(key: string) {\n    return this._options.inputKeys[key];\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  ElementRef,\n  OnDestroy,\n  SimpleChanges,\n  OnChanges,\n  SimpleChange,\n} from '@angular/core';\n\nimport {buildLayoutCSS} from '../../utils/layout-validator';\nimport {\n  StyleDefinition,\n  StyleUtils,\n} from '../style-utils/style-utils';\nimport {ResponsiveActivation, KeyOptions} from '../responsive-activation/responsive-activation';\nimport {MediaMonitor} from '../media-monitor/media-monitor';\nimport {MediaQuerySubscriber} from '../media-change';\nimport {StyleBuilder} from '../style-builder/style-builder';\n\n/** Abstract base class for the Layout API styling directives. */\nexport abstract class BaseDirective implements OnDestroy, OnChanges {\n\n  /**\n   * Imperatively determine the current activated [input] value;\n   * if called before ngOnInit() this will return `undefined`\n   */\n  get activatedValue(): string | number {\n    return this._mqActivation ? this._mqActivation.activatedInput : undefined;\n  }\n\n  /**\n   * Change the currently activated input value and force-update\n   * the injected CSS (by-passing change detection).\n   *\n   * NOTE: Only the currently activated input value will be modified;\n   *       other input values will NOT be affected.\n   */\n  set activatedValue(value: string | number) {\n    let key = 'baseKey', previousVal;\n\n    if (this._mqActivation) {\n      key = this._mqActivation.activatedInputKey;\n      previousVal = this._inputMap[key];\n      this._inputMap[key] = value;\n    }\n    const change = new SimpleChange(previousVal, value, false);\n\n    this.ngOnChanges({[key]: change} as SimpleChanges);\n  }\n\n  protected constructor(protected _mediaMonitor: MediaMonitor,\n                        protected _elementRef: ElementRef,\n                        protected _styler: StyleUtils,\n                        protected _styleBuilder?: StyleBuilder) {\n  }\n\n  /**\n   * Does this directive have 1 or more responsive keys defined\n   * Note: we exclude the 'baseKey' key (which is NOT considered responsive)\n   */\n  hasResponsiveAPI(baseKey: string) {\n    const totalKeys = Object.keys(this._inputMap).length;\n    const baseValue = this._inputMap[baseKey];\n    return (totalKeys - (!!baseValue ? 1 : 0)) > 0;\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * Use post-component-initialization event to perform extra\n   * querying such as computed Display style\n   */\n  ngOnInit() {\n    this._hasInitialized = true;\n  }\n\n  ngOnChanges(change: SimpleChanges) {\n    throw new Error(`BaseDirective::ngOnChanges should be overridden in subclass: ${change}`);\n  }\n\n  ngOnDestroy() {\n    if (this._mqActivation) {\n      this._mqActivation.destroy();\n    }\n    delete this._mediaMonitor;\n  }\n\n  // *********************************************\n  // Protected Methods\n  // *********************************************\n\n  /** Access to host element's parent DOM node */\n  protected get parentElement(): any {\n    return this._elementRef.nativeElement.parentNode;\n  }\n\n  protected get nativeElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Add styles to the element using predefined style builder */\n  protected addStyles(input: string, parent?: Object) {\n    const builder = this._styleBuilder!;\n    const useCache = builder.shouldCache;\n\n    let genStyles: StyleDefinition | undefined = this._styleCache.get(input);\n\n    if (!genStyles || !useCache) {\n      genStyles = builder.buildStyles(input, parent);\n      if (useCache) {\n        this._styleCache.set(input, genStyles);\n      }\n    }\n\n    this._applyStyleToElement(genStyles);\n    builder.sideEffect(input, genStyles, parent);\n  }\n\n  /** Access the current value (if any) of the @Input property */\n  protected _queryInput(key: string) {\n    return this._inputMap[key];\n  }\n\n  /**\n   * Was the directive's default selector used ?\n   * If not, use the fallback value!\n   */\n  protected _getDefaultVal(key: string, fallbackVal: any): string | boolean {\n    const val = this._queryInput(key);\n    const hasDefaultVal = (val !== undefined && val !== null);\n    return (hasDefaultVal && val !== '') ? val : fallbackVal;\n  }\n\n  /**\n   * Quick accessor to the current HTMLElement's `display` style\n   * Note: this allows us to preserve the original style\n   * and optional restore it when the mediaQueries deactivate\n   */\n  protected _getDisplayStyle(source: HTMLElement = this.nativeElement): string {\n    const query = 'display';\n    return this._styler.lookupStyle(source, query);\n  }\n\n  /** Quick accessor to raw attribute value on the target DOM element */\n  protected _getAttributeValue(attribute: string,\n                               source: HTMLElement = this.nativeElement): string {\n    return this._styler.lookupAttributeValue(source, attribute);\n  }\n\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction).\n   *\n   * Check inline style first then check computed (stylesheet) style.\n   * And optionally add the flow value to element's inline style.\n   */\n  protected _getFlexFlowDirection(target: HTMLElement, addIfMissing = false): string {\n    if (target) {\n      let [value, hasInlineValue] = this._styler.getFlowDirection(target);\n\n      if (!hasInlineValue && addIfMissing) {\n        const style = buildLayoutCSS(value);\n        const elements = [target];\n        this._styler.applyStyleToElements(style, elements);\n      }\n\n      return value.trim();\n    }\n\n    return 'row';\n  }\n\n  /** Applies styles given via string pair or object map to the directive element */\n  protected _applyStyleToElement(style: StyleDefinition,\n                                 value?: string | number,\n                                 element: HTMLElement = this.nativeElement) {\n    this._styler.applyStyleToElement(element, style, value);\n  }\n\n  /** Applies styles given via string pair or object map to the directive's element */\n  protected _applyStyleToElements(style: StyleDefinition, elements: HTMLElement[]) {\n    this._styler.applyStyleToElements(style, elements);\n  }\n\n  /**\n   *  Save the property value; which may be a complex object.\n   *  Complex objects support property chains\n   */\n  protected _cacheInput(key?: string, source?: any) {\n    if (typeof source === 'object') {\n      for (let prop in source) {\n        this._inputMap[prop] = source[prop];\n      }\n    } else {\n      if (!!key) {\n        this._inputMap[key] = source;\n      }\n    }\n  }\n\n  /**\n   *  Build a ResponsiveActivation object used to manage subscriptions to mediaChange notifications\n   *  and intelligent lookup of the directive's property value that corresponds to that mediaQuery\n   *  (or closest match).\n   */\n  protected _listenForMediaQueryChanges(key: string,\n                                        defaultValue: any,\n                                        onMediaQueryChange: MediaQuerySubscriber): ResponsiveActivation { // tslint:disable-line:max-line-length\n    if (!this._mqActivation) {\n      let keyOptions = new KeyOptions(key, defaultValue, this._inputMap);\n      this._mqActivation = new ResponsiveActivation(keyOptions, this._mediaMonitor,\n        (change) => onMediaQueryChange(change));\n    }\n    return this._mqActivation;\n  }\n\n  /** Special accessor to query for all child 'element' nodes regardless of type, class, etc */\n  protected get childrenNodes(): HTMLElement[] {\n    const obj = this.nativeElement.children;\n    const buffer: any[] = [];\n\n    // iterate backwards ensuring that length is an UInt32\n    for (let i = obj.length; i--; ) {\n      buffer[i] = obj[i];\n    }\n    return buffer;\n  }\n\n  protected get hasInitialized() {\n    return this._hasInitialized;\n  }\n\n  /** MediaQuery Activation Tracker */\n  protected _mqActivation?: ResponsiveActivation;\n\n  /** Dictionary of input keys with associated values */\n  protected _inputMap: {[key: string]: any} = {};\n\n  /**\n   * Has the `ngOnInit()` method fired\n   *\n   * Used to allow *ngFor tasks to finish and support queries like\n   * getComputedStyle() during ngOnInit().\n   */\n  protected _hasInitialized = false;\n\n  /** Cache map for style computation */\n  protected _styleCache: Map<string, StyleDefinition> = new Map();\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef} from '@angular/core';\n\nimport {BaseDirective} from './base';\nimport {ResponsiveActivation} from '../responsive-activation/responsive-activation';\nimport {MediaQuerySubscriber} from '../media-change';\nimport {MediaMonitor} from '../media-monitor/media-monitor';\nimport {StyleUtils} from '../style-utils/style-utils';\n\n\n/**\n * Adapter to the BaseDirective abstract class so it can be used via composition.\n * @see BaseDirective\n */\nexport class BaseDirectiveAdapter extends BaseDirective {\n\n  /**\n   * Accessor to determine which @Input property is \"active\"\n   * e.g. which property value will be used.\n   */\n  get activeKey() {\n    let mqa = this._mqActivation;\n    let key = mqa ? mqa.activatedInputKey : this._baseKey;\n    // Note: ClassDirective::SimpleChanges uses 'klazz' instead of 'class' as a key\n    return (key === 'class') ? 'klazz' : key;\n  }\n\n  /** Hash map of all @Input keys/values defined/used */\n  get inputMap() {\n    return this._inputMap;\n  }\n\n  /**\n   * @see BaseDirective._mqActivation\n   */\n  get mqActivation(): ResponsiveActivation {\n    return this._mqActivation!;\n  }\n\n  /**\n   * BaseDirectiveAdapter constructor\n   */\n  constructor(protected _baseKey: string,   // non-responsive @Input property name\n              protected _mediaMonitor: MediaMonitor,\n              protected _elementRef: ElementRef,\n              protected _styler: StyleUtils) {\n    super(_mediaMonitor, _elementRef, _styler);\n  }\n\n  /**\n    * Does this directive have 1 or more responsive keys defined\n    * Note: we exclude the 'baseKey' key (which is NOT considered responsive)\n    */\n  hasResponsiveAPI() {\n   return super.hasResponsiveAPI(this._baseKey);\n  }\n\n  /**\n   * @see BaseDirective._queryInput\n   */\n  queryInput(key: string | null) {\n    return key ? this._queryInput(key) : undefined;\n  }\n\n  /**\n   *  Save the property value.\n   */\n  cacheInput(key?: string, source?: any, cacheRaw = false) {\n    if (cacheRaw) {\n      this._cacheInputRaw(key, source);\n    } else if (Array.isArray(source)) {\n      this._cacheInputArray(key, source);\n    } else if (typeof source === 'object') {\n      this._cacheInputObject(key, source);\n    } else if (typeof source === 'string') {\n      this._cacheInputString(key, source);\n    } else {\n      throw new Error(\n        `Invalid class value '${key}' provided. Did you want to cache the raw value?`\n      );\n    }\n  }\n\n  /**\n   * @see BaseDirective._listenForMediaQueryChanges\n   */\n  listenForMediaQueryChanges(key: string,\n                             defaultValue: any,\n                             onMediaQueryChange: MediaQuerySubscriber): ResponsiveActivation {\n    return this._listenForMediaQueryChanges(key, defaultValue, onMediaQueryChange);\n  }\n\n  // ************************************************************\n  // Protected Methods\n  // ************************************************************\n\n  /**\n   * No implicit transforms of the source.\n   * Required when caching values expected later for KeyValueDiffers\n   */\n  protected _cacheInputRaw(key?: string, source?: any) {\n    if (key) {\n      this._inputMap[key] = source;\n    }\n  }\n\n  /**\n   *  Save the property value for Array values.\n   */\n  protected _cacheInputArray(key = '', source?: boolean[]) {\n    this._inputMap[key] = source ? source.join(' ') : '';\n  }\n\n  /**\n   *  Save the property value for key/value pair values.\n   */\n  protected _cacheInputObject(key = '', source?: { [key: string]: boolean }) {\n    let classes: string[] = [];\n    if (source) {\n      for (let prop in source) {\n        if (!!source[prop]) {\n          classes.push(prop);\n        }\n      }\n    }\n    this._inputMap[key] = classes.join(' ');\n  }\n\n  /**\n   *  Save the property value for string values.\n   */\n  protected _cacheInputString(key = '', source?: string) {\n    this._inputMap[key] = source;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {BreakPoint} from '../break-point';\n\nexport const RESPONSIVE_ALIASES = [\n  'xs', 'gt-xs', 'sm', 'gt-sm', 'md', 'gt-md', 'lg', 'gt-lg', 'xl'\n];\n\nexport const DEFAULT_BREAKPOINTS: BreakPoint[] = [\n  {\n    alias: 'xs',\n    mediaQuery: '(min-width: 0px) and (max-width: 599px)'\n  },\n  {\n    alias: 'gt-xs',\n    overlapping: true,\n    mediaQuery: '(min-width: 600px)'\n  },\n  {\n    alias: 'lt-sm',\n    overlapping: true,\n    mediaQuery: '(max-width: 599px)'\n  },\n  {\n    alias: 'sm',\n    mediaQuery: '(min-width: 600px) and (max-width: 959px)'\n  },\n  {\n    alias: 'gt-sm',\n    overlapping: true,\n    mediaQuery: '(min-width: 960px)'\n  },\n  {\n    alias: 'lt-md',\n    overlapping: true,\n    mediaQuery: '(max-width: 959px)'\n  },\n  {\n    alias: 'md',\n    mediaQuery: '(min-width: 960px) and (max-width: 1279px)'\n  },\n  {\n    alias: 'gt-md',\n    overlapping: true,\n    mediaQuery: '(min-width: 1280px)'\n  },\n  {\n    alias: 'lt-lg',\n    overlapping: true,\n    mediaQuery: '(max-width: 1279px)'\n  },\n  {\n    alias: 'lg',\n    mediaQuery: '(min-width: 1280px) and (max-width: 1919px)'\n  },\n  {\n    alias: 'gt-lg',\n    overlapping: true,\n    mediaQuery: '(min-width: 1920px)'\n  },\n  {\n    alias: 'lt-xl',\n    overlapping: true,\n    mediaQuery: '(max-width: 1919px)'\n  },\n  {\n    alias: 'xl',\n    mediaQuery: '(min-width: 1920px) and (max-width: 5000px)'\n  }\n];\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BreakPoint} from '../break-point';\n\n/* tslint:disable */\nconst HANDSET_PORTRAIT  = '(orientation: portrait) and (max-width: 599px)';\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959px)';\n\nconst TABLET_LANDSCAPE  = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279px)';\nconst TABLET_PORTRAIT   = '(orientation: portrait) and (min-width: 600px) and (max-width: 839px)';\n\nconst WEB_PORTRAIT      = '(orientation: portrait) and (min-width: 840px)';\nconst WEB_LANDSCAPE     = '(orientation: landscape) and (min-width: 1280px)';\n\nexport const ScreenTypes = {\n  'HANDSET'           : `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n  'TABLET'            : `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n  'WEB'               : `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n\n  'HANDSET_PORTRAIT'  : `${HANDSET_PORTRAIT}`,\n  'TABLET_PORTRAIT'   : `${TABLET_PORTRAIT} `,\n  'WEB_PORTRAIT'      : `${WEB_PORTRAIT}`,\n\n  'HANDSET_LANDSCAPE' : `${HANDSET_LANDSCAPE}]`,\n  'TABLET_LANDSCAPE'  : `${TABLET_LANDSCAPE}`,\n  'WEB_LANDSCAPE'     : `${WEB_LANDSCAPE}`\n};\n\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\nexport const ORIENTATION_BREAKPOINTS : BreakPoint[] = [\n  {'alias': 'handset',            'mediaQuery': ScreenTypes.HANDSET},\n  {'alias': 'handset.landscape',  'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE},\n  {'alias': 'handset.portrait',   'mediaQuery': ScreenTypes.HANDSET_PORTRAIT},\n\n  {'alias': 'tablet',             'mediaQuery': ScreenTypes.TABLET},\n  {'alias': 'tablet.landscape',   'mediaQuery': ScreenTypes.TABLET},\n  {'alias': 'tablet.portrait',    'mediaQuery': ScreenTypes.TABLET_PORTRAIT},\n\n  {'alias': 'web',                'mediaQuery': ScreenTypes.WEB, overlapping : true },\n  {'alias': 'web.landscape',      'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping : true },\n  {'alias': 'web.portrait',       'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping : true }\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken} from '@angular/core';\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINT} from '../tokens/breakpoint-token';\nimport {DEFAULT_BREAKPOINTS} from '../breakpoints/data/break-points';\nimport {ORIENTATION_BREAKPOINTS} from '../breakpoints/data/orientation-break-points';\nimport {mergeByAlias} from '../breakpoints/breakpoint-tools';\nimport {LAYOUT_CONFIG} from '../tokens/library-config';\n\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n */\nexport const BREAKPOINTS =\n  new InjectionToken<BreakPoint[]>('Token (@angular/flex-layout) Breakpoints', {\n    providedIn: 'root',\n    factory: () => {\n      const breakpoints: any = inject(BREAKPOINT);\n      const layoutConfig = inject(LAYOUT_CONFIG);\n      const bpFlattenArray: BreakPoint[] = [].concat.apply([], (breakpoints || [])\n        .map((v: BreakPoint | BreakPoint[]) => Array.isArray(v) ? v : [v]));\n      const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS)\n        .concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n\n      return mergeByAlias(builtIns, bpFlattenArray);\n    }\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable, Inject} from '@angular/core';\n\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINTS} from './break-points-token';\n\n\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\n@Injectable({providedIn: 'root'})\nexport class BreakPointRegistry {\n\n  constructor(@Inject(BREAKPOINTS) private _registry: BreakPoint[]) {\n  }\n\n  /**\n   * Accessor to raw list\n   */\n  get items(): BreakPoint[] {\n    return [...this._registry];\n  }\n\n  /**\n   * Accessor to sorted list used for registration with matchMedia API\n   *\n   * NOTE: During breakpoint registration, we want to register the overlaps FIRST\n   *       so the non-overlaps will trigger the MatchMedia:BehaviorSubject last!\n   *       And the largest, non-overlap, matching breakpoint should be the lastReplay value\n   */\n  get sortedItems(): BreakPoint[] {\n    let overlaps = this._registry.filter(it => it.overlapping === true);\n    let nonOverlaps = this._registry.filter(it => it.overlapping !== true);\n\n    return [...overlaps, ...nonOverlaps];\n  }\n\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   */\n  findByAlias(alias: string): BreakPoint | null {\n    return this._registry.find(bp => bp.alias == alias) || null;\n  }\n\n  findByQuery(query: string): BreakPoint | null {\n    return this._registry.find(bp => bp.mediaQuery == query) || null;\n  }\n\n  /**\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n   * e.g. gt-sm overlaps md, lg, and xl\n   */\n  get overlappings(): BreakPoint[] {\n    return this._registry.filter(it => it.overlapping == true);\n  }\n\n  /**\n   * Get list of all registered (non-empty) breakpoint aliases\n   */\n  get aliases(): string[] {\n    return this._registry.map(it => it.alias);\n  }\n\n  /**\n   * Aliases are mapped to properties using suffixes\n   * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n   * for property layoutGtSM.\n   */\n  get suffixes(): string[] {\n    return this._registry.map(it => !!it.suffix ? it.suffix : '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, NgZone, PLATFORM_ID} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\nimport {MatchMedia} from '../match-media';\nimport {BreakPointRegistry} from '../../breakpoints/break-point-registry';\n\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\n@Injectable()\nexport class MockMatchMedia extends MatchMedia {\n\n  /** Special flag used to test BreakPoint registrations with MatchMedia */\n  autoRegisterQueries = true;\n\n  /**\n   * Allow fallback to overlapping mediaQueries to determine\n   * activatedInput(s).\n   */\n  useOverlaps = false;\n\n  protected _registry: Map<string, MockMediaQueryList> = new Map();\n\n  constructor(_zone: NgZone,\n              @Inject(PLATFORM_ID) _platformId: Object,\n              @Inject(DOCUMENT) _document: any,\n              private _breakpoints: BreakPointRegistry) {\n    super(_zone, _platformId, _document);\n  }\n\n  /** Easy method to clear all listeners for all mediaQueries */\n  clearAll() {\n    this._registry.forEach((mql: MockMediaQueryList) => {\n      mql.destroy();\n    });\n    this._registry.clear();\n    this.useOverlaps = false;\n  }\n\n  /** Feature to support manual, simulated activation of a mediaQuery. */\n  activate(mediaQuery: string, useOverlaps = false): boolean {\n    useOverlaps = useOverlaps || this.useOverlaps;\n    mediaQuery = this._validateQuery(mediaQuery);\n\n    if (useOverlaps || !this.isActive(mediaQuery)) {\n      this._deactivateAll();\n\n      this._registerMediaQuery(mediaQuery);\n      this._activateWithOverlaps(mediaQuery, useOverlaps);\n    }\n\n    return this.hasActivated;\n  }\n\n  /** Converts an optional mediaQuery alias to a specific, valid mediaQuery */\n  _validateQuery(queryOrAlias: string) {\n    const bp = this._breakpoints.findByAlias(queryOrAlias);\n    return (bp && bp.mediaQuery) || queryOrAlias;\n  }\n\n  /**\n   * Manually activate any overlapping mediaQueries to simulate\n   * similar functionality in the window.matchMedia()\n   */\n  private _activateWithOverlaps(mediaQuery: string, useOverlaps: boolean): boolean {\n    if (useOverlaps) {\n      const bp = this._breakpoints.findByQuery(mediaQuery);\n      const alias = bp ? bp.alias : 'unknown';\n\n      // Simulate activation of overlapping lt-<XXX> ranges\n      switch (alias) {\n        case 'lg'   :\n          this._activateByAlias('lt-xl');\n          break;\n        case 'md'   :\n          this._activateByAlias('lt-xl, lt-lg');\n          break;\n        case 'sm'   :\n          this._activateByAlias('lt-xl, lt-lg, lt-md');\n          break;\n        case 'xs'   :\n          this._activateByAlias('lt-xl, lt-lg, lt-md, lt-sm');\n          break;\n      }\n\n      // Simulate activate of overlapping gt-<xxxx> mediaQuery ranges\n      switch (alias) {\n        case 'xl'   :\n          this._activateByAlias('gt-lg, gt-md, gt-sm, gt-xs');\n          break;\n        case 'lg'   :\n          this._activateByAlias('gt-md, gt-sm, gt-xs');\n          break;\n        case 'md'   :\n          this._activateByAlias('gt-sm, gt-xs');\n          break;\n        case 'sm'   :\n          this._activateByAlias('gt-xs');\n          break;\n      }\n    }\n    // Activate last since the responsiveActivation is watching *this* mediaQuery\n    return this._activateByQuery(mediaQuery);\n  }\n\n  /**\n   *\n   */\n  private _activateByAlias(aliases: string) {\n    const activate = (alias: string) => {\n      const bp = this._breakpoints.findByAlias(alias);\n      this._activateByQuery(bp ? bp.mediaQuery : alias);\n    };\n    aliases.split(',').forEach(alias => activate(alias.trim()));\n  }\n\n  /**\n   *\n   */\n  private _activateByQuery(mediaQuery: string) {\n    const mql = this._registry.get(mediaQuery)!;\n    const alreadyAdded = this._actives\n      .reduce((found, it) => (found || (mql && (it.media === mql.media))), false);\n\n    if (mql && !alreadyAdded) {\n      this._actives.push(mql.activate());\n    }\n    return this.hasActivated;\n  }\n\n  /** Deactivate all current Mock MQLs */\n  private _deactivateAll() {\n    if (this._actives.length) {\n      // Deactivate all current MQLs and reset the buffer\n      for (const it of this._actives) {\n        it.deactivate();\n      }\n      this._actives = [];\n    }\n    return this;\n  }\n\n  /** Insure the mediaQuery is registered with MatchMedia */\n  private _registerMediaQuery(mediaQuery: string) {\n    if (!this._registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this.registerQuery(mediaQuery);\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected _buildMQL(query: string): MediaQueryList {\n    return new MockMediaQueryList(query);\n  }\n\n  protected get hasActivated() {\n    return this._actives.length > 0;\n  }\n\n  private _actives: MockMediaQueryList[] = [];\n}\n\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nexport class MockMediaQueryList implements MediaQueryList {\n  private _isActive = false;\n  private _listeners: MediaQueryListListener[] = [];\n\n  get matches(): boolean {\n    return this._isActive;\n  }\n\n  get media(): string {\n    return this._mediaQuery;\n  }\n\n  constructor(private _mediaQuery: string) {}\n\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n\n  /** Notify all listeners that 'matches === TRUE' */\n  activate(): MockMediaQueryList {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(null, this);\n      });\n    }\n    return this;\n  }\n\n  /** Notify all listeners that 'matches === false' */\n  deactivate(): MockMediaQueryList {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(null, this);\n      });\n    }\n    return this;\n  }\n\n  /** Add a listener to our internal list to activate later */\n  addListener(listener: MediaQueryListListener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = listener!;\n      cb.call(null, this);\n    }\n  }\n\n  /** Don't need to remove listeners in the testing environment */\n  removeListener(_: EventListenerOrEventListenerObject | null) {\n  }\n\n  addEventListener<K extends keyof\n    MediaQueryListEventMap>(_: K,\n                            __: (this: MediaQueryList,\n                                 ev: MediaQueryListEventMap[K]) => any,\n                            ___?: boolean | AddEventListenerOptions): void;\n  addEventListener(_: string,\n                   __: EventListenerOrEventListenerObject,\n                   ___?: boolean | AddEventListenerOptions) {\n  }\n\n  removeEventListener<K extends keyof\n    MediaQueryListEventMap>(_: K,\n                            __: (this: MediaQueryList,\n                                  ev: MediaQueryListEventMap[K]) => any,\n                            ___?: boolean | EventListenerOptions): void;\n  removeEventListener(_: string,\n                      __: EventListenerOrEventListenerObject,\n                      ___?: boolean | EventListenerOptions) {\n  }\n\n  dispatchEvent(_: Event): boolean {\n    return false;\n  }\n\n  onchange: MediaQueryListListener = null;\n}\n\n/**\n * Pre-configured provider for MockMatchMedia\n */\nexport const MockMatchMediaProvider = {  // tslint:disable-line:variable-name\n  provide: MatchMedia,\n  useClass: MockMatchMedia\n};\n\ntype MediaQueryListListener = ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone, PLATFORM_ID} from '@angular/core';\n\nimport {BreakPoint} from '../breakpoints/break-point';\nimport {MatchMedia} from './match-media';\n\n/**\n * Special server-only class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nexport class ServerMediaQueryList implements MediaQueryList {\n  private _isActive = false;\n  private _listeners: MediaQueryListListener[] = [];\n\n  get matches(): boolean {\n    return this._isActive;\n  }\n\n  get media(): string {\n    return this._mediaQuery;\n  }\n\n  constructor(private _mediaQuery: string) {}\n\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n\n  /** Notify all listeners that 'matches === TRUE' */\n  activate(): ServerMediaQueryList {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(null, this);\n      });\n    }\n    return this;\n  }\n\n  /** Notify all listeners that 'matches === false' */\n  deactivate(): ServerMediaQueryList {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(null, this);\n      });\n    }\n    return this;\n  }\n\n  /** Add a listener to our internal list to activate later */\n  addListener(listener: MediaQueryListListener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = listener!;\n      cb.call(null, this);\n    }\n  }\n\n  /** Don't need to remove listeners in the server environment */\n  removeListener(_: EventListenerOrEventListenerObject | null) {\n  }\n\n  addEventListener<K extends keyof\n    MediaQueryListEventMap>(_: K,\n                            __: (this: MediaQueryList,\n                                 ev: MediaQueryListEventMap[K]) => any,\n                            ___?: boolean | AddEventListenerOptions): void;\n  addEventListener(_: string,\n                   __: EventListenerOrEventListenerObject,\n                   ___?: boolean | AddEventListenerOptions) {\n  }\n\n  removeEventListener<K extends keyof\n    MediaQueryListEventMap>(_: K,\n                            __: (this: MediaQueryList,\n                                 ev: MediaQueryListEventMap[K]) => any,\n                            ___?: boolean | EventListenerOptions): void;\n  removeEventListener(_: string,\n                      __: EventListenerOrEventListenerObject,\n                      ___?: boolean | EventListenerOptions) {\n  }\n\n  dispatchEvent(_: Event): boolean {\n    return false;\n  }\n\n  onchange: MediaQueryListListener = null;\n}\n\n/**\n * Special server-only implementation of MatchMedia that uses the above\n * ServerMediaQueryList as its internal representation\n *\n * Also contains methods to activate and deactivate breakpoints\n */\n@Injectable()\nexport class ServerMatchMedia extends MatchMedia {\n  protected _registry: Map<string, ServerMediaQueryList> = new Map();\n\n  constructor(protected _zone: NgZone,\n              @Inject(PLATFORM_ID) protected _platformId: Object,\n              @Inject(DOCUMENT) protected _document: any) {\n    super(_zone, _platformId, _document);\n  }\n\n  /** Activate the specified breakpoint if we're on the server, no-op otherwise */\n  activateBreakpoint(bp: BreakPoint) {\n    const lookupBreakpoint = this._registry.get(bp.mediaQuery);\n    if (lookupBreakpoint) {\n      lookupBreakpoint.activate();\n    }\n  }\n\n  /** Deactivate the specified breakpoint if we're on the server, no-op otherwise */\n  deactivateBreakpoint(bp: BreakPoint) {\n    const lookupBreakpoint = this._registry.get(bp.mediaQuery);\n    if (lookupBreakpoint) {\n      lookupBreakpoint.deactivate();\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected _buildMQL(query: string): ServerMediaQueryList {\n    return new ServerMediaQueryList(query);\n  }\n}\n\ntype MediaQueryListListener = ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\n\nimport {BreakPoint} from '../breakpoints/break-point';\nimport {BreakPointRegistry} from '../breakpoints/break-point-registry';\nimport {MatchMedia} from '../match-media/match-media';\nimport {MediaChange} from '../media-change';\nimport {mergeAlias} from '../add-alias';\n\n\n/**\n * MediaMonitor uses the MatchMedia service to observe mediaQuery changes (both activations and\n * deactivations). These changes are are published as MediaChange notifications.\n *\n * Note: all notifications will be performed within the\n * ng Zone to trigger change detections and component updates.\n *\n * It is the MediaMonitor that:\n *  - auto registers all known breakpoints\n *  - injects alias information into each raw MediaChange event\n *  - provides accessor to the currently active BreakPoint\n *  - publish list of overlapping BreakPoint(s); used by ResponsiveActivation\n */\n@Injectable({providedIn: 'root'})\nexport class MediaMonitor {\n  constructor(private _breakpoints: BreakPointRegistry, private _matchMedia: MatchMedia) {\n    this._registerBreakpoints();\n  }\n\n  /**\n   * Read-only accessor to the list of breakpoints configured in the BreakPointRegistry provider\n   */\n  get breakpoints(): BreakPoint[] {\n    return [...this._breakpoints.items];\n  }\n\n  get activeOverlaps(): BreakPoint[] {\n    return this._breakpoints.overlappings\n      .reverse()\n      .filter(bp => this._matchMedia.isActive(bp.mediaQuery));\n  }\n\n  get active(): BreakPoint | null {\n    const items = this.breakpoints.reverse();\n    const first = items.find(bp => bp.alias !== '' && this._matchMedia.isActive(bp.mediaQuery));\n    return first || null;\n  }\n\n  /**\n   * For the specified mediaQuery alias, is the mediaQuery range active?\n   */\n  isActive(alias: string): boolean {\n    const bp = this._breakpoints.findByAlias(alias) || this._breakpoints.findByQuery(alias);\n    return this._matchMedia.isActive(bp ? bp.mediaQuery : alias);\n  }\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * If specific breakpoint is observed, only return *activated* events\n   * otherwise return all events for BOTH activated + deactivated changes.\n   */\n  observe(alias: string = ''): Observable<MediaChange> {\n    const bp = this._breakpoints.findByAlias(alias) || this._breakpoints.findByQuery(alias);\n    const hasAlias = (change: MediaChange) => (bp ? change.mqAlias !== '' : true);\n    // Note: the raw MediaChange events [from MatchMedia] do not contain important alias information\n\n    const media$ = this._matchMedia.observe(bp ? bp.mediaQuery : alias);\n    return media$.pipe(\n      map(change => mergeAlias(change, bp)),\n      filter(hasAlias)\n    );\n  }\n\n  /**\n   * Immediate calls to matchMedia() to establish listeners\n   * and prepare for immediate subscription notifications\n   */\n  private _registerBreakpoints() {\n    const queries = this._breakpoints.sortedItems.map(bp => bp.mediaQuery);\n    this._matchMedia.registerQuery(queries);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\nimport {Observable, PartialObserver, Subscribable, Subscription} from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\n\nimport {BreakPointRegistry} from '../breakpoints/break-point-registry';\nimport {MediaChange} from '../media-change';\nimport {MatchMedia} from '../match-media/match-media';\nimport {mergeAlias} from '../add-alias';\nimport {BreakPoint} from '../breakpoints/break-point';\n\n/**\n * Base class for MediaService and pseudo-token for\n * @deprecated use MediaObserver instead\n * @deletion-target v7.0.0-beta.21\n */\nexport abstract class ObservableMedia implements Subscribable<MediaChange> {\n  abstract isActive(query: string): boolean;\n\n  abstract asObservable(): Observable<MediaChange>;\n\n  abstract subscribe(next?: (value: MediaChange) => void,\n                     error?: (error: any) => void,\n                     complete?: () => void): Subscription;\n  abstract subscribe(observer?: PartialObserver<MediaChange>): Subscription;\n}\n\n/**\n * Class internalizes a MatchMedia service and exposes an Subscribable and Observable interface.\n\n * This an Observable with that exposes a feature to subscribe to mediaQuery\n * changes and a validator method (`isActive(<alias>)`) to test if a mediaQuery (or alias) is\n * currently active.\n *\n * !! Only mediaChange activations (not de-activations) are announced by the ObservableMedia\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * !! This is not an actual Observable. It is a wrapper of an Observable used to publish additional\n * methods like `isActive(<alias>). To access the Observable and use RxJS operators, use\n * `.asObservable()` with syntax like media.asObservable().map(....).\n *\n *  @usage\n *\n *  // RxJS\n *  import {filter} from 'rxjs/operators/filter';\n *  import { ObservableMedia } from '@angular/flex-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status : string = '';\n *\n *    constructor(  media:ObservableMedia ) {\n *      let onChange = (change:MediaChange) => {\n *        this.status = change ? `'${change.mqAlias}' = (${change.mediaQuery})` : '';\n *      };\n *\n *      // Subscribe directly or access observable to use filter/map operators\n *      // e.g.\n *      //      media.subscribe(onChange);\n *\n *      media.asObservable()\n *        .pipe(\n *          filter((change:MediaChange) => true)   // silly noop filter\n *        ).subscribe(onChange);\n *    }\n *  }\n *  @deprecated use MediaObserver instead\n *  @deletion-target v7.0.0-beta.21\n */\n@Injectable({providedIn: 'root'})\nexport class MediaService implements ObservableMedia {\n  /**\n   * Should we announce gt-<xxx> breakpoint activations ?\n   */\n  filterOverlaps = true;\n\n  constructor(private breakpoints: BreakPointRegistry,\n              private mediaWatcher: MatchMedia) {\n    this._registerBreakPoints();\n    this.observable$ = this._buildObservable();\n  }\n\n  /**\n   * Test if specified query/alias is active.\n   */\n  isActive(alias: string): boolean {\n    return this.mediaWatcher.isActive(this._toMediaQuery(alias));\n  }\n\n  /**\n   * Proxy to the Observable subscribe method\n   */\n  subscribe(observerOrNext?: PartialObserver<MediaChange> | ((value: MediaChange) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n    if (observerOrNext) {\n      if (typeof observerOrNext === 'object') {\n        return this.observable$.subscribe(observerOrNext.next, observerOrNext.error,\n          observerOrNext.complete);\n      }\n    }\n\n    return this.observable$.subscribe(observerOrNext, error, complete);\n  }\n\n  /**\n   * Access to observable for use with operators like\n   * .filter(), .map(), etc.\n   */\n  asObservable(): Observable<MediaChange> {\n    return this.observable$;\n  }\n\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n\n  /**\n   * Register all the mediaQueries registered in the BreakPointRegistry\n   * This is needed so subscribers can be auto-notified of all standard, registered\n   * mediaQuery activations\n   */\n  private _registerBreakPoints() {\n    const queries = this.breakpoints.sortedItems.map(bp => bp.mediaQuery);\n    this.mediaWatcher.registerQuery(queries);\n  }\n\n  /**\n   * Prepare internal observable\n   *\n   * NOTE: the raw MediaChange events [from MatchMedia] do not\n   *       contain important alias information; as such this info\n   *       must be injected into the MediaChange\n   */\n  private _buildObservable() {\n    const excludeOverlaps = (change: MediaChange) => {\n      const bp = this.breakpoints.findByQuery(change.mediaQuery);\n      return !bp ? true : !(this.filterOverlaps && bp.overlapping);\n    };\n\n    /**\n     * Only pass/announce activations (not de-activations)\n     * Inject associated (if any) alias information into the MediaChange event\n     * Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n     */\n    return this.mediaWatcher.observe().pipe(\n      filter(change => change.matches),\n      filter(excludeOverlaps),\n      map((change: MediaChange) =>\n        mergeAlias(change, this._findByQuery(change.mediaQuery)))\n    );\n  }\n\n  /**\n   * Breakpoint locator by alias\n   */\n  private _findByAlias(alias: string) {\n    return this.breakpoints.findByAlias(alias);\n  }\n\n  /**\n   * Breakpoint locator by mediaQuery\n   */\n  private _findByQuery(query: string) {\n    return this.breakpoints.findByQuery(query);\n  }\n\n  /**\n   * Find associated breakpoint (if any)\n   */\n  private _toMediaQuery(query: string) {\n    const bp: BreakPoint | null = this._findByAlias(query) || this._findByQuery(query);\n    return bp ? bp.mediaQuery : query;\n  }\n\n  private readonly observable$: Observable<MediaChange>;\n}\n\n/**\n * @deprecated\n * @deletion-target v7.0.0-beta.21\n */\nexport const ObservableMediaProvider = { // tslint:disable-line:variable-name\n  provide: ObservableMedia,\n  useClass: MediaService\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\n\nimport {BreakPointRegistry} from '../breakpoints/break-point-registry';\nimport {MediaChange} from '../media-change';\nimport {MatchMedia} from '../match-media/match-media';\nimport {mergeAlias} from '../add-alias';\n\n/**\n * Class internalizes a MatchMedia service and exposes an Observable interface.\n\n * This exposes an Observable with a feature to subscribe to mediaQuery\n * changes and a validator method (`isActive(<alias>)`) to test if a mediaQuery (or alias) is\n * currently active.\n *\n * !! Only mediaChange activations (not de-activations) are announced by the MediaObserver\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * !! This is not an actual Observable. It is a wrapper of an Observable used to publish additional\n * methods like `isActive(<alias>). To access the Observable and use RxJS operators, use\n * `.media$` with syntax like mediaObserver.media$.map(....).\n *\n *  @usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '@angular/flex-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const onChange = (change: MediaChange) => {\n *        this.status = change ? `'${change.mqAlias}' = (${change.mediaQuery})` : '';\n *      };\n *\n *      // Subscribe directly or access observable to use filter/map operators\n *      // e.g. mediaObserver.media$.subscribe(onChange);\n *\n *      mediaObserver.media$()\n *        .pipe(\n *          filter((change: MediaChange) => true)   // silly noop filter\n *        ).subscribe(onChange);\n *    }\n *  }\n */\n@Injectable({providedIn: 'root'})\nexport class MediaObserver {\n  /**\n   * Whether to announce gt-<xxx> breakpoint activations\n   */\n  filterOverlaps = true;\n  readonly media$: Observable<MediaChange>;\n\n  constructor(private breakpoints: BreakPointRegistry, private mediaWatcher: MatchMedia) {\n    this._registerBreakPoints();\n    this.media$ = this._buildObservable();\n  }\n\n  /**\n   * Test if specified query/alias is active.\n   */\n  isActive(alias: string): boolean {\n    return this.mediaWatcher.isActive(this._toMediaQuery(alias));\n  }\n\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n\n  /**\n   * Register all the mediaQueries registered in the BreakPointRegistry\n   * This is needed so subscribers can be auto-notified of all standard, registered\n   * mediaQuery activations\n   */\n  private _registerBreakPoints() {\n    const queries = this.breakpoints.sortedItems.map(bp => bp.mediaQuery);\n    this.mediaWatcher.registerQuery(queries);\n  }\n\n  /**\n   * Prepare internal observable\n   *\n   * NOTE: the raw MediaChange events [from MatchMedia] do not\n   *       contain important alias information; as such this info\n   *       must be injected into the MediaChange\n   */\n  private _buildObservable() {\n    const excludeOverlaps = (change: MediaChange) => {\n      const bp = this.breakpoints.findByQuery(change.mediaQuery);\n      return !bp ? true : !(this.filterOverlaps && bp.overlapping);\n    };\n\n    /**\n     * Only pass/announce activations (not de-activations)\n     * Inject associated (if any) alias information into the MediaChange event\n     * Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n     */\n    return this.mediaWatcher.observe()\n      .pipe(\n        filter(change => change.matches),\n        filter(excludeOverlaps),\n        map((change: MediaChange) =>\n          mergeAlias(change, this._findByQuery(change.mediaQuery))\n        )\n      );\n  }\n\n  /**\n   * Breakpoint locator by alias\n   */\n  private _findByAlias(alias: string) {\n    return this.breakpoints.findByAlias(alias);\n  }\n\n  /**\n   * Breakpoint locator by mediaQuery\n   */\n  private _findByQuery(query: string) {\n    return this.breakpoints.findByQuery(query);\n  }\n\n  /**\n   * Find associated breakpoint (if any)\n   */\n  private _toMediaQuery(query: string) {\n    const bp = this._findByAlias(query) || this._findByQuery(query);\n    return bp ? bp.mediaQuery : query;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, Optional, PLATFORM_ID} from '@angular/core';\nimport {isPlatformBrowser, isPlatformServer} from '@angular/common';\n\nimport {applyCssPrefixes} from '../../utils/auto-prefixer';\nimport {StylesheetMap} from '../stylesheet-map/stylesheet-map';\nimport {SERVER_TOKEN} from '../tokens/server-token';\nimport {LAYOUT_CONFIG, LayoutConfigOptions} from '../tokens/library-config';\n\n@Injectable({providedIn: 'root'})\nexport class StyleUtils {\n\n  constructor(@Optional() private _serverStylesheet: StylesheetMap,\n              @Optional() @Inject(SERVER_TOKEN) private _serverModuleLoaded: boolean,\n              @Inject(PLATFORM_ID) private _platformId: Object,\n              @Inject(LAYOUT_CONFIG) private layoutConfig: LayoutConfigOptions) {}\n\n  /**\n   * Applies styles given via string pair or object map to the directive element\n   */\n  applyStyleToElement(element: HTMLElement,\n                      style: StyleDefinition | string,\n                      value: string | number | null = null) {\n    let styles: StyleDefinition = {};\n    if (typeof style === 'string') {\n      styles[style] = value;\n      style = styles;\n    }\n    styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    this._applyMultiValueStyleToElement(styles, element);\n  }\n\n  /**\n   * Applies styles given via string pair or object map to the directive's element\n   */\n  applyStyleToElements(style: StyleDefinition, elements: HTMLElement[] = []) {\n    const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    elements.forEach(el => {\n      this._applyMultiValueStyleToElement(styles, el);\n    });\n  }\n\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction)\n   *\n   * Check inline style first then check computed (stylesheet) style\n   */\n  getFlowDirection(target: HTMLElement): [string, string] {\n    const query = 'flex-direction';\n    let value = this.lookupStyle(target, query);\n    const hasInlineValue = this.lookupInlineStyle(target, query) ||\n    (isPlatformServer(this._platformId) && this._serverModuleLoaded) ? value : '';\n\n    return [value || 'row', hasInlineValue];\n  }\n\n  /**\n   * Find the DOM element's raw attribute value (if any)\n   */\n  lookupAttributeValue(element: HTMLElement, attribute: string): string {\n    return element.getAttribute(attribute) || '';\n  }\n\n  /**\n   * Find the DOM element's inline style value (if any)\n   */\n  lookupInlineStyle(element: HTMLElement, styleName: string): string {\n    return isPlatformBrowser(this._platformId) ?\n      element.style.getPropertyValue(styleName) : this._getServerStyle(element, styleName);\n  }\n\n  /**\n   * Determine the inline or inherited CSS style\n   * NOTE: platform-server has no implementation for getComputedStyle\n   */\n  lookupStyle(element: HTMLElement, styleName: string, inlineOnly = false): string {\n    let value = '';\n    if (element) {\n      let immediateValue = value = this.lookupInlineStyle(element, styleName);\n      if (!immediateValue) {\n        if (isPlatformBrowser(this._platformId)) {\n          if (!inlineOnly) {\n            value = getComputedStyle(element).getPropertyValue(styleName);\n          }\n        } else {\n          if (this._serverModuleLoaded) {\n            value = this._serverStylesheet.getStyleForElement(element, styleName);\n          }\n        }\n      }\n    }\n\n    // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n    //       in which case getComputedStyle() should determine a valid value.\n    return value.trim();\n  }\n\n  /**\n   * Applies the styles to the element. The styles object map may contain an array of values\n   * Each value will be added as element style\n   * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n   */\n  private _applyMultiValueStyleToElement(styles: StyleDefinition,\n                                         element: HTMLElement) {\n    Object.keys(styles).sort().forEach(key => {\n      const el = styles[key];\n      const values: (string | number | null)[] = Array.isArray(el) ? el : [el];\n      values.sort();\n      for (let value of values) {\n        value = value ? value + '' : '';\n        if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n          isPlatformBrowser(this._platformId) ?\n            element.style.setProperty(key, value) : this._setServerStyle(element, key, value);\n        } else {\n          this._serverStylesheet.addStyleToElement(element, key, value);\n        }\n      }\n    });\n  }\n\n  private _setServerStyle(element: any, styleName: string, styleValue?: string|null) {\n    styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    const styleMap = this._readStyleAttribute(element);\n    styleMap[styleName] = styleValue || '';\n    this._writeStyleAttribute(element, styleMap);\n  }\n\n  private _getServerStyle(element: any, styleName: string): string {\n    const styleMap = this._readStyleAttribute(element);\n    return styleMap[styleName] || '';\n  }\n\n  private _readStyleAttribute(element: any): {[name: string]: string} {\n    const styleMap: {[name: string]: string} = {};\n    const styleAttribute = element.getAttribute('style');\n    if (styleAttribute) {\n      const styleList = styleAttribute.split(/;+/g);\n      for (let i = 0; i < styleList.length; i++) {\n        const style = styleList[i].trim();\n        if (style.length > 0) {\n          const colonIndex = style.indexOf(':');\n          if (colonIndex === -1) {\n            throw new Error(`Invalid CSS style: ${style}`);\n          }\n          const name = style.substr(0, colonIndex).trim();\n          styleMap[name] = style.substr(colonIndex + 1).trim();\n        }\n      }\n    }\n    return styleMap;\n  }\n\n  private _writeStyleAttribute(element: any, styleMap: {[name: string]: string}) {\n    let styleAttrValue = '';\n    for (const key in styleMap) {\n      const newValue = styleMap[key];\n      if (newValue) {\n        styleAttrValue += key + ':' + styleMap[key] + ';';\n      }\n    }\n    element.setAttribute('style', styleAttrValue);\n  }\n}\n\n/**\n * Definition of a css style. Either a property name (e.g. \"flex-basis\") or an object\n * map of property name and value (e.g. {display: 'none', flex-order: 5})\n */\nexport type StyleDefinition = { [property: string]: string | number | null };\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {StyleDefinition} from '../style-utils/style-utils';\n\n/** A class that encapsulates CSS style generation for common directives */\nexport abstract class StyleBuilder {\n\n  /** Whether to cache the generated output styles */\n  shouldCache = true;\n\n  /** Build the styles given an input string and configuration object from a host */\n  abstract buildStyles(input: string, parent?: Object): StyleDefinition;\n\n  /**\n   * Run a side effect computation given the input string and the computed styles\n   * from the build task and the host configuration object\n   * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n   */\n  sideEffect(_input: string, _styles: StyleDefinition, _parent?: Object) {\n  }\n}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","removeStyles","_document","platformId","isPlatformBrowser","classRegex_1","Array","from","querySelectorAll","CLASS_NAME","forEach","el","classList","contains","parentNode","removeChild","className","replace","buildLayoutCSS","value","_a","validateValue","buildCSS","toLowerCase","split","direction","wrap","inline","LAYOUT_VALUES","find","x","INLINE","validateWrapValue","display","box-sizing","flex-direction","flex-wrap","extendObject","dest","sources","_i","arguments","length","TypeError","sources_1","source","key","hasOwnProperty","firstUpperCase","part","first","charAt","remainder","slice","toUpperCase","camelCase","name","ALIAS_DELIMITERS","map","join","validateSuffixes","list","bp","suffix","alias","overlapping","mergeByAlias","defaults","custom","dict","keys","k","buildQueryCss","mediaQueries","filter","it","ALL_STYLES","query","styleEl_1","createElement","setAttribute","styleSheet","cssText","appendChild","createTextNode","mq","e","console","error","constructMql","isBrowser","matchMedia","addListener","matches","media","removeListener","mergeAlias","mqAlias","applyCssPrefixes","target","isNaN","validateBasis","basis","grow","shrink","parts","j","indexOf","_validateCalcValue","substring","trim","substr","calc","setPrototypeOf","__proto__","p","BROWSER_PROVIDER","provide","APP_BOOTSTRAP_LISTENER","useFactory","deps","DOCUMENT","PLATFORM_ID","multi","type","NgModule","args","providers","CoreModule","MediaChange","mediaQuery","property","clone","stylesheet","Map","StylesheetMap","addStyleToElement","element","style","get","set","clearStyles","clear","getStyleForElement","styleName","styles","Injectable","providedIn","DEFAULT_CONFIG","addFlexToParent","addOrientationBps","disableDefaultBps","disableVendorPrefixes","serverLoaded","useColumnBasisZero","LAYOUT_CONFIG","InjectionToken","factory","SERVER_TOKEN","BREAKPOINT","KeyOptions","baseKey","defaultValue","inputKeys","ResponsiveActivation","_options","_mediaMonitor","_onMediaChanges","_activatedInputKey","_registryMap","_buildRegistryMap","_subscribers","_configureChangeObservers","defineProperty","reverse","activatedInputKey","hasKeyValue","_lookupKeyValue","undefined","destroy","link","unsubscribe","subscriptions","_this","_keyInUse","buildChanges","change","push","observe","pipe","subscribe","_onMonitorEvents","breakpoints","_calculateActivatedValue","current","currentKey","newKey","_validateInputKey","activatedInput","inputKey","isMissingKey","activeOverlaps","some","BaseDirective","_elementRef","_styler","_styleBuilder","_inputMap","_hasInitialized","_styleCache","_mqActivation","previousVal","SimpleChange","ngOnChanges","hasResponsiveAPI","ngOnInit","Error","ngOnDestroy","nativeElement","addStyles","input","parent","builder","useCache","shouldCache","genStyles","buildStyles","_applyStyleToElement","sideEffect","_queryInput","_getDefaultVal","fallbackVal","val","_getDisplayStyle","lookupStyle","_getAttributeValue","attribute","lookupAttributeValue","_getFlexFlowDirection","addIfMissing","getFlowDirection","elements","applyStyleToElements","applyStyleToElement","_applyStyleToElements","_cacheInput","prop","_listenForMediaQueryChanges","onMediaQueryChange","keyOptions","obj","children","buffer","i","BaseDirectiveAdapter","_super","_baseKey","call","tslib_1.__extends","mqa","queryInput","cacheInput","cacheRaw","_cacheInputRaw","isArray","_cacheInputArray","_cacheInputObject","_cacheInputString","listenForMediaQueryChanges","classes","RESPONSIVE_ALIASES","DEFAULT_BREAKPOINTS","TABLET_LANDSCAPE","TABLET_PORTRAIT","WEB_PORTRAIT","WEB_LANDSCAPE","ScreenTypes","HANDSET","HANDSET_PORTRAIT","TABLET","WEB","HANDSET_LANDSCAPE","ORIENTATION_BREAKPOINTS","BREAKPOINTS","inject","layoutConfig","bpFlattenArray","concat","apply","v","BreakPointRegistry","_registry","overlaps","nonOverlaps","findByAlias","findByQuery","decorators","Inject","MatchMedia","_zone","_platformId","_source","BehaviorSubject","_observable$","asObservable","isActive","mql","registerQuery","Set","onMQLEvent","run","next","_buildMQL","NgZone","MockMatchMedia","_breakpoints","autoRegisterQueries","useOverlaps","_actives","clearAll","activate","_validateQuery","_deactivateAll","_registerMediaQuery","_activateWithOverlaps","hasActivated","queryOrAlias","_activateByAlias","_activateByQuery","aliases","alreadyAdded","reduce","found","deactivate","has","MockMediaQueryList","_mediaQuery","_isActive","_listeners","onchange","callback","listener","_","addEventListener","___","removeEventListener","dispatchEvent","MockMatchMediaProvider","useClass","ServerMediaQueryList","ServerMatchMedia","activateBreakpoint","lookupBreakpoint","deactivateBreakpoint","MediaMonitor","_matchMedia","_registerBreakpoints","items","overlappings","hasAlias","queries","sortedItems","ObservableMedia","MediaService","mediaWatcher","filterOverlaps","_registerBreakPoints","observable$","_buildObservable","_toMediaQuery","observerOrNext","complete","excludeOverlaps","_findByQuery","_findByAlias","ObservableMediaProvider","MediaObserver","media$","StyleUtils","_serverStylesheet","_serverModuleLoaded","_applyMultiValueStyleToElement","hasInlineValue","lookupInlineStyle","isPlatformServer","getAttribute","getPropertyValue","_getServerStyle","inlineOnly","getComputedStyle","sort","values","values_1","setProperty","_setServerStyle","styleValue","styleMap","_readStyleAttribute","_writeStyleAttribute","styleAttribute","styleList","colonIndex","name_1","styleAttrValue","Optional","Boolean","StyleBuilder","_input","_styles","_parent"],"mappings":"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"}