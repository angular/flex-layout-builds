{"version":3,"file":"flex-layout-server.umd.min.js","sources":["../../src/lib/server/server-provider.ts","../../src/lib/server/module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {BEFORE_APP_SERIALIZED} from '@angular/platform-server';\n\nimport {\n  BreakPoint,\n  BREAKPOINTS,\n  CLASS_NAME,\n  MatchMedia,\n  ServerStylesheet,\n  SERVER_TOKEN,\n  ServerMatchMedia\n} from '@angular/flex-layout';\n\nlet nextId = 0;\nconst IS_DEBUG_MODE = false;\n\n/**\n * create @media queries based on a virtual stylesheet\n * * Adds a unique class to each element and stores it\n *   in a shared classMap for later reuse\n * @param stylesheet the virtual stylesheet that stores styles for each\n *        element\n * @param mediaQuery the given @media CSS selector for the current breakpoint\n * @param classMap the map of HTML elements to class names to avoid duplications\n */\nfunction generateCss(stylesheet: Map<HTMLElement, Map<string, string|number>>,\n                     mediaQuery: string,\n                     classMap: Map<HTMLElement, string>) {\n  let styleText = IS_DEBUG_MODE ? `\n        @media ${mediaQuery} {` : `@media ${mediaQuery}{`;\n  stylesheet.forEach((styles, el) => {\n    let className = classMap.get(el);\n    if (!className) {\n      className = `${CLASS_NAME}${nextId++}`;\n      classMap.set(el, className);\n    }\n    el.classList.add(className);\n    styleText += IS_DEBUG_MODE ? `\n          .${className} {` : `.${className}{`;\n    styles.forEach((v, k) => {\n      if (v) {\n        styleText += IS_DEBUG_MODE ? `\n              ${k}: ${v};` : `${k}:${v};`;\n      }\n    });\n    styleText += IS_DEBUG_MODE ? `\n          }` : '}';\n  });\n  styleText += IS_DEBUG_MODE ? `\n        }\\n` : '}';\n\n  return styleText;\n}\n\n/**\n * Activate all of the registered breakpoints in sequence, and then\n * retrieve the associated stylings from the virtual stylesheet\n * @param serverSheet the virtual stylesheet that stores styles for each\n *        element\n * @param matchMedia the service to activate/deactive breakpoints\n * @param breakpoints the registered breakpoints to activate/deactivate\n */\nexport function generateStaticFlexLayoutStyles(serverSheet: ServerStylesheet,\n                                               matchMedia: MatchMedia,\n                                               breakpoints: BreakPoint[]) {\n  // Store the custom classes in the following map, that way only\n  // one class gets allocated per HTMLElement, and each class can\n  // be referenced in the static media queries\n  const classMap = new Map<HTMLElement, string>();\n\n  // Get the initial stylings for all of the directives, and initialize\n  // the fallback block of stylings, then reverse the breakpoints list\n  // to traverse in the proper order\n  const defaultStyles = new Map(serverSheet.stylesheet);\n  let styleText = generateCss(defaultStyles, 'all', classMap);\n\n  breakpoints.reverse();\n  breakpoints.forEach((bp, i) => {\n    serverSheet.clearStyles();\n    (matchMedia as ServerMatchMedia).activateBreakpoint(bp);\n    const stylesheet = new Map(serverSheet.stylesheet);\n    if (stylesheet.size > 0) {\n      styleText += generateCss(stylesheet, bp.mediaQuery, classMap);\n    }\n    (matchMedia as ServerMatchMedia).deactivateBreakpoint(breakpoints[i]);\n  });\n\n  return styleText;\n}\n\n/**\n * Create a style tag populated with the dynamic stylings from Flex\n * components and attach it to the head of the DOM\n */\nexport function FLEX_SSR_SERIALIZER_FACTORY(serverSheet: ServerStylesheet,\n                                            matchMedia: MatchMedia,\n                                            _document: Document,\n                                            breakpoints: BreakPoint[]) {\n  return () => {\n    // This is the style tag that gets inserted into the head of the DOM,\n    // populated with the manual media queries\n    const styleTag = _document.createElement('style');\n    const styleText = generateStaticFlexLayoutStyles(serverSheet, matchMedia, breakpoints);\n    styleTag.classList.add(`${CLASS_NAME}ssr`);\n    styleTag.textContent = styleText;\n    _document.head.appendChild(styleTag);\n  };\n}\n\n/**\n *  Provider to set static styles on the server\n */\nexport const SERVER_PROVIDERS = [\n  {\n    provide: <InjectionToken<() => void>>BEFORE_APP_SERIALIZED,\n    useFactory: FLEX_SSR_SERIALIZER_FACTORY,\n    deps: [\n      ServerStylesheet,\n      MatchMedia,\n      DOCUMENT,\n      BREAKPOINTS,\n    ],\n    multi: true\n  },\n  {\n    provide: SERVER_TOKEN,\n    useValue: true\n  },\n  {\n    provide: MatchMedia,\n    useClass: ServerMatchMedia\n  }\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\nimport {SERVER_PROVIDERS} from './server-provider';\n\n@NgModule({\n  providers: [SERVER_PROVIDERS]\n})\nexport class FlexLayoutServerModule {}\n"],"names":["generateCss","stylesheet","mediaQuery","classMap","styleText","IS_DEBUG_MODE","forEach","styles","el","className","get","CLASS_NAME","nextId","set","classList","add","v","k","generateStaticFlexLayoutStyles","serverSheet","matchMedia","breakpoints","Map","defaultStyles","reverse","bp","i","clearStyles","activateBreakpoint","size","deactivateBreakpoint","FLEX_SSR_SERIALIZER_FACTORY","_document","styleTag","createElement","textContent","head","appendChild","SERVER_PROVIDERS","provide","BEFORE_APP_SERIALIZED","useFactory","deps","ServerStylesheet","MatchMedia","DOCUMENT","BREAKPOINTS","multi","SERVER_TOKEN","useValue","useClass","ServerMatchMedia","FlexLayoutServerModule","type","NgModule","args","providers"],"mappings":";;;;;;;ojBAiCA,SAAAA,GAAqBC,EACAC,EACAC,GACnB,GAAIC,GAAYC,EAAgB,oBACjBH,EADjB,KACkC,UAAUA,EAD5C,GAuBE,OArBAD,GAAWK,QAAQ,SAACC,EAAQC,GAC1B,GAAIC,GAAYN,EAASO,IAAIF,EACxBC,KACHA,EAAY,GAAGE,EAAAA,WAAaC,IAC5BT,EAASU,IAAIL,EAAIC,IAEnBD,EAAGM,UAAUC,IAAIN,GACjBL,GAAaC,EAAgB,gBACpBI,EADb,KAC6B,IAAIA,EADjC,IAEIF,EAAOD,QAAQ,SAACU,EAAGC,GACbD,IACFZ,GAAaC,EAAgB,mBACrBY,EADhB,KACsBD,EADtB,IACgCC,EADhC,IACqCD,EADrC,OAIIZ,GAAaC,EAAgB,gBAClB,MAEbD,GAAaC,EAAgB,gBAChB,IAaf,QAAAa,GAA+CC,EACAC,EACAC,GAI7C,GAAMlB,GAAW,GAAImB,KAKfC,EAAgB,GAAID,KAAIH,EAAYlB,YACtCG,EAAYJ,EAAYuB,EAAe,MAAOpB,EAalD,OAXAkB,GAAYG,UACZH,EAAYf,QAAQ,SAACmB,EAAIC,GACvBP,EAAYQ,cACZ,EAAiCC,mBAAmBH,EACpD,IAAMxB,GAAa,GAAIqB,KAAIH,EAAYlB,WACnCA,GAAW4B,KAAO,IACpBzB,GAAaJ,EAAYC,EAAYwB,EAAGvB,WAAYC,IAEtD,EAAiC2B,qBAAqBT,EAAYK,MAG7DtB,EAOT,QAAA2B,GAA4CZ,EACAC,EACAY,EACAX,GAC1C,MAAO,YAGL,GAAMY,GAAWD,EAAUE,cAAc,SACnC9B,EAAYc,EAA+BC,EAAaC,EAAYC,EAC1EY,GAASnB,UAAUC,IAAOJ,EAAAA,WAA9B,OACIsB,EAASE,YAAc/B,EACvB4B,EAAUI,KAAKC,YAAYJ,IAzG/B,GAaIrB,GAAS,EACPP,GAAgB,EAkGTiC,IAETC,QAAqCC,EAAqB,sBAC1DC,WAAYV,EACZW,MACEC,EAAAA,iBACAC,EAAAA,WACAC,EAAAA,SACAC,EAAAA,aAEFC,OAAO,IAGPR,QAASS,EAAAA,aACTC,UAAU,IAGVV,QAASK,EAAAA,WACTM,SAAUC,EAAAA,mBCnIdC,EAAA,yBAPA,sBAWAC,KAACC,EAAAA,SAADC,OACEC,WAAYlB,6CAZdc"}