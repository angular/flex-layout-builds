{"version":3,"file":"flex-layout-server.umd.min.js","sources":["../../src/lib/server/server-provider.ts","../../src/lib/server/module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {BEFORE_APP_SERIALIZED} from '@angular/platform-server';\nimport {\n  BREAKPOINTS,\n  CLASS_NAME,\n  SERVER_TOKEN,\n  BreakPoint,\n  MatchMedia,\n  StylesheetMap,\n  ServerMatchMedia,\n  sortAscendingPriority\n} from '@angular/flex-layout/core';\n\n\n/**\n * Activate all of the registered breakpoints in sequence, and then\n * retrieve the associated stylings from the virtual stylesheet\n * @param serverSheet the virtual stylesheet that stores styles for each\n *        element\n * @param matchMedia the service to activate/deactivate breakpoints\n * @param breakpoints the registered breakpoints to activate/deactivate\n */\nexport function generateStaticFlexLayoutStyles(serverSheet: StylesheetMap,\n                                               matchMedia: MatchMedia,\n                                               breakpoints: BreakPoint[]) {\n  // Store the custom classes in the following map, that way only\n  // one class gets allocated per HTMLElement, and each class can\n  // be referenced in the static media queries\n  const classMap = new Map<HTMLElement, string>();\n\n  // Get the initial stylings for all of the directives,\n  // and initialize the fallback block of stylings\n  const defaultStyles = new Map(serverSheet.stylesheet);\n  let styleText = generateCss(defaultStyles, 'all', classMap);\n\n  [...breakpoints].sort(sortAscendingPriority).forEach((bp, i) => {\n    serverSheet.clearStyles();\n    (matchMedia as ServerMatchMedia).activateBreakpoint(bp);\n    const stylesheet = new Map(serverSheet.stylesheet);\n    if (stylesheet.size > 0) {\n      styleText += generateCss(stylesheet, bp.mediaQuery, classMap);\n    }\n    (matchMedia as ServerMatchMedia).deactivateBreakpoint(breakpoints[i]);\n  });\n\n  return styleText;\n}\n\n/**\n * Create a style tag populated with the dynamic stylings from Flex\n * components and attach it to the head of the DOM\n */\nexport function FLEX_SSR_SERIALIZER_FACTORY(serverSheet: StylesheetMap,\n                                            matchMedia: MatchMedia,\n                                            _document: Document,\n                                            breakpoints: BreakPoint[]) {\n  return () => {\n    // This is the style tag that gets inserted into the head of the DOM,\n    // populated with the manual media queries\n    const styleTag = _document.createElement('style');\n    const styleText = generateStaticFlexLayoutStyles(serverSheet, matchMedia, breakpoints);\n    styleTag.classList.add(`${CLASS_NAME}ssr`);\n    styleTag.textContent = styleText;\n    _document.head!.appendChild(styleTag);\n  };\n}\n\n/**\n *  Provider to set static styles on the server\n */\nexport const SERVER_PROVIDERS = [\n  {\n    provide: <InjectionToken<() => void>>BEFORE_APP_SERIALIZED,\n    useFactory: FLEX_SSR_SERIALIZER_FACTORY,\n    deps: [\n      StylesheetMap,\n      MatchMedia,\n      DOCUMENT,\n      BREAKPOINTS,\n    ],\n    multi: true\n  },\n  {\n    provide: SERVER_TOKEN,\n    useValue: true\n  },\n  {\n    provide: MatchMedia,\n    useClass: ServerMatchMedia\n  }\n];\n\n\nlet nextId = 0;\nconst IS_DEBUG_MODE = false;\n\nexport type StyleSheet = Map<HTMLElement, Map<string, string|number>>;\nexport type ClassMap = Map<HTMLElement, string>;\n\n/**\n * create @media queries based on a virtual stylesheet\n * * Adds a unique class to each element and stores it\n *   in a shared classMap for later reuse\n * @param stylesheet the virtual stylesheet that stores styles for each\n *        element\n * @param mediaQuery the given @media CSS selector for the current breakpoint\n * @param classMap the map of HTML elements to class names to avoid duplications\n */\nfunction generateCss(stylesheet: StyleSheet, mediaQuery: string, classMap: ClassMap) {\n  let css = '';\n  stylesheet.forEach((styles, el) => {\n    let keyVals = '', className = getClassName(el, classMap);\n\n    styles.forEach((v, k) => {\n      keyVals += v ? format(`${k}:${v};`) : '';\n    });\n\n    // Build list of CSS styles; each with a className\n    css += format(`.${className} {`, keyVals, '}');\n  });\n\n  // Group 1 or more styles (each with className) in a specific mediaQuery\n  return format(`@media ${mediaQuery} {`, css, '}');\n}\n\n/**\n * For debugging purposes, prefix css segment with linefeed(s) for easy\n  * debugging purposes.\n */\nfunction format(...list: string[]): string {\n  let result = '';\n  list.forEach((css, i) => {\n    result += IS_DEBUG_MODE ? formatSegment(css, i != 0) : css;\n  });\n  return result;\n}\n\nfunction formatSegment(css: string, asPrefix: boolean = true): string {\n  return asPrefix ? '\\n' + css : css + '\\n';\n}\n\n/**\n * Get className associated with CSS styling\n * If not found, generate global className and set\n * association.\n */\nfunction getClassName(element: HTMLElement, classMap: Map<HTMLElement, string>) {\n  let className = classMap.get(element);\n  if (!className) {\n    className = `${CLASS_NAME}${nextId++}`;\n    classMap.set(element, className);\n  }\n  element.classList.add(className);\n\n  return className;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\nimport {SERVER_PROVIDERS} from './server-provider';\n\n@NgModule({\n  providers: [SERVER_PROVIDERS]\n})\nexport class FlexLayoutServerModule {}\n"],"names":["generateStaticFlexLayoutStyles","serverSheet","matchMedia","breakpoints","classMap","Map","defaultStyles","stylesheet","styleText","generateCss","slice","sort","sortAscendingPriority","forEach","bp","i","clearStyles","activateBreakpoint","size","mediaQuery","deactivateBreakpoint","FLEX_SSR_SERIALIZER_FACTORY","_document","styleTag","createElement","classList","add","CLASS_NAME","textContent","appendChild","css","styles","el","keyVals","className","getClassName","v","k","format","list","_i","arguments","length","result","IS_DEBUG_MODE","formatSegment","asPrefix","element","get","nextId","set","SERVER_PROVIDERS","provide","BEFORE_APP_SERIALIZED","useFactory","deps","StylesheetMap","MatchMedia","DOCUMENT","BREAKPOINTS","multi","SERVER_TOKEN","useValue","useClass","ServerMatchMedia","FlexLayoutServerModule","type","NgModule","args","providers"],"mappings":";;;;;;;qjBA8BA,SAAgBA,GAA+BC,EACAC,EACAC,GAI7C,GAAMC,GAAW,GAAIC,KAIfC,EAAgB,GAAID,KAAIJ,EAAYM,YACtCC,EAAYC,EAAYH,EAAe,MAAOF,EAYlD,OAVID,GAANO,QAAmBC,KAAKC,EAAAA,uBAAuBC,QAAQ,SAACC,EAAIC,GACxDd,EAAYe,cACZ,EAAiCC,mBAAmBH,EACpD,IAAMP,GAAa,GAAIF,KAAIJ,EAAYM,WACnCA,GAAWW,KAAO,IACpBV,GAAaC,EAAYF,EAAYO,EAAGK,WAAYf,IAEtD,EAAiCgB,qBAAqBjB,EAAYY,MAG7DP,EAOT,QAAgBa,GAA4BpB,EACAC,EACAoB,EACAnB,GAC1C,MAAO,YAGL,GAAMoB,GAAWD,EAAUE,cAAc,SACnChB,EAAYR,EAA+BC,EAAaC,EAAYC,EAC1EoB,GAASE,UAAUC,IAAOC,EAAAA,WAA9B,OACIJ,EAASK,YAAcpB,EACvBc,EAAc,KAAEO,YAAYN,IA6ChC,QAASd,GAAYF,EAAwBY,EAAoBf,GAC/D,GAAI0B,GAAM,EAaV,OAZAvB,GAAWM,QAAQ,SAACkB,EAAQC,GAC1B,GAAIC,GAAU,GAAIC,EAAYC,EAAaH,EAAI5B,EAE/C2B,GAAOlB,QAAQ,SAACuB,EAAGC,GACjBJ,GAAWG,EAAIE,EAAUD,EAA/B,IAAoCD,EAApC,KAA4C,KAIxCN,GAAOQ,EAAO,IAAIJ,EAAtB,KAAqCD,EAAS,OAIrCK,EAAO,UAAUnB,EAA1B,KAA0CW,EAAK,KAO/C,QAASQ,KAAT,IAAgB,GAAhBC,MAAAC,EAAA,EAAgBA,EAAhBC,UAAAC,OAAgBF,IAAAD,EAAhBC,GAAAC,UAAAD,EACE,IAAIG,GAAS,EAIb,OAHAJ,GAAK1B,QAAQ,SAACiB,EAAKf,GACjB4B,GAAUC,EAAgBC,EAAcf,EAAU,GAALf,GAAUe,IAElDa,EAGT,QAASE,GAAcf,EAAagB,GAClC,WADF,KAAAA,IAAoCA,GAApC,GACSA,EAAW,KAAOhB,EAAMA,EAAM,KAQvC,QAASK,GAAaY,EAAsB3C,GAC1C,GAAI8B,GAAY9B,EAAS4C,IAAID,EAO7B,OANKb,KACHA,EAAY,GAAGP,EAAAA,WAAasB,IAC5B7C,EAAS8C,IAAIH,EAASb,IAExBa,EAAQtB,UAAUC,IAAIQ,GAEfA,EApFT,GAAaiB,KAETC,QAAqCC,EAAqB,sBAC1DC,WAAYjC,EACZkC,MACEC,EAAAA,cACAC,EAAAA,WACAC,EAAAA,SACAC,EAAAA,aAEFC,OAAO,IAGPR,QAASS,EAAAA,aACTC,UAAU,IAGVV,QAASK,EAAAA,WACTM,SAAUC,EAAAA,mBAKVf,EAAS,EACPL,GAAgB,EC/FtBqB,EAAA,yBAPA,sBAWAC,KAACC,EAAAA,SAADC,OACEC,WAAYlB,OAZdc"}