{"version":3,"file":"break-points-provider.js","sourceRoot":"","sources":["break-points-provider.ts"],"names":[],"mappings":"OAOO,EAAC,WAAW,EAAC,MAAM,eAAe;AAGzC,OAAO,IAAM,kBAAkB,GAAG;IACpB,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI;CACjE,CAAC;AAEd,OAAO,IAAM,YAAY,GAAkB;IACzC;QACE,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,IAAI;QACZ,WAAW,EAAE,KAAK;QAClB,UAAU,EAAE,+BAA+B;KAC5C;IACD;QACE,KAAK,EAAE,OAAO;QACd,MAAM,EAAE,MAAM;QACd,WAAW,EAAE,IAAI;QACjB,UAAU,EAAE,+BAA+B;KAC5C;IACD;QACE,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,IAAI;QACZ,WAAW,EAAE,KAAK;QAClB,UAAU,EAAE,sDAAsD;KACnE;IACD;QACE,KAAK,EAAE,OAAO;QACd,MAAM,EAAE,MAAM;QACd,WAAW,EAAE,IAAI;QACjB,UAAU,EAAE,+BAA+B;KAC5C;IACD;QACE,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,IAAI;QACZ,WAAW,EAAE,KAAK;QAClB,UAAU,EAAE,uDAAuD;KACpE;IACD;QACE,KAAK,EAAE,OAAO;QACd,MAAM,EAAE,MAAM;QACd,WAAW,EAAE,IAAI;QACjB,UAAU,EAAE,gCAAgC;KAC7C;IACD;QACE,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,IAAI;QACZ,WAAW,EAAE,KAAK;QAClB,UAAU,EAAE,wDAAwD;KACrE;IACD;QACE,KAAK,EAAE,OAAO;QACd,MAAM,EAAE,MAAM;QACd,WAAW,EAAE,IAAI;QACjB,UAAU,EAAE,gCAAgC;KAC7C;IACD;QACE,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,IAAI;QACZ,WAAW,EAAE,KAAK;QAClB,UAAU,EAAE,gCAAgC,CAAE,wCAAwC;KACvF;CACF,CAAC;AAEF;;;GAGG;AACH,OAAO,IAAM,WAAW,GAAgB,IAAI,WAAW,CAAC,kBAAkB,CAAC,CAAC;AAE5E;;;;;;GAMG;AACH,OAAO,IAAM,mBAAmB,GAAG;IACjC,OAAO,EAAE,WAAW;IACpB,QAAQ,EAAE,YAAY;CACvB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {OpaqueToken} from '@angular/core';\nimport {BreakPoint} from '../breakpoints/break-point';\n\nexport const RESPONSIVE_ALIASES = [\n              'xs', 'gt-xs', 'sm', 'gt-sm', 'md', 'gt-md', 'lg', 'gt-lg', 'xl'\n            ];\n\nexport const RAW_DEFAULTS: BreakPoint[ ] = [\n  {\n    alias: 'xs',\n    suffix: 'Xs',\n    overlapping: false,\n    mediaQuery: 'screen and (max-width: 599px)'\n  },\n  {\n    alias: 'gt-xs',\n    suffix: 'GtXs',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 600px)'\n  },\n  {\n    alias: 'sm',\n    suffix: 'Sm',\n    overlapping: false,\n    mediaQuery: 'screen and (min-width: 600px) and (max-width: 959px)'\n  },\n  {\n    alias: 'gt-sm',\n    suffix: 'GtSm',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 960px)'\n  },\n  {\n    alias: 'md',\n    suffix: 'Md',\n    overlapping: false,\n    mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279px)'\n  },\n  {\n    alias: 'gt-md',\n    suffix: 'GtMd',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 1280px)'\n  },\n  {\n    alias: 'lg',\n    suffix: 'Lg',\n    overlapping: false,\n    mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919px)'\n  },\n  {\n    alias: 'gt-lg',\n    suffix: 'GtLg',\n    overlapping: true,\n    mediaQuery: 'screen and (min-width: 1920px)'\n  },\n  {\n    alias: 'xl',\n    suffix: 'Xl',\n    overlapping: false,\n    mediaQuery: 'screen and (min-width: 1921px)'  // should be distinct from 'gt-lg' range\n  }\n];\n\n/**\n *  Opaque Token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n */\nexport const BREAKPOINTS: OpaqueToken = new OpaqueToken('fxRawBreakpoints');\n\n/**\n *  Provider to return observable to ALL known BreakPoint(s)\n *  Developers should build custom providers to override\n *  this default BreakPointRegistry dataset provider\n *  NOTE: !! custom breakpoints lists MUST contain the following aliases & suffixes:\n *        [xs, gt-xs, sm, gt-sm, md, gt-md, lg, gt-lg, xl]\n */\nexport const BreakPointsProvider = { // tslint:disable-line:variable-name\n  provide: BREAKPOINTS,\n  useValue: RAW_DEFAULTS\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}