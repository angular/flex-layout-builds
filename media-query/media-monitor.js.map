{"version":3,"file":"media-monitor.js","sourceRoot":"","sources":["media-monitor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\n\nimport {BreakPoint} from './breakpoints/break-point';\nimport {BreakPointRegistry} from './breakpoints/break-point-registry';\nimport {MatchMedia} from './match-media';\nimport {MediaChange} from './media-change';\nimport {mergeAlias} from '../utils/add-alias';\n\n\n/**\n * MediaMonitor uses the MatchMedia service to observe mediaQuery changes (both activations and\n * deactivations). These changes are are published as MediaChange notifications.\n *\n * Note: all notifications will be performed within the\n * ng Zone to trigger change detections and component updates.\n *\n * It is the MediaMonitor that:\n *  - auto registers all known breakpoints\n *  - injects alias information into each raw MediaChange event\n *  - provides accessor to the currently active BreakPoint\n *  - publish list of overlapping BreakPoint(s); used by ResponsiveActivation\n */\n\nexport class MediaMonitor {\n  constructor(private _breakpoints: BreakPointRegistry, private _matchMedia: MatchMedia) {\n    this._registerBreakpoints();\n  }\n\n  /**\n   * Read-only accessor to the list of breakpoints configured in the BreakPointRegistry provider\n   */\n  get breakpoints(): BreakPoint[] {\n    return [...this._breakpoints.items];\n  }\n\n  get activeOverlaps(): BreakPoint[] {\n    let items: BreakPoint[] = this._breakpoints.overlappings.reverse();\n    return items.filter((bp: BreakPoint) => {\n      return this._matchMedia.isActive(bp.mediaQuery);\n    });\n  }\n\n  get active(): BreakPoint {\n    let found = null, items = this.breakpoints.reverse();\n    items.forEach(bp => {\n      if (bp.alias !== '') {\n        if (!found && this._matchMedia.isActive(bp.mediaQuery)) {\n          found = bp;\n        }\n      }\n    });\n\n    let first = this.breakpoints[0];\n    return found || (this._matchMedia.isActive(first.mediaQuery) ? first : null);\n  }\n\n  /**\n   * For the specified mediaQuery alias, is the mediaQuery range active?\n   */\n  isActive(alias: string): boolean {\n    let bp = this._breakpoints.findByAlias(alias) || this._breakpoints.findByQuery(alias);\n    return this._matchMedia.isActive(bp ? bp.mediaQuery : alias);\n  }\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * If specific breakpoint is observed, only return *activated* events\n   * otherwise return all events for BOTH activated + deactivated changes.\n   */\n  observe(alias?: string): Observable<MediaChange> {\n    let bp = this._breakpoints.findByAlias(alias) || this._breakpoints.findByQuery(alias);\n    let hasAlias = (change: MediaChange) => (bp ? change.mqAlias !== \"\" : true);\n    // Note: the raw MediaChange events [from MatchMedia] do not contain important alias information\n    return this._matchMedia\n        .observe(bp ? bp.mediaQuery : alias)\n        .map(change => mergeAlias(change, bp))\n        .filter(hasAlias);\n  }\n\n  /**\n   * Immediate calls to matchMedia() to establish listeners\n   * and prepare for immediate subscription notifications\n   */\n  private _registerBreakpoints() {\n    this._breakpoints.items.forEach(bp => {\n      this._matchMedia.registerQuery(bp.mediaQuery);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BreakPointRegistry, },\n{type: MatchMedia, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}