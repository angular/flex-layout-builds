{"version":3,"file":"server.mjs","sources":["../../../src/lib/server/module.ts","../../../src/lib/server/server-provider.ts","../../../src/lib/server/server-match-media.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\nimport {SERVER_PROVIDERS} from './server-provider';\n\n@NgModule({\n  providers: [SERVER_PROVIDERS]\n})\nexport class FlexLayoutServerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {BEFORE_APP_SERIALIZED} from '@angular/platform-server';\nimport {\n  BREAKPOINTS,\n  CLASS_NAME,\n  SERVER_TOKEN,\n  BreakPoint,\n  ɵMatchMedia as MatchMedia,\n  StylesheetMap,\n  sortAscendingPriority\n} from '@angular/flex-layout/core';\n\nimport {ServerMatchMedia} from './server-match-media';\n\n/**\n * Activate all of the registered breakpoints in sequence, and then\n * retrieve the associated stylings from the virtual stylesheet\n * @param serverSheet the virtual stylesheet that stores styles for each\n *        element\n * @param mediaController the MatchMedia service to activate/deactivate breakpoints\n * @param breakpoints the registered breakpoints to activate/deactivate\n * @param layoutConfig the library config, and specifically the breakpoints to activate\n */\nexport function generateStaticFlexLayoutStyles(serverSheet: StylesheetMap,\n                                               mediaController: ServerMatchMedia,\n                                               breakpoints: BreakPoint[]) {\n  // Store the custom classes in the following map, that way only\n  // one class gets allocated per HTMLElement, and each class can\n  // be referenced in the static media queries\n  const classMap = new Map<HTMLElement, string>();\n\n  // Get the initial stylings for all of the directives,\n  // and initialize the fallback block of stylings\n  const defaultStyles = new Map(serverSheet.stylesheet);\n  // Reset the class counter, otherwise class numbers will\n  // increase with each server render\n  nextId = 0;\n  let styleText = generateCss(defaultStyles, 'all', classMap);\n\n  [...breakpoints].sort(sortAscendingPriority).forEach((bp, i) => {\n    serverSheet.clearStyles();\n    mediaController.activateBreakpoint(bp);\n    const stylesheet = new Map(serverSheet.stylesheet);\n    if (stylesheet.size > 0) {\n      styleText += generateCss(stylesheet, bp.mediaQuery, classMap);\n    }\n    mediaController.deactivateBreakpoint(breakpoints[i]);\n  });\n\n\n\n  return styleText;\n}\n\n/**\n * Create a style tag populated with the dynamic stylings from Flex\n * components and attach it to the head of the DOM\n */\nexport function FLEX_SSR_SERIALIZER_FACTORY(serverSheet: StylesheetMap,\n                                            mediaController: ServerMatchMedia,\n                                            _document: Document,\n                                            breakpoints: BreakPoint[]) {\n  return () => {\n    // This is the style tag that gets inserted into the head of the DOM,\n    // populated with the manual media queries\n    const styleTag = _document.createElement('style');\n    const styleText = generateStaticFlexLayoutStyles(serverSheet, mediaController, breakpoints);\n    styleTag.classList.add(`${CLASS_NAME}ssr`);\n    styleTag.textContent = styleText;\n    _document.head!.appendChild(styleTag);\n  };\n}\n\n/**\n *  Provider to set static styles on the server\n */\nexport const SERVER_PROVIDERS = [\n  {\n    provide: <InjectionToken<() => void>>BEFORE_APP_SERIALIZED,\n    useFactory: FLEX_SSR_SERIALIZER_FACTORY,\n    deps: [\n      StylesheetMap,\n      MatchMedia,\n      DOCUMENT,\n      BREAKPOINTS\n    ],\n    multi: true\n  },\n  {\n    provide: SERVER_TOKEN,\n    useValue: true\n  },\n  {\n    provide: MatchMedia,\n    useClass: ServerMatchMedia\n  }\n];\n\n\nlet nextId = 0;\nconst IS_DEBUG_MODE = false;\n\nexport type StyleSheet = Map<HTMLElement, Map<string, string|number>>;\nexport type ClassMap = Map<HTMLElement, string>;\n\n/**\n * create @media queries based on a virtual stylesheet\n * * Adds a unique class to each element and stores it\n *   in a shared classMap for later reuse\n * @param stylesheet the virtual stylesheet that stores styles for each\n *        element\n * @param mediaQuery the given @media CSS selector for the current breakpoint\n * @param classMap the map of HTML elements to class names to avoid duplications\n */\nfunction generateCss(stylesheet: StyleSheet, mediaQuery: string, classMap: ClassMap) {\n  let css = '';\n  stylesheet.forEach((styles, el) => {\n    let keyVals = '';\n    let className = getClassName(el, classMap);\n\n    styles.forEach((v, k) => {\n      keyVals += v ? format(`${k}:${v};`) : '';\n    });\n\n    // Build list of CSS styles; each with a className\n    css += format(`.${className} {`, keyVals, '}');\n  });\n\n  // Group 1 or more styles (each with className) in a specific mediaQuery\n  return format(`@media ${mediaQuery} {`, css, '}');\n}\n\n/**\n * For debugging purposes, prefix css segment with linefeed(s) for easy\n  * debugging purposes.\n */\nfunction format(...list: string[]): string {\n  let result = '';\n  list.forEach((css, i) => {\n    result += IS_DEBUG_MODE ? formatSegment(css, i !== 0) : css;\n  });\n  return result;\n}\n\nfunction formatSegment(css: string, asPrefix: boolean = true): string {\n  return asPrefix ? `\\n${css}` : `${css}\\n`;\n}\n\n/**\n * Get className associated with CSS styling\n * If not found, generate global className and set\n * association.\n */\nfunction getClassName(element: HTMLElement, classMap: Map<HTMLElement, string>) {\n  let className = classMap.get(element);\n  if (!className) {\n    className = `${CLASS_NAME}${nextId++}`;\n    classMap.set(element, className);\n  }\n  element.classList.add(className);\n\n  return className;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone, PLATFORM_ID} from '@angular/core';\nimport {\n  BreakPoint,\n  ɵMatchMedia as MatchMedia,\n  BREAKPOINTS,\n  LAYOUT_CONFIG,\n  LayoutConfigOptions\n} from '@angular/flex-layout/core';\n\n/**\n * Special server-only class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nexport class ServerMediaQueryList implements MediaQueryList {\n  private _listeners: MediaQueryListListener[] = [];\n\n  get matches(): boolean {\n    return this._isActive;\n  }\n\n  get media(): string {\n    return this._mediaQuery;\n  }\n\n  constructor(private _mediaQuery: string, private _isActive = false) {}\n\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n\n  /** Notify all listeners that 'matches === TRUE' */\n  activate(): ServerMediaQueryList {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(this, {matches: this.matches, media: this.media} as MediaQueryListEvent);\n      });\n    }\n    return this;\n  }\n\n  /** Notify all listeners that 'matches === false' */\n  deactivate(): ServerMediaQueryList {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(this, {matches: this.matches, media: this.media} as MediaQueryListEvent);\n      });\n    }\n    return this;\n  }\n\n  /** Add a listener to our internal list to activate later */\n  addListener(listener: MediaQueryListListener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = listener!;\n      cb.call(this, {matches: this.matches, media: this.media} as MediaQueryListEvent);\n    }\n  }\n\n  /** Don't need to remove listeners in the server environment */\n  removeListener(_: MediaQueryListListener | null) {\n  }\n\n  addEventListener<K extends keyof\n    MediaQueryListEventMap>(_: K,\n                            __: (this: MediaQueryList,\n                                 ev: MediaQueryListEventMap[K]) => any,\n                            ___?: boolean | AddEventListenerOptions): void;\n  addEventListener(_: string,\n                   __: EventListenerOrEventListenerObject,\n                   ___?: boolean | AddEventListenerOptions) {\n  }\n\n  removeEventListener<K extends keyof\n    MediaQueryListEventMap>(_: K,\n                            __: (this: MediaQueryList,\n                                 ev: MediaQueryListEventMap[K]) => any,\n                            ___?: boolean | EventListenerOptions): void;\n  removeEventListener(_: string,\n                      __: EventListenerOrEventListenerObject,\n                      ___?: boolean | EventListenerOptions) {\n  }\n\n  dispatchEvent(_: Event): boolean {\n    return false;\n  }\n\n  onchange: MediaQueryListListener = null;\n}\n\n/**\n * Special server-only implementation of MatchMedia that uses the above\n * ServerMediaQueryList as its internal representation\n *\n * Also contains methods to activate and deactivate breakpoints\n */\n@Injectable()\nexport class ServerMatchMedia extends MatchMedia {\n  private _activeBreakpoints: BreakPoint[] = [];\n\n  constructor(protected _zone: NgZone,\n              @Inject(PLATFORM_ID) protected _platformId: Object,\n              @Inject(DOCUMENT) protected _document: any,\n              @Inject(BREAKPOINTS) protected breakpoints: BreakPoint[],\n              @Inject(LAYOUT_CONFIG) protected layoutConfig: LayoutConfigOptions) {\n    super(_zone, _platformId, _document);\n\n    const serverBps = layoutConfig.ssrObserveBreakpoints;\n    if (serverBps) {\n      this._activeBreakpoints = serverBps\n        .reduce((acc: BreakPoint[], serverBp: string) => {\n          const foundBp = breakpoints.find(bp => serverBp === bp.alias);\n          if (!foundBp) {\n            console.warn(`FlexLayoutServerModule: unknown breakpoint alias \"${serverBp}\"`);\n          } else {\n            acc.push(foundBp);\n          }\n          return acc;\n        }, []);\n    }\n  }\n\n  /** Activate the specified breakpoint if we're on the server, no-op otherwise */\n  activateBreakpoint(bp: BreakPoint) {\n    const lookupBreakpoint = this.registry.get(bp.mediaQuery) as ServerMediaQueryList;\n    if (lookupBreakpoint) {\n      lookupBreakpoint.activate();\n    }\n  }\n\n  /** Deactivate the specified breakpoint if we're on the server, no-op otherwise */\n  deactivateBreakpoint(bp: BreakPoint) {\n    const lookupBreakpoint = this.registry.get(bp.mediaQuery) as ServerMediaQueryList;\n    if (lookupBreakpoint) {\n      lookupBreakpoint.deactivate();\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected buildMQL(query: string): ServerMediaQueryList {\n    const isActive = this._activeBreakpoints.some(ab => ab.mediaQuery === query);\n\n    return new ServerMediaQueryList(query, isActive);\n  }\n}\n\ntype MediaQueryListListener = ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;\n"],"names":["MatchMedia"],"mappings":"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"}