{"version":3,"file":"angular-flex-layout-server.mjs","sources":["../../../../projects/libs/flex-layout/server/server-match-media.ts","../../../../projects/libs/flex-layout/server/server-provider.ts","../../../../projects/libs/flex-layout/server/module.ts","../../../../projects/libs/flex-layout/server/public-api.ts","../../../../projects/libs/flex-layout/server/angular-flex-layout-server.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone, PLATFORM_ID} from '@angular/core';\nimport {\n  BreakPoint,\n  ɵMatchMedia as MatchMedia,\n  BREAKPOINTS,\n  LAYOUT_CONFIG,\n  LayoutConfigOptions\n} from '@angular/flex-layout/core';\n\n/**\n * Special server-only class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nexport class ServerMediaQueryList implements MediaQueryList {\n  private _listeners: MediaQueryListListener[] = [];\n\n  get matches(): boolean {\n    return this._isActive;\n  }\n\n  get media(): string {\n    return this._mediaQuery;\n  }\n\n  constructor(private _mediaQuery: string, private _isActive = false) {}\n\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n\n  /** Notify all listeners that 'matches === TRUE' */\n  activate(): ServerMediaQueryList {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(this, {matches: this.matches, media: this.media} as MediaQueryListEvent);\n      });\n    }\n    return this;\n  }\n\n  /** Notify all listeners that 'matches === false' */\n  deactivate(): ServerMediaQueryList {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(this, {matches: this.matches, media: this.media} as MediaQueryListEvent);\n      });\n    }\n    return this;\n  }\n\n  /** Add a listener to our internal list to activate later */\n  addListener(listener: MediaQueryListListener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = listener!;\n      cb.call(this, {matches: this.matches, media: this.media} as MediaQueryListEvent);\n    }\n  }\n\n  /** Don't need to remove listeners in the server environment */\n  removeListener(_: MediaQueryListListener | null) {\n  }\n\n  addEventListener<K extends keyof\n    MediaQueryListEventMap>(_: K,\n                            __: (this: MediaQueryList,\n                                 ev: MediaQueryListEventMap[K]) => any,\n                            ___?: boolean | AddEventListenerOptions): void;\n  addEventListener(_: string,\n                   __: EventListenerOrEventListenerObject,\n                   ___?: boolean | AddEventListenerOptions) {\n  }\n\n  removeEventListener<K extends keyof\n    MediaQueryListEventMap>(_: K,\n                            __: (this: MediaQueryList,\n                                 ev: MediaQueryListEventMap[K]) => any,\n                            ___?: boolean | EventListenerOptions): void;\n  removeEventListener(_: string,\n                      __: EventListenerOrEventListenerObject,\n                      ___?: boolean | EventListenerOptions) {\n  }\n\n  dispatchEvent(_: Event): boolean {\n    return false;\n  }\n\n  onchange: MediaQueryListListener = null;\n}\n\n/**\n * Special server-only implementation of MatchMedia that uses the above\n * ServerMediaQueryList as its internal representation\n *\n * Also contains methods to activate and deactivate breakpoints\n */\n@Injectable()\nexport class ServerMatchMedia extends MatchMedia {\n  private _activeBreakpoints: BreakPoint[] = [];\n\n  constructor(protected _zone: NgZone,\n              @Inject(PLATFORM_ID) protected _platformId: Object,\n              @Inject(DOCUMENT) protected _document: any,\n              @Inject(BREAKPOINTS) protected breakpoints: BreakPoint[],\n              @Inject(LAYOUT_CONFIG) protected layoutConfig: LayoutConfigOptions) {\n    super(_zone, _platformId, _document);\n\n    const serverBps = layoutConfig.ssrObserveBreakpoints;\n    if (serverBps) {\n      this._activeBreakpoints = serverBps\n        .reduce((acc: BreakPoint[], serverBp: string) => {\n          const foundBp = breakpoints.find(bp => serverBp === bp.alias);\n          if (!foundBp) {\n            console.warn(`FlexLayoutServerModule: unknown breakpoint alias \"${serverBp}\"`);\n          } else {\n            acc.push(foundBp);\n          }\n          return acc;\n        }, []);\n    }\n  }\n\n  /** Activate the specified breakpoint if we're on the server, no-op otherwise */\n  activateBreakpoint(bp: BreakPoint) {\n    const lookupBreakpoint = this.registry.get(bp.mediaQuery) as ServerMediaQueryList;\n    if (lookupBreakpoint) {\n      lookupBreakpoint.activate();\n    }\n  }\n\n  /** Deactivate the specified breakpoint if we're on the server, no-op otherwise */\n  deactivateBreakpoint(bp: BreakPoint) {\n    const lookupBreakpoint = this.registry.get(bp.mediaQuery) as ServerMediaQueryList;\n    if (lookupBreakpoint) {\n      lookupBreakpoint.deactivate();\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected buildMQL(query: string): ServerMediaQueryList {\n    const isActive = this._activeBreakpoints.some(ab => ab.mediaQuery === query);\n\n    return new ServerMediaQueryList(query, isActive);\n  }\n}\n\ntype MediaQueryListListener = ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {BEFORE_APP_SERIALIZED} from '@angular/platform-server';\nimport {\n  BREAKPOINTS,\n  CLASS_NAME,\n  SERVER_TOKEN,\n  BreakPoint,\n  ɵMatchMedia as MatchMedia,\n  StylesheetMap,\n  sortAscendingPriority\n} from '@angular/flex-layout/core';\n\nimport {ServerMatchMedia} from './server-match-media';\n\n/**\n * Activate all of the registered breakpoints in sequence, and then\n * retrieve the associated stylings from the virtual stylesheet\n * @param serverSheet the virtual stylesheet that stores styles for each\n *        element\n * @param mediaController the MatchMedia service to activate/deactivate breakpoints\n * @param breakpoints the registered breakpoints to activate/deactivate\n * @param layoutConfig the library config, and specifically the breakpoints to activate\n */\nexport function generateStaticFlexLayoutStyles(serverSheet: StylesheetMap,\n                                               mediaController: ServerMatchMedia,\n                                               breakpoints: BreakPoint[]) {\n  // Store the custom classes in the following map, that way only\n  // one class gets allocated per HTMLElement, and each class can\n  // be referenced in the static media queries\n  const classMap = new Map<HTMLElement, string>();\n\n  // Get the initial stylings for all of the directives,\n  // and initialize the fallback block of stylings\n  const defaultStyles = new Map(serverSheet.stylesheet);\n  // Reset the class counter, otherwise class numbers will\n  // increase with each server render\n  nextId = 0;\n  let styleText = generateCss(defaultStyles, 'all', classMap);\n\n  [...breakpoints].sort(sortAscendingPriority).forEach((bp, i) => {\n    serverSheet.clearStyles();\n    mediaController.activateBreakpoint(bp);\n    const stylesheet = new Map(serverSheet.stylesheet);\n    if (stylesheet.size > 0) {\n      styleText += generateCss(stylesheet, bp.mediaQuery, classMap);\n    }\n    mediaController.deactivateBreakpoint(breakpoints[i]);\n  });\n\n\n\n  return styleText;\n}\n\n/**\n * Create a style tag populated with the dynamic stylings from Flex\n * components and attach it to the head of the DOM\n */\nexport function FLEX_SSR_SERIALIZER_FACTORY(serverSheet: StylesheetMap,\n                                            mediaController: ServerMatchMedia,\n                                            _document: Document,\n                                            breakpoints: BreakPoint[]) {\n  return () => {\n    // This is the style tag that gets inserted into the head of the DOM,\n    // populated with the manual media queries\n    const styleTag = _document.createElement('style');\n    const styleText = generateStaticFlexLayoutStyles(serverSheet, mediaController, breakpoints);\n    styleTag.classList.add(`${CLASS_NAME}ssr`);\n    styleTag.textContent = styleText;\n    _document.head!.appendChild(styleTag);\n  };\n}\n\n/**\n *  Provider to set static styles on the server\n */\nexport const SERVER_PROVIDERS = [\n  {\n    provide: <InjectionToken<() => void>>BEFORE_APP_SERIALIZED,\n    useFactory: FLEX_SSR_SERIALIZER_FACTORY,\n    deps: [\n      StylesheetMap,\n      MatchMedia,\n      DOCUMENT,\n      BREAKPOINTS\n    ],\n    multi: true\n  },\n  {\n    provide: SERVER_TOKEN,\n    useValue: true\n  },\n  {\n    provide: MatchMedia,\n    useClass: ServerMatchMedia\n  }\n];\n\n\nlet nextId = 0;\nconst IS_DEBUG_MODE = false;\n\nexport type StyleSheet = Map<HTMLElement, Map<string, string|number>>;\nexport type ClassMap = Map<HTMLElement, string>;\n\n/**\n * create @media queries based on a virtual stylesheet\n * * Adds a unique class to each element and stores it\n *   in a shared classMap for later reuse\n * @param stylesheet the virtual stylesheet that stores styles for each\n *        element\n * @param mediaQuery the given @media CSS selector for the current breakpoint\n * @param classMap the map of HTML elements to class names to avoid duplications\n */\nfunction generateCss(stylesheet: StyleSheet, mediaQuery: string, classMap: ClassMap) {\n  let css = '';\n  stylesheet.forEach((styles, el) => {\n    let keyVals = '';\n    let className = getClassName(el, classMap);\n\n    styles.forEach((v, k) => {\n      keyVals += v ? format(`${k}:${v};`) : '';\n    });\n\n    // Build list of CSS styles; each with a className\n    css += format(`.${className} {`, keyVals, '}');\n  });\n\n  // Group 1 or more styles (each with className) in a specific mediaQuery\n  return format(`@media ${mediaQuery} {`, css, '}');\n}\n\n/**\n * For debugging purposes, prefix css segment with linefeed(s) for easy\n  * debugging purposes.\n */\nfunction format(...list: string[]): string {\n  let result = '';\n  list.forEach((css, i) => {\n    result += IS_DEBUG_MODE ? formatSegment(css, i !== 0) : css;\n  });\n  return result;\n}\n\nfunction formatSegment(css: string, asPrefix: boolean = true): string {\n  return asPrefix ? `\\n${css}` : `${css}\\n`;\n}\n\n/**\n * Get className associated with CSS styling\n * If not found, generate global className and set\n * association.\n */\nfunction getClassName(element: HTMLElement, classMap: Map<HTMLElement, string>) {\n  let className = classMap.get(element);\n  if (!className) {\n    className = `${CLASS_NAME}${nextId++}`;\n    classMap.set(element, className);\n  }\n  element.classList.add(className);\n\n  return className;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\nimport {SERVER_PROVIDERS} from './server-provider';\n\n@NgModule({\n  providers: [SERVER_PROVIDERS]\n})\nexport class FlexLayoutServerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './module';\nexport * from './server-provider';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["MatchMedia"],"mappings":"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"}