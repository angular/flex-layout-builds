{"version":3,"file":"auto-prefixer.js","sourceRoot":"","sources":["auto-prefixer.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,qDAAqD;AACrD,iCAAiC,MAAM;IACrC,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC;QAEvB,IAAI,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;QAExB,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACZ,KAAK,SAAS;gBACZ,MAAM,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;gBAC1B,iEAAiE;gBACjE,KAAK,CAAC;YAER,KAAK,MAAM;gBACT,MAAM,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC;gBAC3B,MAAM,CAAC,kBAAkB,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjD,KAAK,CAAC;YAER,KAAK,gBAAgB;gBACnB,KAAK,GAAG,KAAK,IAAI,KAAK,CAAC;gBACvB,MAAM,CAAC,gBAAgB,CAAC,GAAG,KAAK,CAAC;gBACjC,MAAM,CAAC,oBAAoB,CAAC,GAAG,KAAK,CAAC;gBACrC,MAAM,CAAC,oBAAoB,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;gBAClD,MAAM,CAAC,uBAAuB,CAAC,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;gBACxD,KAAK,CAAC;YAER,KAAK,WAAW;gBACd,MAAM,CAAC,eAAe,CAAC,GAAG,KAAK,CAAC;gBAChC,KAAK,CAAC;YAER,KAAK,OAAO;gBACV,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACjB,KAAK,GAAG,GAAG,CAAC;gBACd,CAAC;gBACD,MAAM,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;gBACxB,MAAM,CAAC,gBAAgB,CAAC,GAAG,KAAK,CAAC;gBACjC,MAAM,CAAC,2BAA2B,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;gBAC1D,KAAK,CAAC;YAER,KAAK,iBAAiB;gBACpB,MAAM,CAAC,eAAe,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;gBAC5C,MAAM,CAAC,kBAAkB,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;gBAC/C,KAAK,CAAC;YAER,KAAK,aAAa;gBAChB,MAAM,CAAC,gBAAgB,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;gBAC7C,MAAM,CAAC,mBAAmB,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;gBAChD,KAAK,CAAC;YAER,KAAK,YAAY;gBACf,MAAM,CAAC,qBAAqB,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;gBAClD,KAAK,CAAC;YAER,KAAK,eAAe;gBAClB,MAAM,CAAC,mBAAmB,CAAC,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC;gBACzD,MAAM,CAAC,oBAAoB,CAAC,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC;gBAC1D,KAAK,CAAC;QACV,CAAC;IACH,CAAC;IACD,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AAED,oCAAoC,KAAa;IAC/C,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACd,KAAK,eAAe;YAClB,MAAM,CAAC,SAAS,CAAC;QACnB,KAAK,cAAc;YACjB,MAAM,CAAC,YAAY,CAAC;QACtB;YACE,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;AACH,CAAC;AAED,8DAA8D;AAC9D,2BAA2B,KAAU;IAAV,qBAAU,GAAV,UAAU;IACnC,MAAM,CAAC,CAAC,KAAK,IAAI,YAAY,CAAC,GAAG,OAAO,GAAG,CAAC,CAAC,KAAK,IAAI,UAAU,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC,CAAC;AACrF,CAAC;AAED,gDAAgD;AAChD,4BAA4B,aAAqB;IAArB,6BAAqB,GAArB,qBAAqB;IAC/C,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,YAAY,GAAG,UAAU,CAAC;AAC5E,CAAC;AAED,mDAAmD;AACnD,+BAA+B,aAAqB;IAArB,6BAAqB,GAArB,qBAAqB;IAElD,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,GAAG,SAAS,GAAG,QAAQ,CAAC;AACxE,CAAC;AAED,8CAA8C;AAC9C,6BAA6B,KAAW;IAAX,qBAAW,GAAX,WAAW;IACtC,IAAI,KAAK,GAAG,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;AAC/C,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Applies CSS prefixes to appropriate style keys.*/\nexport function applyCssPrefixes(target) {\n  for (let key in target) {\n\n    let value = target[key];\n\n    switch (key) {\n      case 'display':\n        target['display'] = value;\n        // also need 'display : -webkit-box' and 'display : -ms-flexbox;'\n        break;\n\n      case 'flex':\n        target['-ms-flex'] = value;\n        target['-webkit-box-flex'] = value.split(\" \")[0];\n        break;\n\n      case 'flex-direction':\n        value = value || \"row\";\n        target['flex-direction'] = value;\n        target['-ms-flex-direction'] = value;\n        target['-webkit-box-orient'] = toBoxOrient(value);\n        target['-webkit-box-direction'] = toBoxDirection(value);\n        break;\n\n      case 'flex-wrap':\n        target['-ms-flex-wrap'] = value;\n        break;\n\n      case 'order':\n        if (isNaN(value)) {\n          value = \"0\";\n        }\n        target['order'] = value;\n        target['-ms-flex-order'] = value;\n        target['-webkit-box-ordinal-group'] = toBoxOrdinal(value);\n        break;\n\n      case 'justify-content':\n        target['-ms-flex-pack'] = toBoxValue(value);\n        target['-webkit-box-pack'] = toBoxValue(value);\n        break;\n\n      case 'align-items':\n        target['-ms-flex-align'] = toBoxValue(value);\n        target['-webkit-box-align'] = toBoxValue(value);\n        break;\n\n      case 'align-self':\n        target['-ms-flex-item-align'] = toBoxValue(value);\n        break;\n\n      case 'align-content':\n        target['-ms-align-content'] = toAlignContentValue(value);\n        target['-ms-flex-line-pack'] = toAlignContentValue(value);\n        break;\n    }\n  }\n  return target;\n}\n\nexport function toAlignContentValue(value: string) {\n  switch (value) {\n    case \"space-between\" :\n      return \"justify\";\n    case \"space-around\"  :\n      return \"distribute\";\n    default :\n      return toBoxValue(value);\n  }\n}\n\n/** Convert flex values flex-start, flex-end to start, end. */\nexport function toBoxValue(value = \"\") {\n  return (value == 'flex-start') ? 'start' : ((value == 'flex-end') ? 'end' : value);\n}\n\n/** Convert flex Direction to Box orientation */\nexport function toBoxOrient(flexDirection = 'row') {\n  return flexDirection.indexOf('column') === -1 ? 'horizontal' : 'vertical';\n}\n\n/** Convert flex Direction to Box direction type */\nexport function toBoxDirection(flexDirection = 'row') {\n\n  return flexDirection.indexOf('reverse') !== -1 ? 'reverse' : 'normal';\n}\n\n/** Convert flex order to Box ordinal group */\nexport function toBoxOrdinal(order = '0') {\n  let value = order ? parseInt(order) + 1 : 1;\n  return isNaN(value) ? \"0\" : value.toString();\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}